(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    612032,      13067]
NotebookOptionsPosition[    605639,      12857]
NotebookOutlinePosition[    605974,      12872]
CellTagsIndexPosition[    605931,      12869]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Cos", "[", "x", "]"}], "+", 
     RowBox[{"I", " ", 
      RowBox[{"Sin", "[", "x", "]"}]}]}], ")"}], "^", "3"}], "//", 
  "TrigExpand"}]], "Input",
 CellChangeTimes->{{3.599967970033589*^9, 3.599968032968115*^9}, {
  3.5999682517512417`*^9, 3.599968257861855*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"Cos", "[", "x", "]"}], "3"], "+", 
  RowBox[{"3", " ", "\[ImaginaryI]", " ", 
   SuperscriptBox[
    RowBox[{"Cos", "[", "x", "]"}], "2"], " ", 
   RowBox[{"Sin", "[", "x", "]"}]}], "-", 
  RowBox[{"3", " ", 
   RowBox[{"Cos", "[", "x", "]"}], " ", 
   SuperscriptBox[
    RowBox[{"Sin", "[", "x", "]"}], "2"]}], "-", 
  RowBox[{"\[ImaginaryI]", " ", 
   SuperscriptBox[
    RowBox[{"Sin", "[", "x", "]"}], "3"]}]}]], "Output",
 CellChangeTimes->{{3.599967990951105*^9, 3.5999680337308083`*^9}, {
   3.59996825253815*^9, 3.599968258780239*^9}, 3.5999683156919727`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TeXForm", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.599968074404252*^9, 3.599968076777377*^9}, {
  3.5999682899102077`*^9, 3.5999683010785503`*^9}}],

Cell["\<\
-i \\sin ^3(x)+\\cos ^3(x)+3 i \\sin (x) \\cos ^2(x)-3 \\sin ^2(x) \\cos (x)\
\>", "Output",
 CellChangeTimes->{
  3.59996807762259*^9, {3.5999683017292337`*^9, 3.599968318074935*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "factor x^5-1=0", Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", "Factor[-1 + x^5 == 0]"}, 
      "ExtrusionOpen" -> False, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Factor[-1 + x^5 == 0]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"factor\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    StyleBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["x", "5"], "-", "1"}], "\[LongEqual]", 
                    "0"}], ScriptLevel -> 0, StripOnInput -> False]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Irreducible factorization", "scanner" -> "Factor", 
     "id" -> "IrreducibleFactorization", "position" -> "200", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Factor[x^5 - 1 == 0, Extension -> Flatten[x /. Solve[(x^5 - 1 == 0) \
== 0, x]]]"}], 
       XMLElement["moutput", {}, {"(-1 + x) (1 + x + x^2 + x^3 + x^4) == 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                RowBox[{"(", 
                  RowBox[{"x", "-", "1"}], ")"}], " ", 
                RowBox[{"(", 
                  RowBox[{
                    SuperscriptBox["x", "4"], "+", 
                    SuperscriptBox["x", "3"], "+", 
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], ")"}]}], 
              "\[LongEqual]", "0"}], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Root plot", "scanner" -> "Plot", "id" -> "RootPlot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[{-1 + x^5, 0}, {x, 0., 2.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{{}, {}, {
                Hue[0.67, 0.6, 0.6], 
                Directive[
                 RGBColor[0.24720000000000014`, 0.24, 0.6], 
                 AbsoluteThickness[1]], 
                LineBox[CompressedData["
1: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

                 "]]}, {}}}, {GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              Method -> {"GridLinesInFront" -> True}, Epilog -> {{
                 AbsolutePointSize[5], 
                 Hue[0], {
                  TagBox[
                   TooltipBox[
                    PointBox[{1, 0}], 
                    
                    TemplateBox[{"\"(\"", "1", "\",\"", "0", "\")\""}, 
                    "RowDefault"]], Annotation[#, 
                    Row[{"(", 1, ",", 0, ")"}], "Tooltip"]& ]}}, 
                DynamicBox[
                 Typeset`ToBoxes[
                  
                  DynamicModule[{
                   CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[1, {354, 1}, 3, CompressedData["
1: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
mggsv5CviFvtHHBc9RtmZFY/9SV9w/8BaxGT7w==
                    
                    "], CompressedData["
1:eJwN1GkgFAgDxnE6hRchIYpd3cJKbBaPmxwlR9Eh5FhXhKQoKaSQWhKh3Dly
G/cxmEGM+74ZY1xD0zqiw759eT78vv8fcRs3YztWFhYWm1+jZzfXRZy3UxmT
fqoRLhSIxH0Xgp8LRYFz7bZ/ZXw0fHqjfBiHYkErKr0tmhKHi5HDTuePvAPb
dpdZusN73CjfKqg1TYTibR1m6Foi9h1/KWUenYRtQcWGNfQkMCcHXSQUkjGu
9DP0+dNktMaIZzMHklG2qtVy6VgK0o2c5qt8UhDAVnT0mVAqTui8Cil0T0V3
kNv8SFMqfEmGejsPpUFiu2S2lHcaKGrsnOZtabjzaM4lQCIdjT9TpXq70+Gm
9CTi5/EPEPS1Zh4J+ADHDdHCe9IZ4FX4wZsSnIGKO8OelLEMcK5EnzkUlgnC
H3eidaczYelu8vW2YhbylrjLSXNZMJdcFlpGNlicKff3v8mG8VyIkpPWR3w/
4pAQGf8RqXZaW1UrH7FGZSVyJ+fgnfik2NnNHGhb1QTYGOUiZuy+BmErF2oi
FqnjZnlYuKKwky0nDwcZ927mnMqHB8c8n7pFPhpPmJP6A/Ph5ih/mGU0H6SQ
tL6o3QUQzOAPPn66AET6v3Tj5wXgtc3LSPuzEPZPDloo2haiMjl8T0dEIWyn
nJ026IUoYxkRDuctAqeYXqu4ShEIlsck9V8Xgf3hm9EJYhEsE3aFezGKsGuU
tpSgUQxzi6Q85pdifB4xZU8WJiDYks3ORIOAoptuwiVRBHDdUg7yVShBGpM5
IWlVAiXPVMXxkBI4+XAwVYdLQH48dGXXg1Jc2xlOKE0rxb9PVXkc20shFv6B
3HqoDH5v7si8qi8Dn/DxUPXFMmTFj86s8JVjIEkj7pJdOWQ/7t0lwlaBT1Jk
qzaZClgV+FQ+tKhAeMmE+1RWBeaIOSPphpXw17CWN/euhEAj/6s97yuh0eqr
7cKsxLu+cwV/RFbhjPlPjunKKlCG8+2jaFXYnNgv8vVMNUwXZoKrBqvB8V/A
NZ2DtYhxvGwpqV0LiV5Jq723aqGSOXBzpLoW5ZnRhFIpIlhuBMhnqROhze9S
Gn+JiJ6HauUBD4lYMmFU6bcTIbdnQFmFSsT9mroamXUidh9/Q9x3sA7iW2qk
Cdc6mGW8afX8Xz3irz82sBevB5XXtc38TD3cHqh3KF+vxzPjpe7dOfXo3D1o
8o1YD4Hq+l5Gbz1Sjsb0d/2oR/UP9eE4gwbsKDx19YVVA/QcBEcfeTVgoGtp
zC6+AV/SY6akGQ04fHF5riGUBGF/HUWHJBJ4chJD2UtJ+MZmInWRSkInsdRz
/E8yyMs85IDzZFSIOAkctiUjzUek3DmCjPsyAVsbM2S4WQ5fiP9Ohm3Y6STs
bcSFuRmNYKVGSCTqPeOLbEQ7Nz+/lGoTGpRd7brMmlDm3Fji5dyElCYfi8ro
Jvj4j73TXWrCb5/Tj99824z9oiy+u/KbwalvQckkN+NrOocbk9kMiqV78QOd
T7jbfhYxq5/AJUWY+cTWgtRwmbDvIi3oMjg6ZKnVgpOt/J6Ho1sw0fQ5vVCh
Fd5HnQ1p+q3gfEpf2WfVirPaY6r3QloRSWoZxlArdOrSuNruUzAuJk7YekGB
16P4qzIpFCQhMiOylYLv1Y/Ur4i0Ia/iqvdsdRv2F+8dZ2XtwLWw76Y0gQ4k
2860Nkp2QHJfeXmoeQfUva1e78vvgHz85fQo6U5YhFCmghQ74eelJnpXqxN1
BiejLK52wuDnVsDBp52wtky/njHeiUC9A7Gx851Il3/Z+3y1Ewyu+/qu7F3w
rjU8KyvfhTCxNf6q8C6UUDUoHUrd6NcN+BKu04313BoBA+NuKPietW526EYZ
n/Q68Z9ulGsKixXOdWM467KW+0o3vvG8dpLa6obiGDchi6/n13/t1EtR6UFV
OtMzKqoHo5xSscbve/DDw7mGJ6sHyqCzhdf2oGZgJCFooQe1bE1N3qq9qHdK
OGDB6EXRvLOz5XovUv9WrLzJ0ocg+4Ert/j7oGuz9+0TpT50WAQJ5ob1YVTX
dd/2U/1oa/rLjk2hHzXa7IT/qfXjveYHU0GzftioTkWeetCPOQUzXvO2fqwd
UebOcR2AClW96bnPAIITdP3/fjIAAX7Tz7/HDkCe1bnjLWkAPiMxESEHBvEj
YpXb9tMgNPW/Nan1DiJsF8ujQxODEH3AwRxeHYSK02+dF8WG4K9p9BJ3h7Bt
M5vnwOFhHGhTX4H0MOSShvpszw7D7tzuuFzDYTTH2hxW9x5GhKKQomPTMET8
gm+WOo7gjJGo9qjnCM5LFB9jfTgCf8rUkt4/I6CKKPuMV4wgs3olbCfnKOT/
syoxyR2FgSHxsVbZKG7GHbqgUD+Klwrjs8L9o5h3uypE/TmK+EkzP3fDMbDW
66mHM8YgyJPF5b8+BinLPSPuLOO48q3J05R/HMWyWmkHlMZhnwK2rNBxUALl
2htPTECRu3XbqzMTyIi1VriqOoEnuS8SP5v98sE5D8GAX34yYb/TwATU5x/n
71KfxD2p9hZnnUnkewrNdBpM4uBWnlDc5Uls8o49lnb95UoKZuYxkzj0cnEz
c3kSNdb+mYUrk7A8zWdRuTGJ+H7FMsq2KQiKPvf+LDAF3qxjK3KYwk6SHaM2
YgqprzfjmqOmoOkQrt8VO4XH7IQsasoUtox2OO4sm8LGWPKM3uQUFr9OjPfJ
UFHiEFGvJ0/FowGV9Nq/qBAoTXDN1Kb+6ufqD79rVLxd7ReSCKFC90ubqccE
FXzWD/6cpVEx3ikpcm2BCq/80GmtNSreu53zEOKYxvoSKYIoP43UhcoWrhfT
uPXmwu9OkdNQ0Jz2JcdMoyWB/ZRfyjS+GFlEzJdNQ6V03YQ0PY2hJ3+M3TtL
Q7IM+UyfCg0uY+YvZDRpYFF4hNnzNBxZaE8ytaXBy8jFXjqCBi7RD59pNBpU
Lz0Zm56nwSPiRit1mYZ+VsEPkxs0vKOHWI5yzkAq36mtR24GhhpS2fWBM3jo
xx5b92wG+QR6MPHFDPiPvbepiZn51R2PcMXHGbj0fwkp6J1BmCPBPlGCjgXV
nBCOE3ToCKZleUvTsa0patlAkY57El7emxfosJ+QDTb2pUPNLD9tRzcd66rZ
tL/9Z1GVuhh3N3AWj9kkTYKfzYKr82NdSuQsjtzIfTf+YRaXHhSYm3bOglBe
SoH4HLxkScUCDXOwlxNLfNU8B3N5v1DO9jn8pShns21oDtvUU7mXl+cQcTHQ
iSw8jyx3TTEvj3lM5JJCu8QX0Lm0gyF7dAFESS2DKMkFJGaROS8rLMAmvTF8
1GAB9ITmiNm7C1gKo0T+bFvAd6feuOP3F2Eqf/2VlP8iPrLSg08HLsIy5utt
5ReLqCML615MXsRTMetVn5ZF8PUvGTQLM3BSbfeWfSUD+VnZRweJDMjxG108
18iA0mxM6skuBs6Hn9Bn0hnwGDKMuce7hPLbUbJhjkvQSRZ3KNi/jLuiN36b
uvYZkgwzjgFDJvi4mWykb0zsqI3L+z3+C5zlKof26P+L7HM2iTXr/2JtUZiH
Hr0CgonO9ijNVfjrBr0vpq9CfExvMCVoDYoKgVFCsuu4drBjk7VnHWst4VT3
gK+I2WHpZSyxgSX+HS/dCBv4P04xk+0=
                    "], CompressedData["
1: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

                    "], Automatic, 
                    Hold[
                    Nearest[CompressedData["
1:eJwN1GkgFAgDxnE6hRchIYpd3cJKbBaPmxwlR9Eh5FhXhKQoKaSQWhKh3Dly
G/cxmEGM+74ZY1xD0zqiw759eT78vv8fcRs3YztWFhYWm1+jZzfXRZy3UxmT
fqoRLhSIxH0Xgp8LRYFz7bZ/ZXw0fHqjfBiHYkErKr0tmhKHi5HDTuePvAPb
dpdZusN73CjfKqg1TYTibR1m6Foi9h1/KWUenYRtQcWGNfQkMCcHXSQUkjGu
9DP0+dNktMaIZzMHklG2qtVy6VgK0o2c5qt8UhDAVnT0mVAqTui8Cil0T0V3
kNv8SFMqfEmGejsPpUFiu2S2lHcaKGrsnOZtabjzaM4lQCIdjT9TpXq70+Gm
9CTi5/EPEPS1Zh4J+ADHDdHCe9IZ4FX4wZsSnIGKO8OelLEMcK5EnzkUlgnC
H3eidaczYelu8vW2YhbylrjLSXNZMJdcFlpGNlicKff3v8mG8VyIkpPWR3w/
4pAQGf8RqXZaW1UrH7FGZSVyJ+fgnfik2NnNHGhb1QTYGOUiZuy+BmErF2oi
FqnjZnlYuKKwky0nDwcZ927mnMqHB8c8n7pFPhpPmJP6A/Ph5ih/mGU0H6SQ
tL6o3QUQzOAPPn66AET6v3Tj5wXgtc3LSPuzEPZPDloo2haiMjl8T0dEIWyn
nJ026IUoYxkRDuctAqeYXqu4ShEIlsck9V8Xgf3hm9EJYhEsE3aFezGKsGuU
tpSgUQxzi6Q85pdifB4xZU8WJiDYks3ORIOAoptuwiVRBHDdUg7yVShBGpM5
IWlVAiXPVMXxkBI4+XAwVYdLQH48dGXXg1Jc2xlOKE0rxb9PVXkc20shFv6B
3HqoDH5v7si8qi8Dn/DxUPXFMmTFj86s8JVjIEkj7pJdOWQ/7t0lwlaBT1Jk
qzaZClgV+FQ+tKhAeMmE+1RWBeaIOSPphpXw17CWN/euhEAj/6s97yuh0eqr
7cKsxLu+cwV/RFbhjPlPjunKKlCG8+2jaFXYnNgv8vVMNUwXZoKrBqvB8V/A
NZ2DtYhxvGwpqV0LiV5Jq723aqGSOXBzpLoW5ZnRhFIpIlhuBMhnqROhze9S
Gn+JiJ6HauUBD4lYMmFU6bcTIbdnQFmFSsT9mroamXUidh9/Q9x3sA7iW2qk
Cdc6mGW8afX8Xz3irz82sBevB5XXtc38TD3cHqh3KF+vxzPjpe7dOfXo3D1o
8o1YD4Hq+l5Gbz1Sjsb0d/2oR/UP9eE4gwbsKDx19YVVA/QcBEcfeTVgoGtp
zC6+AV/SY6akGQ04fHF5riGUBGF/HUWHJBJ4chJD2UtJ+MZmInWRSkInsdRz
/E8yyMs85IDzZFSIOAkctiUjzUek3DmCjPsyAVsbM2S4WQ5fiP9Ohm3Y6STs
bcSFuRmNYKVGSCTqPeOLbEQ7Nz+/lGoTGpRd7brMmlDm3Fji5dyElCYfi8ro
Jvj4j73TXWrCb5/Tj99824z9oiy+u/KbwalvQckkN+NrOocbk9kMiqV78QOd
T7jbfhYxq5/AJUWY+cTWgtRwmbDvIi3oMjg6ZKnVgpOt/J6Ho1sw0fQ5vVCh
Fd5HnQ1p+q3gfEpf2WfVirPaY6r3QloRSWoZxlArdOrSuNruUzAuJk7YekGB
16P4qzIpFCQhMiOylYLv1Y/Ur4i0Ia/iqvdsdRv2F+8dZ2XtwLWw76Y0gQ4k
2860Nkp2QHJfeXmoeQfUva1e78vvgHz85fQo6U5YhFCmghQ74eelJnpXqxN1
BiejLK52wuDnVsDBp52wtky/njHeiUC9A7Gx851Il3/Z+3y1Ewyu+/qu7F3w
rjU8KyvfhTCxNf6q8C6UUDUoHUrd6NcN+BKu04313BoBA+NuKPietW526EYZ
n/Q68Z9ulGsKixXOdWM467KW+0o3vvG8dpLa6obiGDchi6/n13/t1EtR6UFV
OtMzKqoHo5xSscbve/DDw7mGJ6sHyqCzhdf2oGZgJCFooQe1bE1N3qq9qHdK
OGDB6EXRvLOz5XovUv9WrLzJ0ocg+4Ert/j7oGuz9+0TpT50WAQJ5ob1YVTX
dd/2U/1oa/rLjk2hHzXa7IT/qfXjveYHU0GzftioTkWeetCPOQUzXvO2fqwd
UebOcR2AClW96bnPAIITdP3/fjIAAX7Tz7/HDkCe1bnjLWkAPiMxESEHBvEj
YpXb9tMgNPW/Nan1DiJsF8ujQxODEH3AwRxeHYSK02+dF8WG4K9p9BJ3h7Bt
M5vnwOFhHGhTX4H0MOSShvpszw7D7tzuuFzDYTTH2hxW9x5GhKKQomPTMET8
gm+WOo7gjJGo9qjnCM5LFB9jfTgCf8rUkt4/I6CKKPuMV4wgs3olbCfnKOT/
syoxyR2FgSHxsVbZKG7GHbqgUD+Klwrjs8L9o5h3uypE/TmK+EkzP3fDMbDW
66mHM8YgyJPF5b8+BinLPSPuLOO48q3J05R/HMWyWmkHlMZhnwK2rNBxUALl
2htPTECRu3XbqzMTyIi1VriqOoEnuS8SP5v98sE5D8GAX34yYb/TwATU5x/n
71KfxD2p9hZnnUnkewrNdBpM4uBWnlDc5Uls8o49lnb95UoKZuYxkzj0cnEz
c3kSNdb+mYUrk7A8zWdRuTGJ+H7FMsq2KQiKPvf+LDAF3qxjK3KYwk6SHaM2
YgqprzfjmqOmoOkQrt8VO4XH7IQsasoUtox2OO4sm8LGWPKM3uQUFr9OjPfJ
UFHiEFGvJ0/FowGV9Nq/qBAoTXDN1Kb+6ufqD79rVLxd7ReSCKFC90ubqccE
FXzWD/6cpVEx3ikpcm2BCq/80GmtNSreu53zEOKYxvoSKYIoP43UhcoWrhfT
uPXmwu9OkdNQ0Jz2JcdMoyWB/ZRfyjS+GFlEzJdNQ6V03YQ0PY2hJ3+M3TtL
Q7IM+UyfCg0uY+YvZDRpYFF4hNnzNBxZaE8ytaXBy8jFXjqCBi7RD59pNBpU
Lz0Zm56nwSPiRit1mYZ+VsEPkxs0vKOHWI5yzkAq36mtR24GhhpS2fWBM3jo
xx5b92wG+QR6MPHFDPiPvbepiZn51R2PcMXHGbj0fwkp6J1BmCPBPlGCjgXV
nBCOE3ToCKZleUvTsa0patlAkY57El7emxfosJ+QDTb2pUPNLD9tRzcd66rZ
tL/9Z1GVuhh3N3AWj9kkTYKfzYKr82NdSuQsjtzIfTf+YRaXHhSYm3bOglBe
SoH4HLxkScUCDXOwlxNLfNU8B3N5v1DO9jn8pShns21oDtvUU7mXl+cQcTHQ
iSw8jyx3TTEvj3lM5JJCu8QX0Lm0gyF7dAFESS2DKMkFJGaROS8rLMAmvTF8
1GAB9ITmiNm7C1gKo0T+bFvAd6feuOP3F2Eqf/2VlP8iPrLSg08HLsIy5utt
5ReLqCML615MXsRTMetVn5ZF8PUvGTQLM3BSbfeWfSUD+VnZRweJDMjxG108
18iA0mxM6skuBs6Hn9Bn0hnwGDKMuce7hPLbUbJhjkvQSRZ3KNi/jLuiN36b
uvYZkgwzjgFDJvi4mWykb0zsqI3L+z3+C5zlKof26P+L7HM2iTXr/2JtUZiH
Hr0CgonO9ijNVfjrBr0vpq9CfExvMCVoDYoKgVFCsuu4drBjk7VnHWst4VT3
gK+I2WHpZSyxgSX+HS/dCBv4P04xk+0=
                    "] -> CompressedData["
1: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

                    "]]]][
                    Part[#, 1]]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                   If[
                   CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                   TraditionalForm, Graphics]]}, AspectRatio -> 
              NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> True, 
              AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
              BaseStyle -> {CellBaseline -> Baseline}, Epilog -> {
                AbsolutePointSize[5], 
                Hue[0], {
                 TagBox[
                  TooltipBox[
                   PointBox[{1, 0}], 
                   
                   TemplateBox[{"\"(\"", "1", "\",\"", "0", "\")\""}, 
                    "RowDefault"]], Annotation[#, 
                   Row[{"(", 1, ",", 0, ")"}], "Tooltip"]& ]}}, 
              FrameTicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10], ImageSize -> 
              300., LabelStyle -> {FontFamily -> "Verdana", FontSize -> 10}, 
              Method -> {}, PlotRange -> {{0., 2.}, {-1., 7.787742894583914}},
               PlotRangeClipping -> True, PlotRangePadding -> {
                Scaled[0.02], 
                Scaled[0.02]}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Factorizations over finite fields", "scanner" -> 
     "Factor", "id" -> "FactorizationsOverFiniteFields", "position" -> "400", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 StyleBox["\"GF(2)\"", 
                  GrayLevel[0.6], StripOnInput -> False], 
                 RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["x", "4"], "+", 
                    SuperscriptBox["x", "3"], "+", 
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], ")"}]}], 
                   "\[LongEqual]", "0"}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "FactorizationsOverFiniteFields__More"}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
    "Factor", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.625", 
    "parsetiming" -> "0.255", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa20141i926f7911i80da600004743183hi1c8dg32", "host" -> 
    "http://www5a.wolframalpha.com", "server" -> "48", "related" -> 
    "http://www5a.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa20151i926f7911i80da60000302f6c13c6d8980a&s=48", "version" -> "2.6"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -8., 
    "Date" -> {2014, 1, 28, 23, 55, 26.019899`8.167880588520392}, "Line" -> 
    14, "SessionID" -> 23767575019240572005}, Typeset`showpods$$ = {1, 2, 3, 
   4}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", "Factor[-1 + x^5 == 0]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "factor x^5-1=0"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{187., {31., 20.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}],
        Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", "x"}], ")"}], " ", 
   RowBox[{"(", 
    RowBox[{"1", "+", "x", "+", 
     SuperscriptBox["x", "2"], "+", 
     SuperscriptBox["x", "3"], "+", 
     SuperscriptBox["x", "4"]}], ")"}]}], "\[Equal]", "0"}]], "Output",
 CellChangeTimes->{3.5999709210593567`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "^", 
     RowBox[{"(", 
      RowBox[{"2", "n"}], ")"}]}], " ", "+", " ", "1"}], " ", "=", " ", "0"}],
   "]"}]], "Input",
 CellChangeTimes->{{3.599971513020204*^9, 3.599971536496429*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Set", "::", "write"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Tag \[NoBreak]\\!\\(Plus\\)\[NoBreak] in \[NoBreak]\\!\\(1 \
+ x\\^\\(2\\\\ n\\)\\)\[NoBreak] is Protected. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/write\\\", ButtonNote -> \
\\\"Set::write\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.5999715380329447`*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Solve", "::", "naqs"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"\[NoBreak]\\!\\(0\\)\[NoBreak] is not a quantified system \
of equations and inequalities. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/Solve\\\", ButtonNote -> \\\"Solve::naqs\\\"]\\)\"\
\>"}]], "Message", "MSG",
 CellChangeTimes->{3.599971538044492*^9}],

Cell[BoxData[
 RowBox[{"Solve", "[", "0", "]"}]], "Output",
 CellChangeTimes->{3.599971538045834*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Solve x^(2n) + 1 = 0 for x", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"Result", "Results", 1, 2, "Content"}, 
      "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}, 
    PodStates -> {"Result__Step-by-step solution"}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Solve[1 + x^(2 n) == 0, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"solve\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["x", 
                    RowBox[{"2", " ", "n"}]], "+", "1"}], "\[LongEqual]", 
                    "0"}], HoldForm], 
                    StyleBox[
                    "\" for \"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, 
                    GrayLevel[0.6], StripOnInput -> False], "x"}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Results", "scanner" -> "Solve", "id" -> "Result", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "2", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Solve[1 + x^(2 n) == 0, {x}]"}], 
       XMLElement["moutput", {}, {"{{x -> I^n^(-1)}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"x", "\[LongEqual]", 
              TagBox[
               SuperscriptBox["\[ImaginaryI]", 
                FractionBox["1", "n"]], Identity]}], TraditionalForm]], 
          "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    FormBox[
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"Solve for \"", "x"}, "RowDefault"], 
                    TraditionalForm], Format[#, TraditionalForm]& ], 
                    TraditionalForm]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"1", "+", 
                    SuperscriptBox["x", 
                    RowBox[{"2", " ", "n"}]]}], HoldForm], "\[LongEqual]", 
                    "0"}], HoldForm]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Subtract \"", "1", "\" from both sides\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["x", 
                    RowBox[{"2", " ", "n"}]], "\[LongEqual]", 
                    RowBox[{"-", "1"}]}], HoldForm], HoldForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Take the natural logarithm of both sides and bring the \
power out in front\""}, "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "n", " ", 
                    RowBox[{"log", "(", "x", ")"}]}], "\[LongEqual]", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], HoldForm], ")"}]}]}],
                     HoldForm], 
                    StyleBox["\"  for  \"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    RowBox[{"k", "\[Element]", 
                    TagBox["\[DoubleStruckCapitalZ]", 
                    Function[{}, Integers]]}]}, "RowDefault"], HoldForm], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Divide both sides by \"", 
                    RowBox[{"2", " ", "n"}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"log", "(", "x", ")"}], "\[LongEqual]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], HoldForm], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]}], HoldForm], 
                    StyleBox["\"  for  \"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    RowBox[{"k", "\[Element]", 
                    TagBox["\[DoubleStruckCapitalZ]", 
                    Function[{}, Integers]]}]}, "RowDefault"], HoldForm], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    "\"Cancel logarithms by taking exp of both sides\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer\"", "\":\""}, "RowDefault"], 
                    FontFamily -> "Arial", FontSize -> 12, StripOnInput -> 
                    False], "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{"x", "\[LongEqual]", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], HoldForm], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]]}], HoldForm], 
                    StyleBox["\"  for  \"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    RowBox[{"k", "\[Element]", 
                    TagBox["\[DoubleStruckCapitalZ]", 
                    Function[{}, Integers]]}]}, "RowDefault"], HoldForm], 
                    HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{
                    RGBColor[{1., 0.984313725490196, 0.6745098039215687}]}}}, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False, FrameStyle -> 
                    RGBColor[{0.8196078431372549, 0.788235294117647, 
                    0.16078431372549018`}]], "Grid"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Result__Hide steps"}, {}]}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{"  ", "\"  \"", 
                  StyleBox[
                   RowBox[{"log", "(", "x", ")"}], FontFamily -> 
                   "Bitstream Charter", Bold, 14, StripOnInput -> False], 
                  "\"is the natural logarithm\""}, "RowWithSeparators"], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}], 
       XMLElement[
       "info", {"text" -> "\[DoubleStruckCapitalZ] is the set of integers"}, {
        
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/mathematica/ref/Integers.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Z.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{"  ", "\"  \"", 
                  StyleBox[
                   TagBox["\[DoubleStruckCapitalZ]", 
                    Function[{}, Integers]], FontFamily -> 
                   "Bitstream Charter", Bold, 14, StripOnInput -> False], 
                  "\"is the set of integers\""}, "RowWithSeparators"], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}]}]}], 
   Typeset`pod3$$, Typeset`pod4$$, Typeset`pod5$$, Typeset`pod6$$, 
   Typeset`pod7$$, Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, 
   Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, 
   Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, 
   Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, 
   Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, 
   Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, 
   Typeset`pod31$$, Typeset`pod32$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`aux8$$ = {True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
     "Solve", "timedout" -> "Solve", "timedoutpods" -> "", "timing" -> 
     "2.498", "parsetiming" -> "0.515", "parsetimedout" -> "false", 
     "recalculate" -> 
     "http://www4b.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa79791deaeceadah9ee6f00004cgahchbd743d2c4&s=14", "id" -> 
     "MSPa79801deaeceadah9ee6f000054i6f4g7e881hihb", "host" -> 
     "http://www4b.wolframalpha.com", "server" -> "14", "related" -> 
     "http://www4b.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa79811deaeceadah9ee6f000024gce6c03029a0a5&s=14", "version" -> "2.6"}, {
    "success" -> "true", "error" -> "false", "numpods" -> "0", "datatypes" -> 
     "Solve", "timedout" -> "Solve", "timedoutpods" -> "", "timing" -> 
     "2.611", "parsetiming" -> "0.", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "host" -> 
     "http://www4b.wolframalpha.com", "server" -> "14", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -8., 
    "Date" -> {2014, 1, 29, 0, 6, 21.467767`8.084361856465835}, "Line" -> 16, 
    "SessionID" -> 23767575019240572005}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
   17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}, 
   Typeset`chosen$$ = {"Result", "Results", 1, 2, "Content"}, Typeset`open$$ =
    True, Typeset`newq$$ = "Solve x^(2n) + 1 = 0 for x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
         Typeset`pod32$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{560., {847., 20.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
          Typeset`pod32$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "http://www4b.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa79791deaeceadah9ee6f00004cgahchbd743d2c4&s=14", Typeset`asyncpods$$}]]; 
     Typeset`asyncpods$$ = {}; Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   StyleBox[
    FormBox[
     RowBox[{"x", "\[LongEqual]", 
      SuperscriptBox["\[ImaginaryI]", 
       FractionBox["1", "n"]]}],
     TraditionalForm], "Output",
    ScriptLevel->0,
    FontFamily->"Times",
    FontSize->14,
    Background->None],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "Solve x^(2n) + 1 = 0 for x", {{"Result", 1}, "Content"}, 
   PodStates -> {"Result__Step-by-step solution"}]]], "Output",
 CellChangeTimes->{3.5999715658939533`*^9, 3.599978076543231*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "e^(i pi 3/(2n))", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Result", "Exact result", 1, 1, "Output", "E^((((3 I)/2) Pi)/n)"}, 
      "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"E^(I Pi (3/(2 n)))"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             SuperscriptBox["\[ExponentialE]", 
              RowBox[{"\[ImaginaryI]", " ", "\[Pi]", 
                StyleBox["\[Times]", 
                 GrayLevel[0.6]], 
                TagBox[
                 FractionBox["3", 
                  RowBox[{"2", " ", "n"}]], 
                 PolynomialForm[#, TraditionalOrder -> False]& ]}]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "i is the imaginary unit"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/I.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{"  ", "\"  \"", 
                  StyleBox[
                  "\[ImaginaryI]", FontFamily -> "Bitstream Charter", Bold, 
                   14, StripOnInput -> False], "\"is the imaginary unit\""}, 
                 "RowWithSeparators"], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Exact result", "scanner" -> "Identity", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["moutput", {}, {"E^((((3 I)/2) Pi)/n)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             SuperscriptBox["\[ExponentialE]", 
              FractionBox[
               RowBox[{"3", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
               RowBox[{"2", " ", "n"}]]], Identity], TraditionalForm]], 
          "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[E^((((3 I)/2) Pi)/n), {n, 0.25, 0.75}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max2117$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min2116$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2116$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2117$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$943435$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min2116$\
943440$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2117$943441$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max2117$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min2116$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$943435$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2116$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2116$\
943440$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2117$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2117$\
943441$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$943427[
                    Plot[{
                    Re[E^(Complex[0, 
                    Rational[3, 2]] $CellContext`n^(-1) Pi)], 
                    Im[E^(Complex[0, 
                    Rational[3, 2]] $CellContext`n^(-1) Pi)]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][E^(Complex[0, 
                    Rational[3, 2]] $CellContext`n^(-1) Pi), {$CellContext`n, 
                    
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2116$$], 
                    (
                    Piecewise[{{
                    0.5 + 0.26726124191242434` Tan[1.5040801783846716` #], # < 
                    0}}, 0.5 + 
                    0.26726124191242434` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min2116$$], 
                    0.25], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2116$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2117$$]], \

                    (Piecewise[{{
                    0.5 + 0.26726124191242434` Tan[1.5040801783846716` #], # < 
                    0}}, 0.5 + 
                    0.26726124191242434` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min2116$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2117$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2116$$ + 
                    0.0005, 
                    CalculateUtilities`GraphicsUtilities`Private`max2117$$]], 
                    0.75]}, LabelStyle -> {FontFamily -> "Bitstream Charter"},
                     WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, {-1.25, 1.25}}, 
                    PlotRange -> {Automatic, Automatic}, Ticks -> Automatic, 
                    ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["n", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2116$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2117$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$943427] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$943427[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$943427[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/\
APkPiMBNsXJCTENhiTBpSkfO8tdhIL185sZxv8efDZTdKsXaWYDtCUVrLqc/\
P47rnnLvfsSEbpcDAY6Ot2+Sg5SW/\
h7qldduWskKUg788KRbVmUqTX8OyuXWJq9iiHH5R42027fJBqBsbv3+DzwJOSg6HfDOPMMKqn+\
wqKnCW6sYwVO7F/mXKZAGc/6fPX21v261HQlTEYQ5XQW10Ri1yBpukAgW7YZYeD+\
O63T6rt55LzmB6XVCRUP7LWiQJiYaQAjuEE33qlibqPcRkQBBS5dJacOHe6XqCNYiKb0FmBT1zI1cu\
uuKAy7al5UFGzTj/e+9t4IGPnkre4mN3e8RfmxtVi77yo/jl1I9y/\
7Qqv5OlK3jC8dxxpA8NOqF5m80XnLHlC6pJ1zs+puqTeslEfL+\
4wzRvpkGmz7Marrm7Q2ZHN8GrlLcNvd4WXBZb8XNoP7fLFGyrAVZ2hltsnSUo+\
96Id8sgLtHu4urAGj3Gv5jtGY0gGa5zI+\
llVi6uOxzV4MyPEmLvpBqQjmg4Q0YJaE3Hc7rGMmd0cFCQWeH7dsKqxiWxcCbize+6ZIMy2L0/\
IurEJl4N0Ie9gkvzrHyW3lsu5IkPeD4ShGVVrRX8H86MsuYJMZKAnMV7Q1mswh3VQY1DBsh9VIHEBg\
iEk+2U/7pc/\
XMwEUrWvUF3KszhyqTkLD2JYJfiQiszk7ek6sHUFly1GE8nTRnURS9PFbrM5podtpls3tBt6KAmhKQ\
lv6P2c0M8Jf3FOWJqB+yGhHxL6IaEfEvoh4f8dEpzH+Fb6DTYCtu4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[E^((((3 I)/2) Pi)/n), {n, 0.083, 0.75}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max2119$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min2118$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2118$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2119$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$943497$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min2118$\
943498$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2119$943499$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max2119$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min2118$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$943497$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2118$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2118$\
943498$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2119$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2119$\
943499$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$943489[
                    Plot[{
                    Re[E^(Complex[0, 
                    Rational[3, 2]] $CellContext`n^(-1) Pi)], 
                    Im[E^(Complex[0, 
                    Rational[3, 2]] $CellContext`n^(-1) Pi)]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][E^(Complex[0, 
                    Rational[3, 2]] $CellContext`n^(-1) Pi), {$CellContext`n, 
                    
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2118$$], 
                    (
                    Piecewise[{{
                    0.4166666666666667 + 
                    0.3563483225498992 Tan[1.5040801783846716` #], # < 0}}, 
                    0.4166666666666667 + 
                    0.3563483225498991 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min2118$$], 
                    0.08333333333333333], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2118$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2119$$]], \

                    (Piecewise[{{
                    0.4166666666666667 + 
                    0.3563483225498992 Tan[1.5040801783846716` #], # < 0}}, 
                    0.4166666666666667 + 
                    0.3563483225498991 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min2118$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2119$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2118$$ + 
                    0.0006666666666666666, 
                    CalculateUtilities`GraphicsUtilities`Private`max2119$$]], 
                    0.75]}, LabelStyle -> {FontFamily -> "Bitstream Charter"},
                     WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, {-1.25, 1.25}}, 
                    PlotRange -> {Automatic, Automatic}, Ticks -> Automatic, 
                    ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["n", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2118$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2119$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$943489] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$943489[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$943489[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/APkPiMBKuQJiEhtsGYNKAk5Xu9+\
JJauHZmO9vgz4PPbpJm7SrFdICm9MOpvjSP75577nrPjmSU9nu9nr5uzUfJaXoLT0+t2ZWzXBaCvj/\
LFWjNpEiv4bO71sRg9oCTH0C976Y1H6SaEePPb/B9wpOCEwPfDOPMMNCTfUXyKUt07RkpdmJ/\
MuEyIZz9hOfbw63h9muPgqGMiDGghN5qi5hPFdGQ9hDohjU7nIjv/vikPH4uOI/\
huACRgH5kvWNFqIWRgnBMJ/\
jWK03UfczLEEGJopfOkhPnTtsLtFFMZGOY5fjGhVy9bItLVKY9NQ9Katbpx0d/Gx/\
I2IXkPS5nd3b8hYVxtdg7L6p/Tt0Az2/\
bwit5upI3TO8dR9qIYSegl9l80bpKnpCqZV3wc6ouabZsNMaLJ0z9j3TItFkO41XbMGB2ZCu8WnnL8\
MO28DLHlp9L+6E1X7yjBFw1GSq5fZK04PMomikPvEDbp6tz6/AY9yq+\
Y3SGVLDCiWycZbe47nhcgdc7Qoy1m2xAOqKeABHkYF3UcbvHMmZ2p0SRxALPr+\
uXPTaWdSgBd7avPROU2fHlCVm3NqE5SBfqTkwy/fpHxa3kcq7JkPcDYSADtVb0d7A+\
ypIr6FgGRhLjBU29BnNYJTUiKlj2gxIkzolgCMl+2Y/\
75h8uVgKp2leoLuVZHLjSnIUn0S8LfAgiM9Pmdh04uoLbFrOJ5Gmtuoil6eK02RzT/\
SbTjRuaAz2UhNCShA/0bk/o9oS/uCcs7cDdktAtCd2S0C0J3ZLw/y4JLmL8V/oNA6a3Lg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Alternate form assuming n is real", "scanner" -> 
     "Simplification", "id" -> "AlternateFormAssumingAllVariablesAreReal", 
     "position" -> "400", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"ComplexExpand[E^((((3 I)/2) Pi)/n)]"}], 
       XMLElement["moutput", {}, {"Cos[(3 Pi)/(2 n)] + I Sin[(3 Pi)/(2 n)]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"cos", "(", 
                 FractionBox[
                  RowBox[{"3", " ", "\[Pi]"}], 
                  RowBox[{"2", " ", "n"}]], ")"}], "+", 
               RowBox[{"\[ImaginaryI]", " ", 
                 RowBox[{"sin", "(", 
                   FractionBox[
                    RowBox[{"3", " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]], ")"}]}]}], Identity], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Roots", "scanner" -> "Reduce", "id" -> 
     "NoSolutionsFromReduce", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[E^((((3 I)/2) Pi)/n) == 0, {n}]"}], 
       XMLElement["moutput", {}, {"False"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", "\"no roots exist\"", 
               "\[NoBreak]", "\")\""}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}, StripOnInput -> False], TraditionalForm]], 
          "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "NoSolutionsFromReduce__Step-by-step solution"}, {}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Series expansion at n=\[Infinity]", "scanner" -> 
     "Series", "id" -> "SeriesExpansionAt `1`x=Infinity", "position" -> "600",
      "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[E^((((3 I)/2) Pi)/n), {n, Infinity, 4}]"}], 
       XMLElement[
       "moutput", {}, {
        "SeriesData[n, Infinity, {1, ((3 I)/2) Pi, (-9 Pi^2)/8, ((-9 I)/16) \
Pi^3}, 0, 4, 1]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TemplateBox[{
               RowBox[{"1", "+", 
                 FractionBox[
                  RowBox[{"3", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
                  RowBox[{"2", " ", "n"}]], "-", 
                 FractionBox[
                  RowBox[{"9", " ", 
                    SuperscriptBox["\[Pi]", "2"]}], 
                  RowBox[{"8", " ", 
                    SuperscriptBox["n", "2"]}]], "-", 
                 FractionBox[
                  RowBox[{"9", " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[Pi]", "3"]}], 
                  RowBox[{"16", " ", 
                    SuperscriptBox["n", "3"]}]], "+", 
                 InterpretationBox[
                  RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "n"], ")"}], "4"], ")"}], 
                  SeriesData[Global`n, 
                   DirectedInfinity[1], {}, 0, 4, 1], Editable -> False]}], 
               RowBox[{"SeriesData", "[", 
                 RowBox[{"n", ",", "\[Infinity]", ",", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", 
                    FractionBox[
                    RowBox[{"3", " ", "\[ImaginaryI]", " ", "\[Pi]"}], "2"], 
                    ",", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"9", " ", 
                    SuperscriptBox["\[Pi]", "2"]}], "8"]}], ",", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"9", " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[Pi]", "3"]}], "16"]}]}], "}"}], ",", 
                   "0", ",", "4", ",", "1"}], "]"}]}, "SeriesData", 
              DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
              SyntaxForm -> Plus], Identity], TraditionalForm]], "Output"]}], 
       
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "700", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[E^((((3 I)/2) Pi)/n), n]"}], 
       XMLElement[
       "moutput", {}, {"(((-3 I)/2) E^((((3 I)/2) Pi)/n) Pi)/n^2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "n"}]], 
                 Global`TagBoxWrapper["StringBoxes" -> RowBox[{"d/d", "n"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"3", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]], HoldForm], ")"}]}], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{"-", 
                 FractionBox[
                  RowBox[{"3", " ", "\[ImaginaryI]", " ", "\[Pi]", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"3", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]]}], 
                  RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"]}]]}], Identity]}], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Derivative__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution"}, {}]}]}], Typeset`pod8$$ = 
   XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["minput", {}, {"Integrate[E^(I Pi (3/(2 n))), n]"}], 
       XMLElement[
       "moutput", {}, {
        "E^((((3 I)/2) Pi)/n) n - ((3 I)/2) Pi ExpIntegralEi[(((3 I)/2) \
Pi)/n]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", "3"}], 
                    RowBox[{"2", " ", "n"}]]], 
                   RowBox[{"\[DifferentialD]", "n"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"3", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]], " ", "n"}], "-", 
                    RowBox[{
                    FractionBox["3", "2"], " ", "\[ImaginaryI]", " ", "\[Pi]",
                     " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"3", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]}, "ExpIntegralEi"]}]}], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, 
                   GrayLevel[0], StripOnInput -> False], "+", 
                  StyleBox[
                  "constant", FontFamily -> "Helvetica", Magnification -> 
                   0.9 Inherited]}], 
                LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
                
                GrayLevel[0.6], StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "Ei(x) is the exponential integral Ei"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/mathematica/ref/ExpIntegralEi.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/ExpIntegralEi", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ExponentialIntegral.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{"  ", "\"  \"", 
                  StyleBox[
                   TemplateBox[{"x"}, "ExpIntegralEi"], FontFamily -> 
                   "Bitstream Charter", Bold, 14, StripOnInput -> False], 
                  "\"is the exponential integral Ei\""}, "RowWithSeparators"], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}]}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Alternative representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "AlternativeRepresentations:MathematicalFunctionIdentityData", 
     "position" -> "900", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "E^(I Pi (3/(2 n))) == w^a /; a == (((3 I)/2) Pi)/(n Log[w])"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  SuperscriptBox["\[ExponentialE]", 
                   FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    "3"}], 
                    RowBox[{"2", " ", "n"}]]], "\[LongEqual]", 
                  SuperscriptBox["w", "a"]}], HoldForm], 
               StyleBox[
                FormBox[
                 TagBox[
                  FormBox[
                   TemplateBox[{"\"  for \"", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{"a", "\[LongEqual]", 
                    FractionBox[
                    RowBox[{"3", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n", " ", 
                    RowBox[{"log", "(", "w", ")"}]}]]}]}, "RowDefault"], 
                    HoldForm]}, "RowDefault"], TraditionalForm], 
                  Format[#, TraditionalForm]& ], TraditionalForm], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"E^(I Pi (3/(2 n))) == z^(I Pi (3/(2 n))) /; z == E"}], 
       
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  SuperscriptBox["\[ExponentialE]", 
                   FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    "3"}], 
                    RowBox[{"2", " ", "n"}]]], "\[LongEqual]", 
                  SuperscriptBox["z", 
                   FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    "3"}], 
                    RowBox[{"2", " ", "n"}]]]}], HoldForm], 
               StyleBox[
                FormBox[
                 TagBox[
                  FormBox[
                   TemplateBox[{"\"  for \"", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{"z", "\[LongEqual]", "\[ExponentialE]"}]}, 
                    "RowDefault"], HoldForm]}, "RowDefault"], 
                   TraditionalForm], Format[#, TraditionalForm]& ], 
                 TraditionalForm], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "E^(I Pi (3/(2 n))) == 1 + 2/(-1 + Coth[(3 I Pi)/(2 (2 n))])"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                SuperscriptBox["\[ExponentialE]", 
                 FractionBox[
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    "3"}], 
                  RowBox[{"2", " ", "n"}]]], "\[LongEqual]", 
                RowBox[{"1", "+", 
                  FractionBox["2", 
                   RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"coth", "(", 
                    FractionBox[
                    RowBox[{"3", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"2", " ", "n"}], ")"}]}]], ")"}]}]]}]}], 
              HoldForm], FrameStyle -> None, 
             FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "AlternativeRepresentations:MathematicalFunctionIdentityData__More"},\
 {}]}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{"  ", "\"  \"", 
                  StyleBox[
                   RowBox[{"log", "(", "x", ")"}], FontFamily -> 
                   "Bitstream Charter", Bold, 14, StripOnInput -> False], 
                  "\"is the natural logarithm\""}, "RowWithSeparators"], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}], 
       XMLElement[
       "info", {"text" -> "coth(x) is the hyperbolic cotangent function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/Coth.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Coth", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/HyperbolicCotangent.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{"  ", "\"  \"", 
                  StyleBox[
                   RowBox[{"coth", "(", "x", ")"}], FontFamily -> 
                   "Bitstream Charter", Bold, 14, StripOnInput -> False], 
                  "\"is the hyperbolic cotangent function\""}, 
                 "RowWithSeparators"], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Exp/27/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod10$$ = XMLElement[
   "pod", {
    "title" -> "Series representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "SeriesRepresentations:MathematicalFunctionIdentityData", "position" -> 
     "1000", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "E^(I Pi (3/(2 n))) == Sum[BesselI[k, (((3 I)/2) Pi)/n], {k, \
-Infinity, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                SuperscriptBox["\[ExponentialE]", 
                 FractionBox[
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    "3"}], 
                  RowBox[{"2", " ", "n"}]]], "\[LongEqual]", 
                RowBox[{
                  UnderoverscriptBox["\[Sum]", 
                   RowBox[{"k", "=", 
                    RowBox[{"-", "\[Infinity]"}]}], "\[Infinity]"], 
                  TemplateBox[{"k", 
                    FractionBox[
                    RowBox[{"3", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]}, "BesselI"]}]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "E^(I Pi (3/(2 n))) == Sum[((I/n)^k ((3 Pi)/2)^k)/k!, {k, 0, \
Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                SuperscriptBox["\[ExponentialE]", 
                 FractionBox[
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    "3"}], 
                  RowBox[{"2", " ", "n"}]]], "\[LongEqual]", 
                RowBox[{
                  UnderoverscriptBox["\[Sum]", 
                   RowBox[{"k", "=", "0"}], "\[Infinity]"], 
                  FractionBox[
                   RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["\[ImaginaryI]", "n"], ")"}], "k"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox[
                    RowBox[{"3", " ", "\[Pi]"}], "2"], ")"}], "k"]}], 
                   RowBox[{"k", "!"}]]}]}], HoldForm], FrameStyle -> None, 
             FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "E^(I Pi (3/(2 n))) == E^Subscript[z, 0] Sum[((((3 I)/2) Pi)/n - \
Subscript[z, 0])^k/k!, {k, 0, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                SuperscriptBox["\[ExponentialE]", 
                 FractionBox[
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    "3"}], 
                  RowBox[{"2", " ", "n"}]]], "\[LongEqual]", 
                RowBox[{
                  SuperscriptBox["\[ExponentialE]", 
                   SubscriptBox["z", "0"]], " ", 
                  RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "0"}], "\[Infinity]"], 
                    FractionBox[
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"3", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]], "-", 
                    SubscriptBox["z", "0"]}], ")"}], "k"], 
                    RowBox[{"k", "!"}]]}]}]}], HoldForm], FrameStyle -> None, 
             FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "SeriesRepresentations:MathematicalFunctionIdentityData__More"}, \
{}]}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement[
       "info", {
        "text" -> 
         "I_n(z) is the modified Bessel function of the first kind"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/mathematica/ref/BesselI.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/Bessel-TypeFunctions/BesselI", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> 
           "http://mathworld.wolfram.com/ModifiedBesselFunctionoftheFirstKind.\
html", "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{"  ", "\"  \"", 
                  StyleBox[
                   TemplateBox[{"n", "z"}, "BesselI"], FontFamily -> 
                   "Bitstream Charter", Bold, 14, StripOnInput -> False], 
                  "\"is the modified Bessel function of the first kind\""}, 
                 "RowWithSeparators"], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}], 
       XMLElement["info", {"text" -> "n! is the factorial function"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/mathematica/ref/Factorial.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Factorial", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Factorial.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{"  ", "\"  \"", 
                  StyleBox[
                   RowBox[{"n", "!"}], FontFamily -> "Bitstream Charter", 
                   Bold, 14, StripOnInput -> False], 
                  "\"is the factorial function\""}, "RowWithSeparators"], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Exp/06/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Integral representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "IntegralRepresentations:MathematicalFunctionIdentityData", "position" -> 
     "1100", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "E^(I Pi (3/(2 n))) == E^((3 I Integrate[(1 + t^2)^(-1), {t, 0, \
Infinity}])/n)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                SuperscriptBox["\[ExponentialE]", 
                 FractionBox[
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    "3"}], 
                  RowBox[{"2", " ", "n"}]]], "\[LongEqual]", 
                SuperscriptBox["\[ExponentialE]", 
                 RowBox[{
                   FractionBox[
                    RowBox[{"3", " ", "\[ImaginaryI]"}], "n"], 
                   RowBox[{
                    SubsuperscriptBox["\[Integral]", "0", "\[Infinity]"], 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{"1", "+", 
                    SuperscriptBox["t", "2"]}]], 
                    RowBox[{"\[DifferentialD]", "t"}]}]}]}]]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "E^(I Pi (3/(2 n))) == E^((6 I Integrate[Sqrt[1 - t^2], {t, 0, \
1}])/n)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                SuperscriptBox["\[ExponentialE]", 
                 FractionBox[
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    "3"}], 
                  RowBox[{"2", " ", "n"}]]], "\[LongEqual]", 
                SuperscriptBox["\[ExponentialE]", 
                 RowBox[{
                   FractionBox[
                    RowBox[{"6", " ", "\[ImaginaryI]"}], "n"], 
                   RowBox[{
                    SubsuperscriptBox["\[Integral]", "0", "1"], 
                    RowBox[{
                    SqrtBox[
                    RowBox[{"1", "-", 
                    SuperscriptBox["t", "2"]}]], 
                    RowBox[{"\[DifferentialD]", "t"}]}]}]}]]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "E^(I Pi (3/(2 n))) == E^((3 I Integrate[Sin[t]/t, {t, 0, \
Infinity}])/n)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                SuperscriptBox["\[ExponentialE]", 
                 FractionBox[
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    "3"}], 
                  RowBox[{"2", " ", "n"}]]], "\[LongEqual]", 
                SuperscriptBox["\[ExponentialE]", 
                 RowBox[{
                   FractionBox[
                    RowBox[{"3", " ", "\[ImaginaryI]"}], "n"], 
                   RowBox[{
                    SubsuperscriptBox["\[Integral]", "0", "\[Infinity]"], 
                    RowBox[{
                    FractionBox[
                    RowBox[{"sin", "(", "t", ")"}], "t"], 
                    RowBox[{"\[DifferentialD]", "t"}]}]}]}]]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "IntegralRepresentations:MathematicalFunctionIdentityData__More"}, \
{}]}]}], Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, 
   Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, 
   Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, 
   Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, 
   Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
   Typeset`pod32$$, Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, 
   Typeset`pod36$$, Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, 
   Typeset`pod40$$, Typeset`pod41$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False, False, False}, True}, 
   Typeset`aux10$$ = {True, False, {False, False, False}, True}, 
   Typeset`aux11$$ = {True, False, {False, False, False}, True}, 
   Typeset`aux12$$ = {True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`aux39$$ = {
   True, False, {False}, True}, Typeset`aux40$$ = {
   True, False, {False}, True}, Typeset`aux41$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "I", "template" -> "Assuming ${desc1}. Use ${desc2} instead",
         "count" -> "2"}, {
        XMLElement[
        "value", {
         "name" -> "ImaginaryI", "desc" -> "i is the imaginary unit", "input" -> 
          "i_ImaginaryI"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Variable", "desc" -> "i is a variable", "input" -> 
          "i_Variable"}, {}]}]}]}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "11", "datatypes" -> 
     "MathematicalFunctionIdentity", "timedout" -> 
     "InterestingDefiniteIntegrals", "timedoutpods" -> "", "timing" -> 
     "3.161", "parsetiming" -> "0.41", "parsetimedout" -> "false", 
     "recalculate" -> 
     "http://www5a.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa28581g3174e0bhh8ai6a00001bhafc33i789e59f&s=45", "id" -> 
     "MSPa28591g3174e0bhh8ai6a000046822i6fc6i6fgh5", "host" -> 
     "http://www5a.wolframalpha.com", "server" -> "45", "related" -> 
     "http://www5a.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa28601g3174e0bhh8ai6a00001695fbc5figb447e&s=45", "version" -> "2.6"}, {
    "success" -> "true", "error" -> "false", "numpods" -> "0", "datatypes" -> 
     "MathematicalFunctionIdentity", "timedout" -> 
     "InterestingDefiniteIntegrals", "timedoutpods" -> "", "timing" -> 
     "3.376", "parsetiming" -> "0.", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "host" -> 
     "http://www5a.wolframalpha.com", "server" -> "45", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -8., 
    "Date" -> {2014, 2, 2, 11, 15, 51.471564`8.464142340046251}, "Line" -> 10,
     "SessionID" -> 23770121034160310062}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8, 9, 10, 11}, Typeset`failedpods$$ = {12, 13, 14, 15, 16, 17, 18,
    19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 
   37, 38, 39, 40, 41}, Typeset`chosen$$ = {
   "Result", "Exact result", 1, 1, "Output", "E^((((3 I)/2) Pi)/n)"}, 
   Typeset`open$$ = True, Typeset`newq$$ = "e^(i pi 3/(2n))"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, Typeset`pod40$$, 
         Typeset`pod41$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$, 
         Typeset`aux41$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{560., {2911., 20.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, Typeset`pod40$$, 
          Typeset`pod41$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$, 
          Typeset`aux41$$}, Typeset`chosen$$, Typeset`open$$, 
         Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "http://www5a.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa28581g3174e0bhh8ai6a00001bhafc33i789e59f&s=45", Typeset`asyncpods$$}]]; 
     Typeset`asyncpods$$ = {}; Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 SuperscriptBox["\[ExponentialE]", 
  FractionBox[
   RowBox[{"3", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
   RowBox[{"2", " ", "n"}]]]], "Output",
 CellChangeTimes->{{3.599977481065857*^9, 3.599977504057674*^9}, {
   3.5999777952857227`*^9, 3.599977823856476*^9}, 3.600357265259659*^9, 
   3.6003572958080587`*^9, 3.6003573515162163`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"E", "^", 
   RowBox[{"(", 
    RowBox[{"I", " ", 
     RowBox[{"Pi", "/", "2"}]}], ")"}]}], "//", "TrigExpand"}]], "Input",
 CellChangeTimes->{{3.600095104045974*^9, 3.600095122680716*^9}, {
  3.600095152758143*^9, 3.600095170792142*^9}, {3.6003568200276823`*^9, 
  3.600356826222087*^9}}],

Cell[BoxData["\[ImaginaryI]"], "Output",
 CellChangeTimes->{{3.600095110820277*^9, 3.600095123117988*^9}, {
   3.6000951652436743`*^9, 3.60009517192251*^9}, 3.600356820939837*^9, 
   3.600357947441937*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"E", "^", 
  RowBox[{"(", 
   RowBox[{"I", " ", "Pi"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.600356519235858*^9, 3.6003565253858547`*^9}}],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellChangeTimes->{3.600356526264431*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"E", "^", 
  RowBox[{"(", 
   RowBox[{"I", " ", "Pi", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"2", 
        RowBox[{"(", "1", ")"}]}], "+", "1"}], ")"}], "/", 
     RowBox[{"(", 
      RowBox[{"2", "n"}], ")"}]}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.6003567060580797`*^9, 3.600356789448771*^9}, {
  3.600356829403652*^9, 3.600356831037266*^9}}],

Cell[BoxData[
 SuperscriptBox["\[ExponentialE]", 
  FractionBox[
   RowBox[{"3", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
   RowBox[{"2", " ", "n"}]]]], "Output",
 CellChangeTimes->{3.600356790014916*^9, 3.600356832029652*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "(x - E^(I*(PrimePi[2*k + 1]/(2*n))))*(x - E^(I*(PrimePi[2*(n - k - 1) + \
1]/(2*n))))", Typeset`newq$$ = 
   "(x - E^(I*(PrimePi[2*k + 1]/(2*n))))*(x - E^(I*(PrimePi[2*(n - k - 1) + \
1]/(2*n))))", Typeset`chosen$$ = 
   "(x - E^(I*(PrimePi[2*k + 1]/(2*n))))*(x - E^(I*(PrimePi[2*(n - k - 1) + \
1]/(2*n))))", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "(x - E^(I*(PrimePi[2*k + 1]/(2*n))))*(x - \
E^(I*(PrimePi[2*(n - k - 1) + 1]/(2*n))))", 
                  
                  Defer[(Global`x - 
                    E^(I (PrimePi[2 Global`k + 1]/(2 Global`n)))) (Global`x - 
                    E^(I (PrimePi[2 (Global`n - Global`k - 1) + 1]/(2 
                    Global`n))))], "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"x", " ", "-", " ", 
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"PrimePi", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "k"}], " ", "+", " ", "1"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], ")"}]}], ")"}]}]}], 
                   ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"x", " ", "-", " ", 
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"PrimePi", "[", 
                    RowBox[{
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{"n", " ", "-", " ", "k", " ", "-", " ", "1"}], 
                    ")"}]}], " ", "+", " ", "1"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], ")"}]}], ")"}]}]}], 
                   ")"}]}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"x", " ", "-", " ", 
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"PrimePi", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "k"}], " ", "+", " ", "1"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], ")"}]}], ")"}]}]}], 
                   ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"x", " ", "-", " ", 
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"PrimePi", "[", 
                    RowBox[{
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{"n", " ", "-", " ", "k", " ", "-", " ", "1"}], 
                    ")"}]}], " ", "+", " ", "1"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], ")"}]}], ")"}]}]}], 
                   ")"}]}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x", " ", "-", " ", 
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"PrimePi", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "k"}], " ", "+", " ", "1"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], ")"}]}], ")"}]}]}], 
                    ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"x", " ", "-", " ", 
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"PrimePi", "[", 
                    RowBox[{
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{"n", " ", "-", " ", "k", " ", "-", " ", "1"}], 
                    ")"}]}], " ", "+", " ", "1"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], ")"}]}], ")"}]}]}], 
                    ")"}]}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "(x - E^(I*(PrimePi[2*k + 1]/(2*n))))*(x - \
E^(I*(PrimePi[2*(n - k - 1) + 1]/(2*n))))", 
                    
                    Defer[(Global`x - 
                    E^(I (PrimePi[2 Global`k + 1]/(2 Global`n)))) (Global`x - 
                    E^(I (PrimePi[2 (Global`n - Global`k - 1) + 1]/(2 
                    Global`n))))], "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x", " ", "-", " ", 
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"PrimePi", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "k"}], " ", "+", " ", "1"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], ")"}]}], ")"}]}]}], 
                    ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"x", " ", "-", " ", 
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"PrimePi", "[", 
                    RowBox[{
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{"n", " ", "-", " ", "k", " ", "-", " ", "1"}], 
                    ")"}]}], " ", "+", " ", "1"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], ")"}]}], ")"}]}]}], 
                    ")"}]}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x", " ", "-", " ", 
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"PrimePi", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "k"}], " ", "+", " ", "1"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], ")"}]}], ")"}]}]}], 
                    ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"x", " ", "-", " ", 
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"PrimePi", "[", 
                    RowBox[{
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{"n", " ", "-", " ", "k", " ", "-", " ", "1"}], 
                    ")"}]}], " ", "+", " ", "1"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], ")"}]}], ")"}]}]}], 
                    ")"}]}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x", " ", "-", " ", 
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"PrimePi", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "k"}], " ", "+", " ", "1"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], ")"}]}], ")"}]}]}], 
                    ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"x", " ", "-", " ", 
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"PrimePi", "[", 
                    RowBox[{
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{"n", " ", "-", " ", "k", " ", "-", " ", "1"}], 
                    ")"}]}], " ", "+", " ", "1"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], ")"}]}], ")"}]}]}], 
                    ")"}]}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
            PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", 
     SuperscriptBox["\[ExponentialE]", 
      FractionBox[
       RowBox[{"\[ImaginaryI]", " ", 
        RowBox[{"PrimePi", "[", 
         RowBox[{"1", "+", 
          RowBox[{"2", " ", "k"}]}], "]"}]}], 
       RowBox[{"2", " ", "n"}]]]}], "+", "x"}], ")"}], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", 
     SuperscriptBox["\[ExponentialE]", 
      FractionBox[
       RowBox[{"\[ImaginaryI]", " ", 
        RowBox[{"PrimePi", "[", 
         RowBox[{"1", "+", 
          RowBox[{"2", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1"}], "-", "k", "+", "n"}], ")"}]}]}], "]"}]}], 
       RowBox[{"2", " ", "n"}]]]}], "+", "x"}], ")"}]}]], "Output",
 CellChangeTimes->{{3.600359952778963*^9, 3.6003599584589033`*^9}, {
   3.600359990696693*^9, 3.600360008048415*^9}, 3.600360193016301*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"x", " ", "-", " ", 
         RowBox[{"E", "^", 
          RowBox[{"(", 
           RowBox[{"I", "*", "Pi", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"2", "*", "k"}], " ", "+", " ", "1"}], ")"}], "/", 
             RowBox[{"(", 
              RowBox[{"2", "*", "n"}], ")"}]}]}], ")"}]}]}], ")"}], ")"}], 
      "*", 
      RowBox[{"(", 
       RowBox[{"x", " ", "-", " ", 
        RowBox[{"E", "^", 
         RowBox[{"(", 
          RowBox[{"I", "*", "Pi", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"2", "*", 
              RowBox[{"(", 
               RowBox[{"n", " ", "-", " ", "k", " ", "-", " ", "1"}], ")"}]}],
              " ", "+", " ", "1"}]}]}]}]}]}]}]}], "]"}], "/", 
    RowBox[{"(", 
     RowBox[{"2", "*", "n"}], ")"}]}], ")"}], ")"}]], "Input",
 CellChangeTimes->{{3.600360045377397*^9, 3.6003600616967077`*^9}, {
  3.600360207051355*^9, 3.600360214826706*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "(x - E^(I Pi*(2 k + 1)/(2 n)))*(x - E^(I Pi*(2 (n - k - 1) + 1)/(2 n)))", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", 
        "(x - E^(I*Pi*((2*k + 1)/(2*n))))*(x - E^(I*Pi*((2*(n - k - 1) + \
1)/(2*n))))"}, "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "(x - E^(I Pi ((2 k + 1)/(2 n)))) (x - E^(I Pi ((2 (n - k - 1) + \
1)/(2 n))))"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"(", 
                 RowBox[{"x", "-", 
                   SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.6]], 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], 
                    RowBox[{"2", " ", "n"}]], 
                    PolynomialForm[#, TraditionalOrder -> False]& ]}]]}], 
                 ")"}], " ", 
               RowBox[{"(", 
                 RowBox[{"x", "-", 
                   SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.6]], 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "-", "k", "-", "1"}], ")"}]}], "+", "1"}], 
                    RowBox[{"2", " ", "n"}]], 
                    PolynomialForm[#, TraditionalOrder -> False]& ]}]]}], 
                 ")"}]}], PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "i is the imaginary unit"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/I.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{"  ", "\"  \"", 
                  StyleBox[
                  "\[ImaginaryI]", FontFamily -> "Bitstream Charter", Bold, 
                   14, StripOnInput -> False], "\"is the imaginary unit\""}, 
                 "RowWithSeparators"], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Exact result", "scanner" -> "Identity", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "moutput", {}, {
        "(-E^(((I/2) (1 + 2 k) Pi)/n) + x) (-E^(((I/2) (1 + 2 (-1 - k + n)) \
Pi)/n) + x)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"(", 
                 RowBox[{"x", "-", 
                   SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]]}], ")"}], " ", 
               RowBox[{"(", 
                 RowBox[{"x", "-", 
                   SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"k"}]}], "+", "n", "-", "1"}], ")"}]}], "+", 
                    "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]]}], ")"}]}], Identity], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate forms", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FullSimplify[(-E^(((I/2) (1 + 2 k) Pi)/n) + x) (-E^(((I/2) (1 + 2 \
(-1 - k + n)) Pi)/n) + x)]"}], 
       XMLElement[
       "moutput", {}, {"-1 + x^2 - (2 I) x Sin[(Pi + 2 k Pi)/(2 n)]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"-", 
                 RowBox[{"2", " ", "\[ImaginaryI]", " ", "x", " ", 
                   RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", "k"}], "+", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]], ")"}]}]}], "+", 
               SuperscriptBox["x", "2"], "-", "1"}], Identity], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Simplify[(-E^(((I/2) (1 + 2 k) Pi)/n) + x) (-E^(((I/2) (1 + 2 (-1 - \
k + n)) Pi)/n) + x)]"}], 
       XMLElement[
       "moutput", {}, {
        "(E^(((-I/2) (1 + 2 k) Pi)/n) + x) (-E^(((I/2) (1 + 2 k) Pi)/n) + \
x)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"(", 
                 RowBox[{"x", "+", 
                   SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]}]]}], ")"}], " ", 
               RowBox[{"(", 
                 RowBox[{"x", "-", 
                   SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]]}], ")"}]}], Identity], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "moutput", {}, {
        "(-E^(((I/2 + I k) Pi)/n) + x) (-E^(I Pi + ((-I/2 - I k) Pi)/n) + \
x)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"(", 
                 RowBox[{"x", "-", 
                   SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[ImaginaryI]", " ", "k"}], "+", 
                    FractionBox["\[ImaginaryI]", "2"]}], ")"}]}], "n"]]}], 
                 ")"}], " ", 
               RowBox[{"(", 
                 RowBox[{"x", "-", 
                   SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"\[ImaginaryI]"}], " ", "k"}]}], "-", 
                    FractionBox["\[ImaginaryI]", "2"]}], ")"}]}], "n"], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}]}]]}], ")"}]}], 
             Identity], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Expanded form", "scanner" -> "Simplification", "id" -> 
     "ExpandedForm", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"exp", "(", 
                RowBox[{
                  FractionBox[
                   RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                   RowBox[{"2", " ", "n"}]], "+", 
                  FractionBox[
                   RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"k"}]}], "+", "n", "-", "1"}], ")"}]}], "+", 
                    "1"}], ")"}]}], 
                   RowBox[{"2", " ", "n"}]]}], ")"}], "-", 
              RowBox[{"x", " ", 
                SuperscriptBox["\[ExponentialE]", 
                 FractionBox[
                  RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                  RowBox[{"2", " ", "n"}]]]}], "-", 
              RowBox[{"x", " ", 
                SuperscriptBox["\[ExponentialE]", 
                 FractionBox[
                  RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"k"}]}], "+", "n", "-", "1"}], ")"}]}], "+", 
                    "1"}], ")"}]}], 
                  RowBox[{"2", " ", "n"}]]]}], "+", 
              SuperscriptBox["x", "2"]}], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "ExpandedForm__Step-by-step solution"}, {}]}]}], Typeset`pod5$$ = 
   XMLElement[
   "pod", {"title" -> "Alternate form assuming k, n, and x are positive", 
     "scanner" -> "Simplification", "id" -> 
     "AlternateFormAssumingAllVariablesAreRealAndPositive", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Simplify[PowerExpand[(-E^(((I/2) (1 + 2 k) Pi)/n) + x) (-E^(((I/2) \
(1 + 2 (-1 - k + n)) Pi)/n) + x)]]"}], 
       XMLElement[
       "moutput", {}, {
        "(E^(((I/2) (1 + 2 k) Pi)/n) - x) (E^(((I/2) (-1 - 2 k + 2 n) Pi)/n) \
- x)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"(", 
                 RowBox[{
                   RowBox[{"-", "x"}], "+", 
                   SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]]}], ")"}], " ", 
               RowBox[{"(", 
                 RowBox[{
                   RowBox[{"-", "x"}], "+", 
                   SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"2"}], " ", "k"}]}], "+", 
                    RowBox[{"2", " ", "n"}], "-", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]]}], ")"}]}], Identity], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Alternate form assuming k, n, and x are real", 
     "scanner" -> "Simplification", "id" -> 
     "AlternateFormAssumingAllVariablesAreReal", "position" -> "600", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ComplexExpand[(-E^(((I/2) (1 + 2 k) Pi)/n) + x) (-E^(((I/2) (1 + 2 \
(-1 - k + n)) Pi)/n) + x)]"}], 
       XMLElement[
       "moutput", {}, {
        "x^2 - x Cos[(1 - 1/(2 n) - k/n) Pi] - x Cos[((1/2 + k) Pi)/n] + \
Cos[(1 - 1/(2 n) - k/n) Pi] Cos[((1/2 + k) Pi)/n] - Sin[(1 - 1/(2 n) - k/n) \
Pi] Sin[((1/2 + k) Pi)/n] + I (-(x Sin[(1 - 1/(2 n) - k/n) Pi]) + Cos[((1/2 + \
k) Pi)/n] Sin[(1 - 1/(2 n) - k/n) Pi] - x Sin[((1/2 + k) Pi)/n] + Cos[(1 - \
1/(2 n) - k/n) Pi] Sin[((1/2 + k) Pi)/n])"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"-", 
                RowBox[{"x", " ", 
                  RowBox[{"cos", "(", 
                    RowBox[{"\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    FractionBox["k", "n"]}]}], "-", 
                    FractionBox["1", 
                    RowBox[{"2", " ", "n"}]], "+", "1"}], ")"}]}], ")"}]}]}], 
              "-", 
              RowBox[{"x", " ", 
                RowBox[{"cos", "(", 
                  FractionBox[
                   RowBox[{"\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{"k", "+", 
                    FractionBox["1", "2"]}], ")"}]}], "n"], ")"}]}], "+", 
              RowBox[{"\[ImaginaryI]", " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"x"}], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    FractionBox["k", "n"]}]}], "-", 
                    FractionBox["1", 
                    RowBox[{"2", " ", "n"}]], "+", "1"}], ")"}]}], ")"}]}]}], 
                    "-", 
                    RowBox[{"x", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{"k", "+", 
                    FractionBox["1", "2"]}], ")"}]}], "n"], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"sin", "(", 
                    RowBox[{"\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    FractionBox["k", "n"]}]}], "-", 
                    FractionBox["1", 
                    RowBox[{"2", " ", "n"}]], "+", "1"}], ")"}]}], ")"}], " ", 
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{"k", "+", 
                    FractionBox["1", "2"]}], ")"}]}], "n"], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{"k", "+", 
                    FractionBox["1", "2"]}], ")"}]}], "n"], ")"}], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    FractionBox["k", "n"]}]}], "-", 
                    FractionBox["1", 
                    RowBox[{"2", " ", "n"}]], "+", "1"}], ")"}]}], ")"}]}]}], 
                  ")"}]}], "-", 
              RowBox[{
                RowBox[{"sin", "(", 
                  RowBox[{"\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    FractionBox["k", "n"]}]}], "-", 
                    FractionBox["1", 
                    RowBox[{"2", " ", "n"}]], "+", "1"}], ")"}]}], ")"}], " ", 
                RowBox[{"sin", "(", 
                  FractionBox[
                   RowBox[{"\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{"k", "+", 
                    FractionBox["1", "2"]}], ")"}]}], "n"], ")"}]}], "+", 
              RowBox[{
                RowBox[{"cos", "(", 
                  RowBox[{"\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    FractionBox["k", "n"]}]}], "-", 
                    FractionBox["1", 
                    RowBox[{"2", " ", "n"}]], "+", "1"}], ")"}]}], ")"}], " ", 
                RowBox[{"cos", "(", 
                  FractionBox[
                   RowBox[{"\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{"k", "+", 
                    FractionBox["1", "2"]}], ")"}]}], "n"], ")"}]}], "+", 
              SuperscriptBox["x", "2"]}], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Property as a function", "scanner" -> 
     "FunctionProperties", "id" -> "PropertyAsAFunction", "position" -> "700",
      "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> "Parity"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["\"even\"", TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Roots for the variable x", "scanner" -> "Reduce", "id" -> 
     "SolutionForTheVariableV", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement[
       "minput", {}, {
        "Solve[(E^(((-I/2) (1 + 2 k) Pi)/n) + x) (-E^(((I/2) (1 + 2 k) Pi)/n) \
+ x) == 0, x]"}], 
       XMLElement[
       "moutput", {}, {
        "{x == -E^(((-I/2) (1 + 2 k) Pi)/n), x == E^(((I/2) (1 + 2 k) \
Pi)/n)}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{"x", "\[LongEqual]", 
                    TagBox[
                    RowBox[{"-", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]}]]}], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 500]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement[
       "minput", {}, {
        "Solve[(E^(((-I/2) (1 + 2 k) Pi)/n) + x) (-E^(((I/2) (1 + 2 k) Pi)/n) \
+ x) == 0, x]"}], 
       XMLElement[
       "moutput", {}, {
        "{x == -E^(((-I/2) (1 + 2 k) Pi)/n), x == E^(((I/2) (1 + 2 k) \
Pi)/n)}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{"x", "\[LongEqual]", 
                    TagBox[
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]], Identity]}], BaselinePosition -> 
                   Baseline, ImageSize -> 500]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod9$$ = XMLElement[
   "pod", {
    "title" -> "Derivative", "scanner" -> "Derivative", "id" -> "Derivative", 
     "position" -> "900", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "D[(-E^(((I/2) (1 + 2 k) Pi)/n) + x) (-E^(((I/2) (1 + 2 (-1 - k + n)) \
Pi)/n) + x), x]"}], 
       XMLElement[
       "moutput", {}, {
        "E^(((-I/2) (1 + 2 k) Pi)/n) - E^(((I/2) (1 + 2 k) Pi)/n) + 2 x"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              FormBox[
               TagBox[
                FormBox[
                 RowBox[{
                   FormBox[
                    TagBox[
                    FractionBox[
                    RowBox[{"\[PartialD]", "\"\""}], 
                    RowBox[{"\[PartialD]", "x"}], MultilineFunction -> None], 
                    HoldForm], TraditionalForm], "\[InvisibleApplication]", 
                   RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]]}], "+", "x"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "-", "k", "+", "n"}], ")"}]}]}], 
                    ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]]}], "+", "x"}], ")"}]}], 
                    HoldForm], ")"}]}], TraditionalForm], 
                Format[#, TraditionalForm]& ], TraditionalForm], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{
                 SuperscriptBox["\[ExponentialE]", 
                  RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]}]], "-", 
                 SuperscriptBox["\[ExponentialE]", 
                  FractionBox[
                   RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                   RowBox[{"2", " ", "n"}]]], "+", 
                 RowBox[{"2", " ", "x"}]}], Identity]}], TraditionalForm]], 
          "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Derivative__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution"}, {}]}]}], Typeset`pod10$$ = 
   XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "1000", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Integrate[(x - E^(I Pi ((2 k + 1)/(2 n)))) (x - E^(I Pi ((2 (n - k - \
1) + 1)/(2 n)))), x]"}], 
       XMLElement[
       "moutput", {}, {
        "(x (-6 + 3 E^(((I/2) (1 + 2 k) Pi)/n) (-1 + E^(((-I) (1 + 2 k) \
Pi)/n)) x + 2 x^2))/6"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   TagBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]]}], "+", "x"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "-", "k", "+", "n"}], ")"}]}]}], 
                    ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]]}], "+", "x"}], ")"}]}], 
                    HoldForm], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    FractionBox["1", "6"], " ", "x", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"3", " ", "x", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"1"}]}], "+", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], "n"]}]]}], 
                    ")"}]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["x", "2"]}], "-", "6"}], ")"}]}], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, 
                   GrayLevel[0], StripOnInput -> False], "+", 
                  StyleBox[
                  "constant", FontFamily -> "Helvetica", Magnification -> 
                   0.9 Inherited]}], 
                LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
                
                GrayLevel[0.6], StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "IndefiniteIntegral__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution"}, {}]}]}], 
   Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Alternative representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "AlternativeRepresentations:MathematicalFunctionIdentityData", 
     "position" -> "1100", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "(x - E^(I Pi ((2 k + 1)/(2 n)))) (x - E^(I Pi ((2 (n - k - 1) + \
1)/(2 n)))) == (x - w^a) (x - w^a) /; a == ((I/2) (1 + 2 k) Pi)/(n Log[w]) && \
a == ((I/2) (-1 - 2 k + 2 n) Pi)/(n Log[w])"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]]}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "-", "k", "-", "1"}], ")"}]}], "+", "1"}], 
                    ")"}]}], 
                    RowBox[{"2", " ", "n"}]]]}], ")"}]}], "\[LongEqual]", 
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    SuperscriptBox["w", "a"]}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    SuperscriptBox["w", "a"]}], ")"}]}]}], HoldForm], 
               StyleBox[
                FormBox[
                 TagBox[
                  FormBox[
                   TemplateBox[{"\"  for \"", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{"(", 
                    TemplateBox[{
                    RowBox[{"a", "\[LongEqual]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n", " ", 
                    RowBox[{"log", "(", "w", ")"}]}]]}], 
                    StyleBox[
                    "\" and \"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, {
                    FontFamily :> $CellContext`$UnitFontFamily, FontSize -> 
                    Smaller}, 
                    GrayLevel[0.6], StripOnInput -> False], 
                    RowBox[{"a", "\[LongEqual]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "-", 
                    RowBox[{"2", " ", "k"}], "+", 
                    RowBox[{"2", " ", "n"}]}], ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n", " ", 
                    RowBox[{"log", "(", "w", ")"}]}]]}]}, "RowDefault"], 
                    ")"}]}, "RowDefault"], HoldForm]}, "RowDefault"], 
                   TraditionalForm], Format[#, TraditionalForm]& ], 
                 TraditionalForm], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "(x - E^(I Pi ((2 k + 1)/(2 n)))) (x - E^(I Pi ((2 (n - k - 1) + \
1)/(2 n)))) == (x - z^(I Pi ((2 k + 1)/(2 n)))) (x - z^(I Pi ((2 (n - k - 1) \
+ 1)/(2 n)))) /; z == E"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]]}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "-", "k", "-", "1"}], ")"}]}], "+", "1"}], 
                    ")"}]}], 
                    RowBox[{"2", " ", "n"}]]]}], ")"}]}], "\[LongEqual]", 
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    SuperscriptBox["z", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]]}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    SuperscriptBox["z", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "-", "k", "-", "1"}], ")"}]}], "+", "1"}], 
                    ")"}]}], 
                    RowBox[{"2", " ", "n"}]]]}], ")"}]}]}], HoldForm], 
               StyleBox[
                FormBox[
                 TagBox[
                  FormBox[
                   TemplateBox[{"\"  for \"", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{"z", "\[LongEqual]", "\[ExponentialE]"}]}, 
                    "RowDefault"], HoldForm]}, "RowDefault"], 
                   TraditionalForm], Format[#, TraditionalForm]& ], 
                 TraditionalForm], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "(x - E^(I Pi ((2 k + 1)/(2 n)))) (x - E^(I Pi ((2 (n - k - 1) + \
1)/(2 n)))) == (-1 + x - 2/(-1 + Coth[(I (1 + 2 k) Pi)/(2 (2 n))])) (-1 + x - \
2/(-1 + Coth[(I (1 + 2 (-1 - k + n)) Pi)/(2 (2 n))]))"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x", "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]]}], ")"}], " ", 
                  RowBox[{"(", 
                    RowBox[{"x", "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "-", "k", "-", "1"}], ")"}]}], "+", "1"}], 
                    ")"}]}], 
                    RowBox[{"2", " ", "n"}]]]}], ")"}]}], "\[LongEqual]", 
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "x", "-", 
                    FractionBox["2", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"coth", "(", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"2", " ", "n"}], ")"}]}]], ")"}]}]]}], ")"}], " ", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "x", "-", 
                    FractionBox["2", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"coth", "(", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "-", "k", "+", "n"}], ")"}]}]}], 
                    ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"2", " ", "n"}], ")"}]}]], ")"}]}]]}], ")"}]}]}], 
              HoldForm], FrameStyle -> None, 
             FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "AlternativeRepresentations:MathematicalFunctionIdentityData__More"},\
 {}]}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{"  ", "\"  \"", 
                  StyleBox[
                   RowBox[{"log", "(", "x", ")"}], FontFamily -> 
                   "Bitstream Charter", Bold, 14, StripOnInput -> False], 
                  "\"is the natural logarithm\""}, "RowWithSeparators"], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}], 
       XMLElement[
       "info", {"text" -> "coth(x) is the hyperbolic cotangent function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/Coth.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Coth", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/HyperbolicCotangent.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{"  ", "\"  \"", 
                  StyleBox[
                   RowBox[{"coth", "(", "x", ")"}], FontFamily -> 
                   "Bitstream Charter", Bold, 14, StripOnInput -> False], 
                  "\"is the hyperbolic cotangent function\""}, 
                 "RowWithSeparators"], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Exp/27/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod12$$, 
   Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
   Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
   Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
   Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
   Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
   Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
   Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, Typeset`pod40$$, 
   Typeset`pod41$$, Typeset`aux1$$ = {True, False, {False}, True}, 
   Typeset`aux2$$ = {True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False, False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False, False, False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`aux39$$ = {
   True, False, {False}, True}, Typeset`aux40$$ = {
   True, False, {False}, True}, Typeset`aux41$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "11", "datatypes" -> 
     "Math,MathematicalFunctionIdentity", "timedout" -> 
     "InterestingMultiDimensionalDefiniteIntegrals,MathematicalFunctionData", 
     "timedoutpods" -> "", "timing" -> "5.748", "parsetiming" -> "1.807", 
     "parsetimedout" -> "false", "recalculate" -> 
     "http://www5a.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa21101dhea81dh64aegga000049e4bgdb308fcig5&s=5", "id" -> 
     "MSPa21111dhea81dh64aegga0000433eech3d9c9f75e", "host" -> 
     "http://www5a.wolframalpha.com", "server" -> "5", "related" -> 
     "http://www5a.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa21121dhea81dh64aegga00001eegebg4f7h604cb&s=5", "version" -> "2.6"}, {
    "success" -> "true", "error" -> "false", "numpods" -> "0", "datatypes" -> 
     "Math,MathematicalFunctionIdentity", "timedout" -> 
     "InterestingMultiDimensionalDefiniteIntegrals,MathematicalFunctionData", 
     "timedoutpods" -> "", "timing" -> "5.161", "parsetiming" -> "0.", 
     "parsetimedout" -> "false", "recalculate" -> "", "id" -> "", "host" -> 
     "http://www5a.wolframalpha.com", "server" -> "5", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -8., 
    "Date" -> {2014, 2, 2, 12, 2, 39.833791`8.352826618902128}, "Line" -> 18, 
    "SessionID" -> 23770121034160310062}, Typeset`showpods$$ = {1, 2, 3, 4, 5,
    6, 7, 8, 9, 10, 11}, Typeset`failedpods$$ = {12, 13, 14, 15, 16, 17, 18, 
   19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
    38, 39, 40, 41}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", 
    "(x - E^(I*Pi*((2*k + 1)/(2*n))))*(x - E^(I*Pi*((2*(n - k - 1) + \
1)/(2*n))))"}, Typeset`open$$ = True, Typeset`newq$$ = 
   "(x - E^(I Pi*(2 k + 1)/(2 n)))*(x - E^(I Pi*(2 (n - k - 1) + 1)/(2 n)))"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, Typeset`pod40$$, 
         Typeset`pod41$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$, 
         Typeset`aux41$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{679., {33324., 20.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, Typeset`pod40$$, 
          Typeset`pod41$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$, 
          Typeset`aux41$$}, Typeset`chosen$$, Typeset`open$$, 
         Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "http://www5a.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa21101dhea81dh64aegga000049e4bgdb308fcig5&s=5", Typeset`asyncpods$$}]]; 
     Typeset`asyncpods$$ = {}; Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", 
     SuperscriptBox["\[ExponentialE]", 
      FractionBox[
       RowBox[{"\[ImaginaryI]", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"2", " ", "k"}]}], ")"}], " ", "\[Pi]"}], 
       RowBox[{"2", " ", "n"}]]]}], "+", "x"}], ")"}], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", 
     SuperscriptBox["\[ExponentialE]", 
      FractionBox[
       RowBox[{"\[ImaginaryI]", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"2", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1"}], "-", "k", "+", "n"}], ")"}]}]}], ")"}], " ", 
        "\[Pi]"}], 
       RowBox[{"2", " ", "n"}]]]}], "+", "x"}], ")"}]}]], "Output",
 CellChangeTimes->{{3.600360131450564*^9, 3.600360146299481*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", " ", "-", " ", 
     RowBox[{"E", "^", 
      RowBox[{"(", 
       RowBox[{"I", " ", "Pi", "*", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", " ", "k"}], " ", "+", " ", "1"}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"2", " ", "n"}], ")"}]}]}], ")"}]}]}], ")"}], "*", 
   RowBox[{"(", 
    RowBox[{"x", " ", "-", " ", 
     RowBox[{"E", "^", 
      RowBox[{"(", 
       RowBox[{"I", " ", "Pi", "*", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", " ", 
            RowBox[{"(", 
             RowBox[{"n", " ", "-", " ", "k", " ", "-", " ", "1"}], ")"}]}], 
           " ", "+", " ", "1"}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"2", " ", "n"}], ")"}]}]}], ")"}]}]}], ")"}]}], "//", 
  "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.600360240882773*^9, 3.600360244496811*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "1"}], "+", 
  SuperscriptBox["x", "2"], "-", 
  RowBox[{"2", " ", "\[ImaginaryI]", " ", "x", " ", 
   RowBox[{"Sin", "[", 
    FractionBox[
     RowBox[{"\[Pi]", "+", 
      RowBox[{"2", " ", "k", " ", "\[Pi]"}]}], 
     RowBox[{"2", " ", "n"}]], "]"}]}]}]], "Output",
 CellChangeTimes->{3.600360245454486*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"E", "^", 
  RowBox[{"(", 
   RowBox[{"I", " ", "Pi"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.600360281483674*^9, 3.600360294410894*^9}}],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellChangeTimes->{{3.6003602869903193`*^9, 3.600360295050747*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"E", "^", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "k"}], " ", "I", " ", 
     RowBox[{"Pi", "/", "n"}]}], ")"}]}], "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.600360732082527*^9, 3.6003607433945837`*^9}, {
  3.600361112084805*^9, 3.6003611237345753`*^9}}],

Cell[BoxData[
 SuperscriptBox["\[ExponentialE]", 
  RowBox[{"-", 
   FractionBox[
    RowBox[{"\[ImaginaryI]", " ", "k", " ", "\[Pi]"}], "n"]}]]], "Output",
 CellChangeTimes->{
  3.600360744350567*^9, {3.600361119127536*^9, 3.600361124093761*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "1"}], "\[Infinity]"], 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", 
    FractionBox[
     RowBox[{"\[ImaginaryI]", " ", "k", " ", "\[Pi]"}], "n"]}]]}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Sum", "::", "div"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Sum does not converge. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/Sum/div\\\", ButtonNote -> \
\\\"Sum::div\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.600361153171028*^9}],

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "1"}], "\[Infinity]"], 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", 
    FractionBox[
     RowBox[{"\[ImaginaryI]", " ", "k", " ", "\[Pi]"}], "n"]}]]}]], "Output",
 CellChangeTimes->{3.600361153174714*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"k", "=", "1"}], "\[Infinity]"], 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", 
    FractionBox[
     RowBox[{"\[ImaginaryI]", " ", "k", " ", "\[Pi]"}], "n"]}]]}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 FractionBox["1", 
  RowBox[{
   RowBox[{"-", "1"}], "+", 
   SuperscriptBox["\[ExponentialE]", 
    FractionBox[
     RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], "n"]]}]]], "Output",
 CellChangeTimes->{3.6003611371687403`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"E", "^", "5"}], "-", 
  RowBox[{"E", "^", 
   RowBox[{"-", "5"}]}]}]], "Input",
 CellChangeTimes->{{3.6003612038142757`*^9, 3.600361209084222*^9}, {
  3.600361497885058*^9, 3.600361500112513*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox["1", 
    SuperscriptBox["\[ExponentialE]", "5"]]}], "+", 
  SuperscriptBox["\[ExponentialE]", "5"]}]], "Output",
 CellChangeTimes->{3.6003612103924723`*^9, 3.600361500760724*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"E", "^", 
   RowBox[{"(", 
    RowBox[{"I", " ", 
     RowBox[{"Pi", " ", "/", " ", 
      RowBox[{"(", 
       RowBox[{"2", "n"}], ")"}]}]}], ")"}]}], "\\\\", 
  "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.600361504683517*^9, 3.600361539249651*^9}},
 EmphasizeSyntaxErrors->True],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Syntax", "::", "tsntxi"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"\\\"\[NoBreak]\\!\\(\\(\\(E^\\(\\((I \\(\\(Pi/\\(\\((2 \
n)\\)\\)\\)\\))\\)\\)\\)\\) \\\\\\\\ FullSimplify\\)\[NoBreak]\\\" is \
incomplete; more input is \
needed.\[NoBreak]\\!\\(\\\"\\\"\\)\[NoBreak]\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.60036154713437*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Syntax", "::", "sntxi"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Incomplete expression; more input is needed \
\[NoBreak]\\!\\(\\\"\\\"\\)\[NoBreak].\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.600361547163104*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "e^(-i pi / (2n))", Typeset`newq$$ = 
   "e^(-i pi / (2n))", Typeset`chosen$$ = "E^(-(I*(Pi/(2*n))))", 
   Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = True}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ButtonBox[
            TagBox[
             TooltipBox[
              StyleBox["\<\"\[RightGuillemet]\"\>",
               StripOnInput->False,
               LineColor->RGBColor[1, 0.5, 0],
               FrontFaceColor->RGBColor[1, 0.5, 0],
               BackFaceColor->RGBColor[1, 0.5, 0],
               GraphicsColor->RGBColor[1, 0.5, 0],
               FontColor->RGBColor[1, 0.5, 0]],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource[
                "WAStrings", "InterpretationAssumptions"], StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource[
               "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
            Appearance->None,
            BaselinePosition->Baseline,
            ButtonFunction:>(Quiet[
               WolframAlpha[]]; Typeset`open$$ = True; 
             WolframAlphaClient`Private`extrudeFromFastParse[
              "e^(-i pi / (2n))", 
               Defer[E^(-(I (Pi/(2 Global`n))))], "Fast parse"]; 
             Typeset`open$$ = False),
            ContentPadding->False,
            Evaluator->Automatic,
            Method->"Queued"], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "e^(-i pi / (2n))", 
                  Defer[E^(-(I (Pi/(2 Global`n))))], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"E", "^", 
                  RowBox[{"(", 
                   RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"(", 
                    RowBox[{"Pi", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], ")"}]}], ")"}]}], 
                   ")"}]}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"E", "^", 
                  RowBox[{"(", 
                   RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"(", 
                    RowBox[{"Pi", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], ")"}]}], ")"}]}], 
                   ")"}]}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"(", 
                    RowBox[{"Pi", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], ")"}]}], ")"}]}], 
                    ")"}]}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
           "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = True}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ButtonBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\"\[RightGuillemet]\"\>",
                   StripOnInput->False,
                   LineColor->RGBColor[1, 0.5, 0],
                   FrontFaceColor->RGBColor[1, 0.5, 0],
                   BackFaceColor->RGBColor[1, 0.5, 0],
                   GraphicsColor->RGBColor[1, 0.5, 0],
                   FontColor->RGBColor[1, 0.5, 0]],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "InterpretationAssumptions"], StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource[
                   "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
                Appearance->None,
                BaselinePosition->Baseline,
                ButtonFunction:>(Quiet[
                   WolframAlpha[]]; Typeset`open$$ = True; 
                 WolframAlphaClient`Private`extrudeFromFastParse[
                  "e^(-i pi / (2n))", 
                   Defer[E^(-(I (Pi/(2 Global`n))))], "Fast parse"]; 
                 Typeset`open$$ = False),
                ContentPadding->False,
                Evaluator->Automatic,
                Method->"Queued"], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "e^(-i pi / (2n))", 
                    Defer[E^(-(I (Pi/(2 Global`n))))], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"(", 
                    RowBox[{"Pi", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], ")"}]}], ")"}]}], 
                    ")"}]}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"(", 
                    RowBox[{"Pi", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], ")"}]}], ")"}]}], 
                    ")"}]}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"(", 
                    RowBox[{"Pi", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], ")"}]}], ")"}]}], 
                    ")"}]}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
               "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
            PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 SuperscriptBox["\[ExponentialE]", 
  RowBox[{"-", 
   FractionBox[
    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], 
    RowBox[{"2", " ", "n"}]]}]]], "Output",
 CellChangeTimes->{3.6003615684144373`*^9, 3.600362377812729*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"E", "^", 
  RowBox[{"(", 
   RowBox[{"I", " ", "Pi"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.60036292806643*^9, 3.600362932875387*^9}}],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellChangeTimes->{3.600362933559713*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sin", "[", "I", "]"}]], "Input",
 CellChangeTimes->{{3.600363810768437*^9, 3.6003638139360657`*^9}}],

Cell[BoxData[
 RowBox[{"\[ImaginaryI]", " ", 
  RowBox[{"Sinh", "[", "1", "]"}]}]], "Output",
 CellChangeTimes->{3.6003638144889727`*^9}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.600361958453946*^9, 3.6003619604157*^9}, 
   3.6003622295197983`*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.600362066847125*^9, 3.60036206967107*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "expand (x - E^(I Pi*(2 k + 1)/(2 n)))*(x - E^(I Pi*(2 (n - k + 1) + 1)/(2 \
n)))", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Result", "Results", 1, 1, "Input", 
        "ExpandAll[(-E^(((I/2) (1 + 2 k) Pi)/n) + x) (-E^(((I/2) (1 + 2 (1 - \
k + n)) Pi)/n) + x)]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Expand[(-E^(((I/2) (1 + 2 k) Pi)/n) + x) (-E^(((I/2) (1 + 2 (1 - k + \
n)) Pi)/n) + x)]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"expand\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.6]], 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], 
                    RowBox[{"2", " ", "n"}]], 
                    PolynomialForm[#, TraditionalOrder -> False]& ]}]]}], 
                    ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.6]], 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "-", "k", "+", "1"}], ")"}]}], "+", "1"}], 
                    RowBox[{"2", " ", "n"}]], 
                    PolynomialForm[#, TraditionalOrder -> False]& ]}]]}], 
                    ")"}]}], ScriptLevel -> 0, StripOnInput -> False]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "i is the imaginary unit"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/I.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{"  ", "\"  \"", 
                  StyleBox[
                  "\[ImaginaryI]", FontFamily -> "Bitstream Charter", Bold, 
                   14, StripOnInput -> False], "\"is the imaginary unit\""}, 
                 "RowWithSeparators"], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Expand", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ExpandAll[(-E^(((I/2) (1 + 2 k) Pi)/n) + x) (-E^(((I/2) (1 + 2 (1 - \
k + n)) Pi)/n) + x)]"}], 
       XMLElement[
       "moutput", {}, {
        "E^(I Pi + ((2 I) Pi)/n) - E^(I Pi + (((3 I)/2) Pi)/n - (I k Pi)/n) x \
- E^(((I/2) Pi)/n + (I k Pi)/n) x + x^2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"-", 
                 RowBox[{"x", " ", 
                   SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", "k"}], 
                    "n"]}]}], "+", 
                    FractionBox[
                    RowBox[{"3", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}]}]]}]}], "-", 
               RowBox[{"x", " ", 
                 SuperscriptBox["\[ExponentialE]", 
                  RowBox[{
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", "k"}], "n"], 
                    "+", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]}]]}], "+", 
               SuperscriptBox["\[ExponentialE]", 
                RowBox[{
                  FractionBox[
                   RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]"}], "n"], 
                  "+", 
                  RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}]}]], "+", 
               SuperscriptBox["x", "2"]}], Identity], TraditionalForm]], 
          "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution"}, {}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Series expansion at x=0", "scanner" -> "Expand", "id" -> 
     "SeriesExpansionAtX = 0", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(E^(((-I/2) (-3 + 2 k) Pi)/n) + x) (-E^(((I/2) (1 + 2 k) \
Pi)/n) + x), {x, 0, 5}]"}], 
       XMLElement[
       "moutput", {}, {
        "SeriesData[x, 0, {-E^(((2 I) Pi)/n), E^(((-I/2) (-3 + 2 k) Pi)/n) - \
E^(((I/2) (1 + 2 k) Pi)/n), 1}, 0, 6, 1]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
                    "n"]]}], "+", 
                    RowBox[{"x", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "-", "3"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]}]], "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]]}], ")"}]}], "+", 
                    SuperscriptBox["x", "2"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "6"], ")"}], 
                    SeriesData[Global`x, 0, {}, 0, 6, 1], Editable -> 
                    False]}], 
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
                    "n"]]}], ",", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "3"}], "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]}]], "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]]}], ",", "1"}], "}"}], ",", "0", 
                    ",", "6", ",", "1"}], "]"}]}, "SeriesData", 
                    DisplayFunction -> (#& ), 
                    InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 StyleBox[
                  
                  RowBox[{
                   "\"(\"", "\[NoBreak]", "\"converges everywhere\"", 
                    "\[NoBreak]", "\")\""}], {
                  FontFamily -> "Verdana", FontSize -> 10, 
                   GrayLevel[0.5], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False], 
                 Global`TagBoxWrapper["Label"]]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionAtX = 0__More terms"}, {}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Series expansion at x=\[Infinity]", "scanner" -> 
     "Expand", "id" -> "SeriesExpansionAtX =Infinity", "position" -> "400", 
     "error" -> "false", "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(E^(((-I/2) (-3 + 2 k) Pi)/n) + x) (-E^(((I/2) (1 + 2 k) \
Pi)/n) + x), {x, Infinity, 5}]"}], 
       XMLElement[
       "moutput", {}, {
        "SeriesData[x, Infinity, {1, E^(((-I/2) (-3 + 2 k) Pi)/n) - E^(((I/2) \
(1 + 2 k) Pi)/n), -E^(((2 I) Pi)/n)}, -2, 6, 1]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    TemplateBox[{
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", 
                    RowBox[{"x", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "-", "3"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]}]], "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]]}], ")"}]}], "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]"}], "n"]], 
                    "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "x"], ")"}], "6"], ")"}], 
                    SeriesData[Global`x, 
                    DirectedInfinity[1], {}, -2, 6, 1], Editable -> False]}], 
                    
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "\[Infinity]", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "3"}], "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]}]], "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]]}], ",", 
                    RowBox[{"-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
                    "n"]]}]}], "}"}], ",", 
                    RowBox[{"-", "2"}], ",", "6", ",", "1"}], "]"}]}, 
                    "SeriesData", DisplayFunction -> (#& ), 
                    InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 StyleBox[
                  
                  RowBox[{
                   "\"(\"", "\[NoBreak]", 
                    "\"converges everywhere away from origin\"", "\[NoBreak]",
                     "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                   GrayLevel[0.5], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False], 
                 Global`TagBoxWrapper["Label"]]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionAtX =Infinity__More terms"}, {}]}]}], Typeset`pod5$$,
    Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, Typeset`pod9$$, 
   Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, 
   Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, 
   Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, 
   Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, 
   Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, 
   Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, 
   Typeset`pod34$$, Typeset`aux1$$ = {True, False, {False}, True}, 
   Typeset`aux2$$ = {True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`aux8$$ = {True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
     "Expand", "timedout" -> "InterestingMultiDimensionalDefiniteIntegrals", 
     "timedoutpods" -> "", "timing" -> "4.689", "parsetiming" -> "2.126", 
     "parsetimedout" -> "false", "recalculate" -> 
     "http://www5a.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa37121d2gha7cgfg4d63f000062455ha6799c59c7&s=31", "id" -> 
     "MSPa37131d2gha7cgfg4d63f000029h3e02321hgc85g", "host" -> 
     "http://www5a.wolframalpha.com", "server" -> "31", "related" -> 
     "http://www5a.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa37141d2gha7cgfg4d63f00003249d33eich1hecg&s=31", "version" -> "2.6"}, {
    "success" -> "true", "error" -> "false", "numpods" -> "0", "datatypes" -> 
     "Expand", "timedout" -> "InterestingMultiDimensionalDefiniteIntegrals", 
     "timedoutpods" -> "", "timing" -> "3.001", "parsetiming" -> "0.", 
     "parsetimedout" -> "false", "recalculate" -> "", "id" -> "", "host" -> 
     "http://www5a.wolframalpha.com", "server" -> "31", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -8., 
    "Date" -> {2014, 2, 2, 15, 53, 57.676884`8.513576763151034}, "Line" -> 19,
     "SessionID" -> 23770178463743537604}, Typeset`showpods$$ = {1, 2, 3, 4}, 
   Typeset`failedpods$$ = {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
   19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34}, 
   Typeset`chosen$$ = {
   "Result", "Results", 1, 1, "Input", 
    "ExpandAll[(-E^(((I/2) (1 + 2 k) Pi)/n) + x) (-E^(((I/2) (1 + 2 (1 - k + \
n)) Pi)/n) + x)]"}, Typeset`open$$ = False, Typeset`newq$$ = 
   "expand (x - E^(I Pi*(2 k + 1)/(2 n)))*(x - E^(I Pi*(2 (n - k + 1) + 1)/(2 \
n)))"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{803., {90., 20.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$}, Typeset`chosen$$, Typeset`open$$,
          Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "http://www5a.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa37121d2gha7cgfg4d63f000062455ha6799c59c7&s=31", Typeset`asyncpods$$}]]; 
     Typeset`asyncpods$$ = {}; Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{
    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], "+", 
    FractionBox[
     RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]"}], "n"]}]], "-", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], "+", 
     FractionBox[
      RowBox[{"3", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
      RowBox[{"2", " ", "n"}]], "-", 
     FractionBox[
      RowBox[{"\[ImaginaryI]", " ", "k", " ", "\[Pi]"}], "n"]}]], " ", "x"}], 
  "-", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     FractionBox[
      RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], 
      RowBox[{"2", " ", "n"}]], "+", 
     FractionBox[
      RowBox[{"\[ImaginaryI]", " ", "k", " ", "\[Pi]"}], "n"]}]], " ", "x"}], 
  "+", 
  SuperscriptBox["x", "2"]}]], "Output",
 CellChangeTimes->{{3.600363888283873*^9, 3.600363917739286*^9}, {
  3.600374011746278*^9, 3.600374037739656*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "Sin((2*k*i*pi + i*pi)/(2n))", 
   Typeset`newq$$ = "Sin((2*k*i*pi + i*pi)/(2n))", Typeset`chosen$$ = 
   "Sin[(2*k*I*Pi + I*Pi)/(2*n)]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = True}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ButtonBox[
            TagBox[
             TooltipBox[
              StyleBox["\<\"\[RightGuillemet]\"\>",
               StripOnInput->False,
               LineColor->RGBColor[1, 0.5, 0],
               FrontFaceColor->RGBColor[1, 0.5, 0],
               BackFaceColor->RGBColor[1, 0.5, 0],
               GraphicsColor->RGBColor[1, 0.5, 0],
               FontColor->RGBColor[1, 0.5, 0]],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource[
                "WAStrings", "InterpretationAssumptions"], StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource[
               "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
            Appearance->None,
            BaselinePosition->Baseline,
            ButtonFunction:>(Quiet[
               WolframAlpha[]]; Typeset`open$$ = True; 
             WolframAlphaClient`Private`extrudeFromFastParse[
              "Sin((2*k*i*pi + i*pi)/(2n))", 
               Defer[
                Sin[(2 Global`k I Pi + I Pi)/(2 Global`n)]], "Fast parse"]; 
             Typeset`open$$ = False),
            ContentPadding->False,
            Evaluator->Automatic,
            Method->"Queued"], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "Sin((2*k*i*pi + i*pi)/(2n))", 
                  Defer[
                   Sin[(2 Global`k I Pi + I Pi)/(2 Global`n)]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Sin", "[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", "*", "k", "*", "I", "*", "Pi"}], " ", "+", 
                    " ", 
                    RowBox[{"I", "*", "Pi"}]}], ")"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Sin", "[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", "*", "k", "*", "I", "*", "Pi"}], " ", "+", 
                    " ", 
                    RowBox[{"I", "*", "Pi"}]}], ")"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Sin", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", "*", "k", "*", "I", "*", "Pi"}], " ", "+", 
                    " ", 
                    RowBox[{"I", "*", "Pi"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], "]"}]], "Input"], All]; 
                SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
           "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = True}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ButtonBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\"\[RightGuillemet]\"\>",
                   StripOnInput->False,
                   LineColor->RGBColor[1, 0.5, 0],
                   FrontFaceColor->RGBColor[1, 0.5, 0],
                   BackFaceColor->RGBColor[1, 0.5, 0],
                   GraphicsColor->RGBColor[1, 0.5, 0],
                   FontColor->RGBColor[1, 0.5, 0]],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "InterpretationAssumptions"], StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource[
                   "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
                Appearance->None,
                BaselinePosition->Baseline,
                ButtonFunction:>(Quiet[
                   WolframAlpha[]]; Typeset`open$$ = True; 
                 WolframAlphaClient`Private`extrudeFromFastParse[
                  "Sin((2*k*i*pi + i*pi)/(2n))", 
                   Defer[
                    Sin[(2 Global`k I Pi + I Pi)/(2 Global`n)]], 
                   "Fast parse"]; Typeset`open$$ = False),
                ContentPadding->False,
                Evaluator->Automatic,
                Method->"Queued"], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "Sin((2*k*i*pi + i*pi)/(2n))", 
                    Defer[
                    Sin[(2 Global`k I Pi + I Pi)/(2 Global`n)]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Sin", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", "*", "k", "*", "I", "*", "Pi"}], " ", "+", 
                    " ", 
                    RowBox[{"I", "*", "Pi"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Sin", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", "*", "k", "*", "I", "*", "Pi"}], " ", "+", 
                    " ", 
                    RowBox[{"I", "*", "Pi"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Sin", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", "*", "k", "*", "I", "*", "Pi"}], " ", "+", 
                    " ", 
                    RowBox[{"I", "*", "Pi"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "n"}], ")"}]}], "]"}]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
               "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
            PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{"Sin", "[", 
  FractionBox[
   RowBox[{
    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], "+", 
    RowBox[{"2", " ", "\[ImaginaryI]", " ", "k", " ", "\[Pi]"}]}], 
   RowBox[{"2", " ", "n"}]], "]"}]], "Output",
 CellChangeTimes->{3.600364002198391*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TeXForm", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", " ", "-", " ", 
     RowBox[{"E", "^", 
      RowBox[{"(", 
       RowBox[{"I", " ", "Pi", "*", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", " ", "k"}], " ", "+", " ", "1"}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"2", " ", "n"}], ")"}]}]}], ")"}]}]}], ")"}], "*", 
   RowBox[{"(", 
    RowBox[{"x", " ", "-", " ", 
     RowBox[{"E", "^", 
      RowBox[{"(", 
       RowBox[{"I", " ", "Pi", "*", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", " ", 
            RowBox[{"(", 
             RowBox[{"n", " ", "-", " ", "k", " ", "-", " ", "1"}], ")"}]}], 
           " ", "+", " ", "1"}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"2", " ", "n"}], ")"}]}]}], ")"}]}]}], ")"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.6003643701792717`*^9, 3.600364373576646*^9}}],

Cell["\<\
\\left(x-e^{\\frac{i \\pi  (2 k+1)}{2 n}}\\right) \\left(x-e^{\\frac{i \\pi  \
(2 (-k+n-1)+1)}{2
   n}}\\right)\
\>", "Output",
 CellChangeTimes->{3.60036437436447*^9}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6003643794603777`*^9, 3.600364382975453*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Conjugate[E^(I Pi (2 k + 1)/(2 n))]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", 
        "Conjugate[E^(I*Pi*((2*k + 1)/(2*n)))]"}, "ExtrusionOpen" -> False, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Conjugate[E^(I Pi ((2 k + 1)/(2 n)))]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TemplateBox[{
               RowBox[{"(", 
                 SuperscriptBox["\[ExponentialE]", 
                  RowBox[{"\[ImaginaryI]", " ", "\[Pi]", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.6]], 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], 
                    RowBox[{"2", " ", "n"}]], 
                    PolynomialForm[#, TraditionalOrder -> False]& ]}]], 
                 ")"}]}, "Conjugate", SyntaxForm -> SuperscriptBox], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement[
       "info", {"text" -> "z^\[Conjugate] is the complex conjugate of z"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/mathematica/ref/Conjugate.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Conjugate",
            "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ComplexConjugate.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{"  ", "\"  \"", 
                  StyleBox[
                   
                   TemplateBox[{"z"}, "Conjugate", SyntaxForm -> 
                    SuperscriptBox], FontFamily -> "Bitstream Charter", Bold, 
                   14, StripOnInput -> False], 
                  "\"is the complex conjugate of\"", 
                  StyleBox[
                  "z", FontFamily -> "Bitstream Charter", Bold, 14, 
                   StripOnInput -> False]}, "RowWithSeparators"], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}], 
       XMLElement["info", {"text" -> "i is the imaginary unit"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/I.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{"  ", "\"  \"", 
                  StyleBox[
                  "\[ImaginaryI]", FontFamily -> "Bitstream Charter", Bold, 
                   14, StripOnInput -> False], "\"is the imaginary unit\""}, 
                 "RowWithSeparators"], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Exact result", "scanner" -> "Identity", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "moutput", {}, {"E^(((-I/2) Pi (1 + 2 Conjugate[k]))/Conjugate[n])"}], 
       
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             SuperscriptBox["\[ExponentialE]", 
              RowBox[{"-", 
                FractionBox[
                 RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    
                    TemplateBox[{"k"}, "Conjugate", SyntaxForm -> 
                    SuperscriptBox]}], "+", "1"}], ")"}]}], 
                 RowBox[{"2", " ", 
                   
                   TemplateBox[{"n"}, "Conjugate", SyntaxForm -> 
                    SuperscriptBox]}]]}]], Identity], TraditionalForm]], 
          "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "3D plots", "scanner" -> "Plot", "id" -> "3DPlot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> "Real part"}, {
       XMLElement[
       "minput", {}, {
        "Plot3D[Re[E^(((-I/2) Pi (1 + 2 Conjugate[k]))/Conjugate[n])], {k, \
-6.49787, 6.49787}, {n, -6.49787, 6.49787}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`density$$ = 15, 
                 CalculateUtilities`GraphicsUtilities`Private`max1380$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`max1382$$ = 
                 0.5, CalculateUtilities`GraphicsUtilities`Private`min1379$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min1381$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`xmesh$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`ymesh$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`zmesh$$ = False,
                  Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1379$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["k", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1380$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["k", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1381$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1382$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$], 
                    True, "x"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$], 
                    True, "y"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$], 
                    False, "z"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`density$$], 
                    15, "mesh density"}, 1, 30, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Grid[{{"mesh:", 
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[8], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$675698$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min1379$\
675703$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1380$675704$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`min1381$\
675705$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1382$675706$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`xmesh$675707$\
$ = False, CalculateUtilities`GraphicsUtilities`Private`ymesh$675708$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`zmesh$\
675709$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`density$675710$$\
 = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`density$$ = 
                    15, CalculateUtilities`GraphicsUtilities`Private`max1380$$\
 = 0.5, CalculateUtilities`GraphicsUtilities`Private`max1382$$ = 0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min1379$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min1381$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, 
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$ = 
                    True, CalculateUtilities`GraphicsUtilities`Private`ymesh$$\
 = True, CalculateUtilities`GraphicsUtilities`Private`zmesh$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$675698$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1379$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1379$\
675703$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1380$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1380$\
675704$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1381$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1381$\
675705$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1382$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1382$\
675706$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$675707$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$675708$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$675709$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    CalculateUtilities`GraphicsUtilities`Private`density$\
675710$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Function[Null, 
                    
                    Plot3D[#, #2, #3, Mesh -> 
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    MeshFunctions :> Flatten[{
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, #& \
, {}], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, #2& \
, {}], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, #3& \
, {}]}], 
                    SlotSequence[4]], HoldAll][
                    Re[E^(Complex[0, 
                    Rational[-1, 2]] Pi (1 + 2 Conjugate[$CellContext`k])/
                    Conjugate[$CellContext`n])], {$CellContext`k, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1379$$], 
                    (
                    Piecewise[{{
                    0. + 6.946511093982827 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.946511093982827 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1379$$], \
-6.497866136776995], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1379$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1380$$]], \

                    (
                    Piecewise[{{
                    0. + 6.946511093982827 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.946511093982827 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1379$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1380$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1379$$ + 
                    0.012995732273553991`, 
                    CalculateUtilities`GraphicsUtilities`Private`max1380$$]], 
                    6.497866136776995]}, {$CellContext`n, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1381$$], 
                    (
                    Piecewise[{{
                    0. + 6.946511093982827 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.946511093982827 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1381$$], \
-6.497866136776995], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1381$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1382$$]], \

                    (
                    Piecewise[{{
                    0. + 6.946511093982827 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.946511093982827 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1381$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1382$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1381$$ + 
                    0.012995732273553991`, 
                    CalculateUtilities`GraphicsUtilities`Private`max1382$$]], 
                    6.497866136776995]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["k", TraditionalForm]], 
                    RawBoxes[
                    FormBox["n", TraditionalForm]]}, ImageSize -> 240., 
                    ClippingStyle -> Opacity[0.25], AxesLabel -> {
                    RawBoxes[
                    FormBox["k", TraditionalForm]], 
                    RawBoxes[
                    FormBox["n", TraditionalForm]]}, MeshStyle -> 
                    Opacity[0.45], Mesh -> 20, ColorFunction :> (Blend[{
                    RGBColor[0.628962, 0.149248, 0.135592], 
                    RGBColor[1., 0.634379, 0.186801], 
                    RGBColor[1., 0.895537, 0.582162], 
                    RGBColor[1., 0.995346, 0.826535]}, #3]& ), AxesStyle :> 
                    Directive[
                    GrayLevel[0.65], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], BoxStyle :> GrayLevel[0, 0.35]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1379$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["k", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1380$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["k", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1381$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1382$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, {{
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, 
                    True, "x"}, {True, False}, ControlPlacement -> 5}, {{
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, 
                    True, "y"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, 
                    False, "z"}, {True, False}, ControlPlacement -> 7}, {{
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    15, "mesh density"}, 1, 30, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 8}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Grid[{{"mesh:", 
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[8], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7+MfIPEZibdNSEiIvTAmDShJ+\
V4vviQWrh1sdxv8efDZTdKsXaWYDtCUfjjVl+bx3XPPXe/xkYzSfq/X01et+SA5TW/\
g6ZE1O3JSyKmge6eFAq2ZFOkVfHbbmhjMLnDyA6j3XbfmvVQTYvz5Db5PeDLlxMBXwzgzDPR4X5EiZ\
4muPUPFju1PxlwmhLOf8GRz69Xm6y2PgqEMiTGghH7RFrHIFdGQ9hDomjXbnIhv/rhRHj9NOY/h+\
xREAvqB9Y4UoRZGCsIxneBbLzVRdzEvQwQlil44S06c220v0EYxkY1gUuAb53L1rC0uUZn21NwrqVm\
lHx/9TXwgYxeS97ic3dnxFxbG5WLvrKj+OXUDPL9tC6/\
kyVLeML13HGkjhh2DXmTzaesqeUKqlnXBz6i6oNmy1hjPnzD1P9Ih02YxjOdtw4DJka3wcuUtwr9sC\
y8LbPmZtO9b89k7SsBlk6GS20dJp3wWRTPlgRdo+3R1YR0e407Fd4zOkApWOJGNs+wW1x0PK/\
B6R4ixduM1SEfUEyCCAqyLOm53WcbMTk4USSzw7Lp+\
2WMjWYcScGf72jNBmR1fnpBVaxOag3Su7sQk+Zc/\
Km4llzNNhrwfCAMZqJWiv4X1UZZcQUcyMJIYL2jqNZjDKqkhUcGyH5QgcUEEQ0j2y37cN/\
9wvhJI1b5CdSnP4sCV5jQ8iX5Z4EMQmcmb23Xg6ApuW8wmkie16iKWpvPTZn1M95tMN25oDvRQEkJL\
Ej7Quz2h2xP+4p6wsAN3S0K3JHRLQrckdEvC/7skuIjxX+k3ZD+3Vg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> "Imaginary part"}, {
       XMLElement[
       "minput", {}, {
        "Plot3D[Im[E^(((-I/2) Pi (1 + 2 Conjugate[k]))/Conjugate[n])], {k, \
-6.49787, 6.49787}, {n, -6.49787, 6.49787}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`density$$ = 15, 
                 CalculateUtilities`GraphicsUtilities`Private`max1384$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`max1386$$ = 
                 0.5, CalculateUtilities`GraphicsUtilities`Private`min1383$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min1385$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`xmesh$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`ymesh$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`zmesh$$ = False,
                  Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1383$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["k", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1384$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["k", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1385$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1386$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$], 
                    True, "x"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$], 
                    True, "y"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$], 
                    False, "z"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`density$$], 
                    15, "mesh density"}, 1, 30, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Grid[{{"mesh:", 
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[8], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$675784$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min1383$\
675785$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1384$675786$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`min1385$\
675787$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1386$675788$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`xmesh$675789$\
$ = False, CalculateUtilities`GraphicsUtilities`Private`ymesh$675790$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`zmesh$\
675791$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`density$675792$$\
 = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`density$$ = 
                    15, CalculateUtilities`GraphicsUtilities`Private`max1384$$\
 = 0.5, CalculateUtilities`GraphicsUtilities`Private`max1386$$ = 0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min1383$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min1385$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateUtilities`GraphicsUtilities`Private`xmesh$\
$ = True, CalculateUtilities`GraphicsUtilities`Private`ymesh$$ = True, 
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$675784$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1383$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1383$\
675785$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1384$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1384$\
675786$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1385$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1385$\
675787$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1386$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1386$\
675788$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$675789$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$675790$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$675791$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    CalculateUtilities`GraphicsUtilities`Private`density$\
675792$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Function[Null, 
                    
                    Plot3D[#, #2, #3, Mesh -> 
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    MeshFunctions :> Flatten[{
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, #& \
, {}], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, #2& \
, {}], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, #3& \
, {}]}], 
                    SlotSequence[4]], HoldAll][
                    Im[E^(Complex[0, 
                    Rational[-1, 2]] Pi (1 + 2 Conjugate[$CellContext`k])/
                    Conjugate[$CellContext`n])], {$CellContext`k, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1383$$], 
                    (
                    Piecewise[{{
                    0. + 6.946511093982827 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.946511093982827 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1383$$], \
-6.497866136776995], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1383$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1384$$]], \

                    (
                    Piecewise[{{
                    0. + 6.946511093982827 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.946511093982827 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1383$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1384$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1383$$ + 
                    0.012995732273553991`, 
                    CalculateUtilities`GraphicsUtilities`Private`max1384$$]], 
                    6.497866136776995]}, {$CellContext`n, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1385$$], 
                    (
                    Piecewise[{{
                    0. + 6.946511093982827 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.946511093982827 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1385$$], \
-6.497866136776995], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1385$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1386$$]], \

                    (
                    Piecewise[{{
                    0. + 6.946511093982827 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.946511093982827 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1385$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1386$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1385$$ + 
                    0.012995732273553991`, 
                    CalculateUtilities`GraphicsUtilities`Private`max1386$$]], 
                    6.497866136776995]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["k", TraditionalForm]], 
                    RawBoxes[
                    FormBox["n", TraditionalForm]]}, ImageSize -> 240., 
                    ClippingStyle -> Opacity[0.25], AxesLabel -> {
                    RawBoxes[
                    FormBox["k", TraditionalForm]], 
                    RawBoxes[
                    FormBox["n", TraditionalForm]]}, MeshStyle -> 
                    Opacity[0.45], Mesh -> 20, ColorFunction :> (Blend[{
                    RGBColor[0.628962, 0.149248, 0.135592], 
                    RGBColor[1., 0.634379, 0.186801], 
                    RGBColor[1., 0.895537, 0.582162], 
                    RGBColor[1., 0.995346, 0.826535]}, #3]& ), AxesStyle :> 
                    Directive[
                    GrayLevel[0.65], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], BoxStyle :> GrayLevel[0, 0.35]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1383$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["k", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1384$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["k", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1385$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1386$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, {{
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, 
                    True, "x"}, {True, False}, ControlPlacement -> 5}, {{
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, 
                    True, "y"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, 
                    False, "z"}, {True, False}, ControlPlacement -> 7}, {{
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    15, "mesh density"}, 1, 30, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 8}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button["Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Grid[{{"mesh:", 
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[8], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7+MfIPEZCQaMD0iIvTAmDShJ+\
V4vviQWrh1sdxv8efDZTdKsXaWYDtCUfjjVl+bx3XPPXe/xkYzSfq/X01et+SA5TW/\
g6ZE1O3JSyKmge6eFAq2ZFOkVfHbbmhjMLnDyA6j3XbfmvVQTYvz5Db5PeDLlxMBXwzgzDPR4X5EiZ\
4muPUPFju1PxlwmhLOf8OTV1sut15seBUMZEmNACb3ZFrHIFdGQ9hDomjXbnIhv/rhRHj9NOY/h+\
xREAvqB9Y4UoRZGCsIxneBbLzVRdzEvQwQlil44S06c220v0EYxkY1gUuAb53L1rC0uUZn21NwrqVm\
lHx/9TXwgYxeS97ic3dnxFxbG5WLvrKj+OXUDPL9tC6/\
kyVLeML13HGkjhh2DXmTzaesqeUKqlnXBz6i6oNmy1hjPnzD1P9Ih02YxjOdtw4DJka3wcuUtwr9oC\
y8LbPmZtO9b89k7SsBlk6GS20dJp3wWRTPlgRdo+3R1YR0e407Fd4zOkApWOJGNs+wW1x0PK/\
B6R4ixduM1SEfUEyCCAqyLOm53WcbMTk4USSzw7Lp+\
2WMjWYcScGf72jNBmR1fnpBVaxOag3Su7sQk+Zc/\
Km4llzNNhrwfCAMZqJWiv4X1UZZcQUcyMJIYL2jqNZjDKqkhUcGyH5QgcUEEQ0j2y37cN/\
9wvhJI1b5CdSnP4sCV5jQ8iX5Z4EMQmcmb23Xg6ApuW8wmkie16iKWpvPTZn1M95tMN25oDvRQEkJL\
Ej7Quz2h2xP+4p6wsAN3S0K3JHRLQrckdEvC/7skuIjxX+k3fY23Ng=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Contour plots", "scanner" -> "Plot", "id" -> 
     "ContourPlot", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> "Real part"}, {
       XMLElement[
       "minput", {}, {
        "ContourPlot[Re[E^(((-I/2) Pi (1 + 2 Conjugate[k]))/Conjugate[n])], \
{k, -6.49787, 6.49787}, {n, -6.49787, 6.49787}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max829$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`max831$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min828$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min830$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min828$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["k", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max829$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["k", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min830$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max831$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$558796$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min828$\
558801$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max829$558802$$ = 
                 0, 
                 CalculateUtilities`GraphicsUtilities`Private`min830$558803$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`max831$\
558804$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max829$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`max831$$\
 = 0.5, CalculateUtilities`GraphicsUtilities`Private`min828$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min830$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$558796$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min828$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min828$\
558801$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max829$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max829$\
558802$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min830$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min830$\
558803$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max831$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max831$\
558804$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    ContourPlot[
                    Re[E^(Complex[0, 
                    Rational[-1, 2]] Pi (1 + 2 Conjugate[$CellContext`k])/
                    Conjugate[$CellContext`n])], {$CellContext`k, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min828$$], 
                    (Piecewise[{{
                    0. + 6.946511093982827 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.946511093982827 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min828$$], \
-6.497866136776995], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min828$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max829$$]], 
                    (
                    Piecewise[{{
                    0. + 6.946511093982827 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.946511093982827 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min828$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max829$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min828$$ + 
                    0.012995732273553991`, 
                    CalculateUtilities`GraphicsUtilities`Private`max829$$]], 
                    6.497866136776995]}, {$CellContext`n, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min830$$], 
                    (
                    Piecewise[{{
                    0. + 6.946511093982827 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.946511093982827 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min830$$], \
-6.497866136776995], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min830$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max831$$]], 
                    (
                    Piecewise[{{
                    0. + 6.946511093982827 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.946511093982827 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min830$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max831$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min830$$ + 
                    0.012995732273553991`, 
                    CalculateUtilities`GraphicsUtilities`Private`max831$$]], 
                    6.497866136776995]}, FrameLabel -> {
                    RawBoxes[
                    FormBox["k", TraditionalForm]], 
                    RawBoxes[
                    FormBox["n", TraditionalForm]]}, ImageSize -> 240., 
                    ClippingStyle -> Automatic, FrameLabel -> Automatic, 
                    RotateLabel -> False, PlotRangePadding -> 0, 
                    ColorFunction :> (Blend[{
                    RGBColor[
                    0.6289616235599298, 0.1492484931715877, 
                    0.1355916685740444], 
                    RGBColor[1., 0.634378576333257, 0.1868009460593576], 
                    RGBColor[1., 0.8955367360952163, 0.5821622034027619], 
                    RGBColor[
                    1., 0.9953459983215076, 0.826535439078355]}, #]& ), 
                    FrameStyle :> Directive[
                    GrayLevel[0, 0.5], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min828$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["k", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max829$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["k", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min830$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max831$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/\
APkPiMxEsFSEgT22BMGlCS8r1efEktXDvYzjb48+Czm6RZu0oxHaAp/XCqL83ju+eeu96jQxml/\
V6vpy9b80Fyml7D00NrduQsl4Wg705yBVozKdJL+\
OymNTGYXeDkB1Dvu2rNe6lmxPjzG3yf8KTgxMBXwzgzDPRkT5F8yhJde0aKHdmfTLhMCGc/4fFw+\
Orl66FHwVBGxBhQQj9vi5hPFdGQ9hDoijXbnIhv/vigPH4qOI/\
hewEiAX3PeseKUAsjBeGYTvCtF5qo25iXIYISRc+dJSfO7bYXaKOYyMYwy/\
GNM7l62haXqEx7au6U1KzTj4/+Oj6QsQvJe1zO7uz4CwvjYrF3WlT/\
nLoBnrfawit5vJI3TO8tR9qIYUegl9l80rpKnpCqZV3wc6rOabZsNMazJ0z9j3TAtFkO41nbMGB2aC\
u8WnnL8C/awsscW34u7bvWfPaOEnDVZKjk9lHSgs+\
jaKY88AJtn67OrcNj3Kr4jtEZUsEKJ7Jxlt3iuuN+BV7vCDHWbrIB6Yh6AkSQg3VRx+\
0uy5jZmRJFEgs8v65f9thY1qEE3Nm+\
9kxQZseXJ2Td2oRmP12oOzHJ9MsfFbeSy6kmQ973hYEM1FrR38D6KEuuoGMZGEmMFzT1GsxhldSIqG\
DZD0qQOCeCIST7ZT/um3+4WAmkak+\
hupRnceBKcxKeRL8s8AGIzEyb23Xg6ApuW8wmkse16iKWpovTZnNM95tMN25oDvRQEkJLEj7Quz2h2\
xP+4p6wtAN3S0K3JHRLQrckdEvC/7skuIjxX+k36nm3Tg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> "Imaginary part"}, {
       XMLElement[
       "minput", {}, {
        "ContourPlot[Im[E^(((-I/2) Pi (1 + 2 Conjugate[k]))/Conjugate[n])], \
{k, -6.49787, 6.49787}, {n, -6.49787, 6.49787}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max833$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`max835$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min832$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min834$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min832$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["k", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max833$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["k", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min834$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max835$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$558870$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min832$\
558871$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max833$558872$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`min834$\
558873$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max835$558874$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max833$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`max835$$\
 = 0.5, CalculateUtilities`GraphicsUtilities`Private`min832$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min834$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`more$558870$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min832$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min832$\
558871$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max833$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max833$\
558872$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min834$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min834$\
558873$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max835$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max835$\
558874$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    ContourPlot[
                    Im[E^(Complex[0, 
                    Rational[-1, 2]] Pi (1 + 2 Conjugate[$CellContext`k])/
                    Conjugate[$CellContext`n])], {$CellContext`k, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min832$$], 
                    (
                    Piecewise[{{
                    0. + 6.946511093982827 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.946511093982827 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min832$$], \
-6.497866136776995], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min832$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max833$$]], 
                    (
                    Piecewise[{{
                    0. + 6.946511093982827 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.946511093982827 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min832$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max833$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min832$$ + 
                    0.012995732273553991`, 
                    CalculateUtilities`GraphicsUtilities`Private`max833$$]], 
                    6.497866136776995]}, {$CellContext`n, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min834$$], 
                    (
                    Piecewise[{{
                    0. + 6.946511093982827 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.946511093982827 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min834$$], \
-6.497866136776995], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min834$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max835$$]], 
                    (
                    Piecewise[{{
                    0. + 6.946511093982827 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.946511093982827 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min834$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max835$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min834$$ + 
                    0.012995732273553991`, 
                    CalculateUtilities`GraphicsUtilities`Private`max835$$]], 
                    6.497866136776995]}, FrameLabel -> {
                    RawBoxes[
                    FormBox["k", TraditionalForm]], 
                    RawBoxes[
                    FormBox["n", TraditionalForm]]}, ImageSize -> 240., 
                    ClippingStyle -> Automatic, FrameLabel -> Automatic, 
                    RotateLabel -> False, PlotRangePadding -> 0, 
                    ColorFunction :> (Blend[{
                    RGBColor[
                    0.6289616235599298, 0.1492484931715877, 
                    0.1355916685740444], 
                    RGBColor[1., 0.634378576333257, 0.1868009460593576], 
                    RGBColor[1., 0.8955367360952163, 0.5821622034027619], 
                    RGBColor[
                    1., 0.9953459983215076, 0.826535439078355]}, #]& ), 
                    FrameStyle :> Directive[
                    GrayLevel[0, 0.5], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min832$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["k", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max833$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["k", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min834$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max835$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7+\
MfIPEZiZehISEh9sKYNKAk5XtvsdNYuHawnW3w58FnN0mzdpViOkBT+uFUX5rHd889d73HRzJK+\
71eT1+15oPkJL2Bp0fW7MhpLgtB9k5zRbVmUqRX8Nlta2JqdimHH5R433Vr3ks1BePPb/\
B94EnBwdCvhnFmGNXjfQV5xhJde4aKHdufjLlMgLOf9Mnm5tbWq9ceBUMZgjFUCf2iLWKeKdA07SHQ\
NWu2OYhv/rhRHj8VnMf0e0FFQvUD6x0pIBZGCuCYTvCtl5qou5iXAUFAkQtnyYlzu+\
0F2igmJiM6zfGNc7l61hYX1ER7au6V1KzSj4/+Jj6QsQvJe1zO7uz4CwvjcrF3VlT/nLoBnt+\
2hVfyZClvmN47jrSBYcdUL7L5tHWVPCFVy7rgZ1Rd0GxZa4znT5j6H+\
mQabMYxvO2YdDpka3wcuUtwr9sCy9zbPmZtO9b89k7SsBlk6GS20dJCj6LopnywAu0fbo6tw6Pcafi\
O0ZnSAUrnMjGWXaL646HFXi9I8RYu/EapCPqCRDRnFoXcdzusgkzOxkoSCzw7Lp+\
2WMjWYcScGf72jNBmB1fnpBVaxOag3Su7mCS7MsfFbeSy5kmQ94PhKETqlaK/\
hbWR1lyBRnJwEhivKCp12AOq6SGoIJlPyhB4hwEQ0j2y37cN/\
9wvhJI1b5CdSnP4sCV5jQ8iX5Z4EMqJiZrbteBoyu4bTGbSJ7UqotYms5Pm/\
Ux3W8y3bihOdBDSQgtSfhA7/aEbk/4i3vCwg7cLQndktAtCd2S0C0J/++S4CLGf6Xf3c63Xg=="]]}\
; Typeset`initDone$$ = True), DynamicModuleValues :> {}, Deinitialization :> 
                None, UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod5$$ = 
   XMLElement[
   "pod", {"title" -> "Alternate form", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "moutput", {}, {"E^((Pi (-I/2 - I Conjugate[k]))/Conjugate[n])"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             SuperscriptBox["\[ExponentialE]", 
              FractionBox[
               RowBox[{"\[Pi]", " ", 
                 RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"\[ImaginaryI]"}], " ", 
                    
                    TemplateBox[{"k"}, "Conjugate", SyntaxForm -> 
                    SuperscriptBox]}]}], "-", 
                    FractionBox["\[ImaginaryI]", "2"]}], ")"}]}], 
               
               TemplateBox[{"n"}, "Conjugate", SyntaxForm -> 
                SuperscriptBox]]], Identity], TraditionalForm]], "Output"]}], 
       
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Alternate form assuming k and n are positive", 
     "scanner" -> "Simplification", "id" -> "PositiveAlternateForm", 
     "position" -> "600", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FullSimplify[E^(((-I/2) Pi (1 + 2 Conjugate[k]))/Conjugate[n]), k > \
0 && n > 0]"}], 
       XMLElement["moutput", {}, {"E^(((-I/2) (1 + 2 k) Pi)/n)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             SuperscriptBox["\[ExponentialE]", 
              RowBox[{"-", 
                FractionBox[
                 RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                 RowBox[{"2", " ", "n"}]]}]], Identity], TraditionalForm]], 
          "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod7$$ = XMLElement[
   "pod", {
    "title" -> "Alternate form assuming k and n are real", "scanner" -> 
     "Simplification", "id" -> "AlternateFormAssumingAllVariablesAreReal", 
     "position" -> "700", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ComplexExpand[E^(((-I/2) Pi (1 + 2 Conjugate[k]))/Conjugate[n])]"}], 
       
       XMLElement[
       "moutput", {}, {
        "Cos[((1 + 2 k) Pi)/(2 n)] - I Sin[((1 + 2 k) Pi)/(2 n)]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"cos", "(", 
                 FractionBox[
                  RowBox[{"\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                  RowBox[{"2", " ", "n"}]], ")"}], "-", 
               RowBox[{"\[ImaginaryI]", " ", 
                 RowBox[{"sin", "(", 
                   FractionBox[
                    RowBox[{"\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]], ")"}]}]}], Identity], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Roots", "scanner" -> "Reduce", "id" -> 
     "NoSolutionsFromReduce", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement[
       "minput", {}, {
        "Reduce[{E^(((-I/2) Pi (1 + 2 Conjugate[k]))/Conjugate[n]) == 0}, {k, \
n}]"}], 
       XMLElement["moutput", {}, {"False"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", "\"no roots exist\"", 
               "\[NoBreak]", "\")\""}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}, StripOnInput -> False], TraditionalForm]], 
          "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral assuming all variables are real", 
     "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegralAssumingAllVariablesAreReal", "position" -> "900", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Integrate[Conjugate[E^(I Pi ((2 k + 1)/(2 n)))], n, Assumptions -> \
Element[k | n, Reals]]"}], 
       XMLElement[
       "moutput", {}, {
        "n/E^(((I/2) (1 + 2 k) Pi)/n) + (I/2) (Pi + 2 k Pi) \
ExpIntegralEi[((-I/2) (1 + 2 k) Pi)/n]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   TemplateBox[{
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]], ")"}]}, "Conjugate", 
                    SyntaxForm -> SuperscriptBox], 
                   RowBox[{"\[DifferentialD]", "n"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    RowBox[{
                    FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", "k"}], "+", "\[Pi]"}], 
                    ")"}], " ", 
                    TemplateBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}], " ", 
                    "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]}]}, "ExpIntegralEi"]}], "+", 
                    RowBox[{"n", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]}]]}]}], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, 
                   GrayLevel[0], StripOnInput -> False], "+", 
                  StyleBox[
                  "constant", FontFamily -> "Helvetica", Magnification -> 
                   0.9 Inherited]}], 
                LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
                
                GrayLevel[0.6], StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "Ei(x) is the exponential integral Ei"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/mathematica/ref/ExpIntegralEi.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/ExpIntegralEi", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ExponentialIntegral.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{"  ", "\"  \"", 
                  StyleBox[
                   TemplateBox[{"x"}, "ExpIntegralEi"], FontFamily -> 
                   "Bitstream Charter", Bold, 14, StripOnInput -> False], 
                  "\"is the exponential integral Ei\""}, "RowWithSeparators"], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}]}]}], 
   Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Alternative representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "AlternativeRepresentations:MathematicalFunctionIdentityData", 
     "position" -> "1000", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Conjugate[E^(I Pi ((2 k + 1)/(2 n)))] == -E^((I (1 + 2 k) Pi)/(2 n)) \
+ 2 Re[E^((I (1 + 2 k) Pi)/(2 n))]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                TemplateBox[{
                  RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]], ")"}]}, "Conjugate", 
                 SyntaxForm -> SuperscriptBox], "\[LongEqual]", 
                RowBox[{
                  RowBox[{"-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]]}], "+", 
                  RowBox[{"2", " ", 
                    RowBox[{"Re", "(", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]], ")"}]}]}]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Conjugate[E^(I Pi ((2 k + 1)/(2 n)))] == -2 I Im[E^((I (1 + 2 k) \
Pi)/(2 n))] + E^((I (1 + 2 k) Pi)/(2 n))"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                TemplateBox[{
                  RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]], ")"}]}, "Conjugate", 
                 SyntaxForm -> SuperscriptBox], "\[LongEqual]", 
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "2"}], " ", "\[ImaginaryI]", " ", 
                    RowBox[{"Im", "(", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]], ")"}]}], "+", 
                  SuperscriptBox["\[ExponentialE]", 
                   FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]]}]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Conjugate[E^(I Pi ((2 k + 1)/(2 n)))] == -(I Im[E^((I (1 + 2 k) \
Pi)/(2 n))]) + Re[E^((I (1 + 2 k) Pi)/(2 n))]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                TemplateBox[{
                  RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]], ")"}]}, "Conjugate", 
                 SyntaxForm -> SuperscriptBox], "\[LongEqual]", 
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", 
                    RowBox[{"Im", "(", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]], ")"}]}], "+", 
                  RowBox[{"Re", "(", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]], ")"}]}]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "AlternativeRepresentations:MathematicalFunctionIdentityData__More"},\
 {}]}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement["info", {"text" -> "Re(z) is the real part of z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/Re.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Re", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/RealPart.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{"  ", "\"  \"", 
                  StyleBox[
                   RowBox[{"Re", "(", "z", ")"}], FontFamily -> 
                   "Bitstream Charter", Bold, 14, StripOnInput -> False], 
                  "\"is the real part of\"", 
                  StyleBox[
                  "z", FontFamily -> "Bitstream Charter", Bold, 14, 
                   StripOnInput -> False]}, "RowWithSeparators"], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}], 
       XMLElement["info", {"text" -> "Im(z) is the imaginary part of z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/Im.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Im", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ImaginaryPart.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{"  ", "\"  \"", 
                  StyleBox[
                   RowBox[{"Im", "(", "z", ")"}], FontFamily -> 
                   "Bitstream Charter", Bold, 14, StripOnInput -> False], 
                  "\"is the imaginary part of\"", 
                  StyleBox[
                  "z", FontFamily -> "Bitstream Charter", Bold, 14, 
                   StripOnInput -> False]}, "RowWithSeparators"], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ComplexComponents/Conjugate/27/\
ShowAll.html", "text" -> "More information"}, {}]}]}]}], Typeset`pod11$$ = 
   XMLElement[
   "pod", {"title" -> "Series representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "SeriesRepresentations:MathematicalFunctionIdentityData", "position" -> 
     "1100", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Conjugate[E^(I Pi ((2 k + 1)/(2 n)))] == Sum[BesselI[j, ((-I/2) Pi \
(1 + 2 Conjugate[k]))/Conjugate[n]], {j, -Infinity, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                TemplateBox[{
                  RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]], ")"}]}, "Conjugate", 
                 SyntaxForm -> SuperscriptBox], "\[LongEqual]", 
                RowBox[{
                  UnderoverscriptBox["\[Sum]", 
                   RowBox[{"j", "=", 
                    RowBox[{"-", "\[Infinity]"}]}], "\[Infinity]"], 
                  TemplateBox[{"j", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", 
                    
                    TemplateBox[{"k"}, "Conjugate", SyntaxForm -> 
                    SuperscriptBox]}]}], ")"}]}], 
                    RowBox[{"2", " ", 
                    
                    TemplateBox[{"n"}, "Conjugate", SyntaxForm -> 
                    SuperscriptBox]}]]}]}, "BesselI"]}]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Conjugate[E^(I Pi ((2 k + 1)/(2 n)))] == Sum[((Pi/2)^j (((-I) (1 + 2 \
Conjugate[k]))/Conjugate[n])^j)/j!, {j, 0, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                TemplateBox[{
                  RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]], ")"}]}, "Conjugate", 
                 SyntaxForm -> SuperscriptBox], "\[LongEqual]", 
                RowBox[{
                  UnderoverscriptBox["\[Sum]", 
                   RowBox[{"j", "=", "0"}], "\[Infinity]"], 
                  FractionBox[
                   RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["\[Pi]", "2"], ")"}], "j"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", 
                    
                    TemplateBox[{"k"}, "Conjugate", SyntaxForm -> 
                    SuperscriptBox]}]}], ")"}]}], 
                    
                    TemplateBox[{"n"}, "Conjugate", SyntaxForm -> 
                    SuperscriptBox]]}], ")"}], "j"]}], 
                   RowBox[{"j", "!"}]]}]}], HoldForm], FrameStyle -> None, 
             FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Conjugate[E^(I Pi ((2 k + 1)/(2 n)))] == E^Subscript[z, 0] \
Sum[(((-I/2) (Pi + 2 Pi Conjugate[k]))/Conjugate[n] - Subscript[z, 0])^j/j!, \
{j, 0, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                TemplateBox[{
                  RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]], ")"}]}, "Conjugate", 
                 SyntaxForm -> SuperscriptBox], "\[LongEqual]", 
                RowBox[{
                  SuperscriptBox["\[ExponentialE]", 
                   SubscriptBox["z", "0"]], " ", 
                  RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"j", "=", "0"}], "\[Infinity]"], 
                    FractionBox[
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"\[Pi]", "+", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    
                    TemplateBox[{"k"}, "Conjugate", SyntaxForm -> 
                    SuperscriptBox]}]}], ")"}]}], 
                    RowBox[{"2", " ", 
                    
                    TemplateBox[{"n"}, "Conjugate", SyntaxForm -> 
                    SuperscriptBox]}]]}], "-", 
                    SubscriptBox["z", "0"]}], ")"}], "j"], 
                    RowBox[{"j", "!"}]]}]}]}], HoldForm], FrameStyle -> None, 
             FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "SeriesRepresentations:MathematicalFunctionIdentityData__More"}, \
{}]}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement[
       "info", {
        "text" -> 
         "I_n(z) is the modified Bessel function of the first kind"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/mathematica/ref/BesselI.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/Bessel-TypeFunctions/BesselI", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> 
           "http://mathworld.wolfram.com/ModifiedBesselFunctionoftheFirstKind.\
html", "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{"  ", "\"  \"", 
                  StyleBox[
                   TemplateBox[{"n", "z"}, "BesselI"], FontFamily -> 
                   "Bitstream Charter", Bold, 14, StripOnInput -> False], 
                  "\"is the modified Bessel function of the first kind\""}, 
                 "RowWithSeparators"], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}], 
       XMLElement["info", {"text" -> "n! is the factorial function"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/mathematica/ref/Factorial.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Factorial", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Factorial.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{"  ", "\"  \"", 
                  StyleBox[
                   RowBox[{"n", "!"}], FontFamily -> "Bitstream Charter", 
                   Bold, 14, StripOnInput -> False], 
                  "\"is the factorial function\""}, "RowWithSeparators"], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Exp/06/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod12$$, 
   Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
   Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
   Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
   Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
   Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
   Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
   Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, Typeset`pod40$$, 
   Typeset`pod41$$, Typeset`aux1$$ = {True, False, {False}, True}, 
   Typeset`aux2$$ = {True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False, False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False, False, False}, True}, 
   Typeset`aux11$$ = {True, False, {False, False, False}, True}, 
   Typeset`aux12$$ = {True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`aux39$$ = {
   True, False, {False}, True}, Typeset`aux40$$ = {
   True, False, {False}, True}, Typeset`aux41$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "11", "datatypes" -> 
     "MathematicalFunctionIdentity", "timedout" -> 
     "Plot,InterestingMultiDimensionalDefiniteIntegrals", "timedoutpods" -> 
     "", "timing" -> "3.863", "parsetiming" -> "0.833", "parsetimedout" -> 
     "false", "recalculate" -> 
     "http://www4c.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa14451f757c335a49bg5d000061ei1h89fcad5h3c&s=60", "id" -> 
     "MSPa14461f757c335a49bg5d0000588h8409b9fe9a0e", "host" -> 
     "http://www4c.wolframalpha.com", "server" -> "60", "related" -> 
     "http://www4c.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa14471f757c335a49bg5d000051ii7i99e4cf60d9&s=60", "version" -> "2.6"}, {
    "success" -> "true", "error" -> "false", "numpods" -> "0", "datatypes" -> 
     "MathematicalFunctionIdentity", "timedout" -> 
     "Plot,InterestingMultiDimensionalDefiniteIntegrals", "timedoutpods" -> 
     "", "timing" -> "3.076", "parsetiming" -> "0.", "parsetimedout" -> 
     "false", "recalculate" -> "", "id" -> "", "host" -> 
     "http://www4c.wolframalpha.com", "server" -> "60", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -8., 
    "Date" -> {2014, 2, 2, 13, 21, 49.483983`8.447039624822136}, "Line" -> 42,
     "SessionID" -> 23770121034160310062}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8, 9, 10, 11}, Typeset`failedpods$$ = {12, 13, 14, 15, 16, 17, 18,
    19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 
   37, 38, 39, 40, 41}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", 
    "Conjugate[E^(I*Pi*((2*k + 1)/(2*n)))]"}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Conjugate[E^(I Pi (2 k + 1)/(2 n))]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, Typeset`pod40$$, 
         Typeset`pod41$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$, 
         Typeset`aux41$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{340., {31., 20.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, Typeset`pod40$$, 
          Typeset`pod41$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$, 
          Typeset`aux41$$}, Typeset`chosen$$, Typeset`open$$, 
         Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "http://www4c.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa14451f757c335a49bg5d000061ei1h89fcad5h3c&s=60", Typeset`asyncpods$$}]]; 
     Typeset`asyncpods$$ = {}; Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 SuperscriptBox["\[ExponentialE]", 
  RowBox[{"-", 
   FractionBox[
    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"2", " ", 
        RowBox[{"Conjugate", "[", "k", "]"}]}]}], ")"}]}], 
    RowBox[{"2", " ", 
     RowBox[{"Conjugate", "[", "n", "]"}]}]]}]]], "Output",
 CellChangeTimes->{3.60036490204532*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sqrt", "[", 
     RowBox[{
      RowBox[{"a", "^", "2"}], "-", 
      RowBox[{"4", "a"}], "+", "4", "+", 
      RowBox[{"b", "^", "2"}], "+", 
      RowBox[{"6", "b"}], "-", "9"}], "]"}], "==", 
    RowBox[{"Sqrt", "[", 
     RowBox[{
      RowBox[{"a", "^", "2"}], "-", 
      RowBox[{"6", "a"}], "+", "9", "+", 
      RowBox[{"b", "^", "2"}], "-", 
      RowBox[{"2", "b"}], "+", "1"}], "]"}]}], ",", "b"}], "]"}]], "Input",
 CellChangeTimes->{{3.60036698088237*^9, 3.600367035136777*^9}, {
  3.600367121365726*^9, 3.6003671681783447`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Solve", "::", "ifun"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Inverse functions are being used by \
\[NoBreak]\\!\\(Solve\\)\[NoBreak], so some solutions may not be found; use \
Reduce for complete solution information. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/Solve/ifun\\\", ButtonNote -> \
\\\"Solve::ifun\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.600367146738819*^9, 3.600367168603793*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"b", "\[Rule]", 
    RowBox[{
     FractionBox["1", "8"], " ", 
     RowBox[{"(", 
      RowBox[{"15", "-", 
       RowBox[{"2", " ", "a"}]}], ")"}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.6003671467411203`*^9, 3.600367168606599*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{"y", "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"-", "1"}], "/", "4"}], " ", "x"}], " ", "+", " ", 
    RowBox[{"15", "/", "8"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.600367204250029*^9, 3.600367217954501*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Plot", "::", "argr"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"\[NoBreak]\\!\\(Plot\\)\[NoBreak] called with 1 argument; \
\[NoBreak]\\!\\(2\\)\[NoBreak] arguments are expected. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/Plot\\\", ButtonNote -> \
\\\"Plot::argr\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.600367218469301*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "=", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["x", "4"]}], "+", 
       FractionBox["15", "8"]}]}], ",", 
     RowBox[{"Point", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "2"}], "}"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.600367229743349*^9, 3.6003672363277683`*^9}, {
  3.600367268634755*^9, 3.600367303797072*^9}, {3.600367386993042*^9, 
  3.6003674506539707`*^9}, {3.600367529278988*^9, 3.600367532994466*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwtlHs41XccgI/TwSFDvjSiIZuVJ4QllH0+ZtJlpBO2LpNO52wn5JKSpqSS
W9lck+uzhJGa0oWYnV+ISiRCpUX1O0duuRyH43rWnmd/vM/77/vXa8wN4vCZ
DAbD7SP/+USf27hcTqi/JabTcjkbxRFLpd1zhJI4nps5uMBGd82eqYppQn0Z
NzLbPcdGI/vg+SAJoZIMKhcqptlYm5DC7hUTap/LZlawhI1si67PqGZCsTL8
NXrFbEw77Ls1KptQWxyuf0E1s7FUIbSAsY5QnVH2nKhsNiryXa31ftSiTpeb
ZJ63YCN5fj8gP3kJpTrEtX36QBk5dVn7Vz3SpEr2Nd/Q5itjxIhjQNI7Daon
QkOflilh5dEsv7Jt6tSH3KKXg6lK6J7iZbSQqUal8XTiTpoqoWtujfumIVWK
83MZ0apWxKLGY52hu1WogZA86StvRfSJTtN5UqxM6Rrz79sMsDDSd9Gfi4kS
ZfQ8arA2moUMc0Oh81kWhU2NIx7GLHx5LjO2tINJTXLFb/xuL0IDVUHJxDcK
VCxzl1mNxyL0X2um2G0gF17bWOib/Y6J+9e9Lq6rmxUONegfCQ9nolm4gzyw
QCZU3NbXk6jNxEv/7Kg/5iQV3opIsLMsVsC+UzobXHXHhY7XT/exnRWwKn2l
y3vvYeGeeE50YAcD1/S/mLDMFQtT89zkbQcY+G1Vt8q8d6+woDq3NUiRgcEl
ZbIlpF2YMZNgaGUlB++fTC61Hb8rzEyM3iLhL0Dj4xcJNjsqofniM6ubefPg
YH6v3COjHVYPt08kNMwBM0znFU+vF3D7CV773Cwoq3mc4n4Qw8mFjjKbFbNw
prfT+dDlYRg1OVuRvHUGrmfHeESOj4H2ztf+vmemISifp0l7S4HXJZ7deEUG
Pn5Zy2NPyUDAz7TL65mC+O1h9jY5s5Dnn28l0Z0Clna6+OTMAsirdin5Ok1C
V9PZ0WgNBdReVhPrGC4FrwiubVYdE71rW2jrvAkIWDy4omUXC7f8kvDhYpsE
DEsbLigNKGLwlZxbc6oSiKh03qGRrYy1Jj7e4dbjEFwUcMfWUgUfXH1YwBOM
gRpzHddCpIozkXSLIHEUXA56ppulqmF1SqlfR8AI6N5dHuTyuTq+3/g2qap7
GFIOxSWv6dLAwMSjgU9WDgEnZpt57h1N3CPxLbyfMgBmu6O9Ck4swaubpzwr
WP3QKVbJT/XSQk/roernnn3QwhU5aRkS5DmsPd59TwRvWH/I0lcQ/Hryhvqz
KhFMFAnK9EwJ6pZbXHp8UwR6g4MGxuYEW1atbKgpFAEvdHzKcj1BOz19zd/j
RTBzRn7N7XuCajJGAW+7CEwL9ZbF/0bw1u3HTcO9NNi7dreqpRL8NWSzj/gF
Dd/158QmXSAoMG8Yfd1GQ4i5kTQjl+BnhUKd1noa/rpt2lpUSjAurXxveTEN
nAabmPpGgntCL0rCgmngC6QbNjURtLXUiQk6QEO4aoWkqYWg5mCyroBLQ667
w772DoIN3HOOOz1peN+JG96+I7iGExm73o6GmXCmhN/3sVd9Vu8rKxo+0a8v
6R8gKH549OpqMxqs97p+OjZGMMcp5OlyAxpcFFRaDksJhs0P71+qQ8MPlx9F
y2QEPe76Taqr0+Dncn798TmCq4/0xSkr0/D/v1DJiqfPYNDwL37GURA=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.6000000000000001},
  Method->{},
  PlotRange->{{-5, 5}, {0.6250000510204081, 3.1249999489795917`}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{{3.600367421371295*^9, 3.600367451996738*^9}, 
   3.6003675336395617`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Point", "[", 
  RowBox[{"{", 
   RowBox[{"2", ",", "2"}], "}"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Point", "[", 
  RowBox[{"{", 
   RowBox[{"2", ",", "2"}], "}"}], "]"}]], "Output",
 CellChangeTimes->{3.600367444877345*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sqrt", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"2", "-", "a"}], ")"}], "^", "2"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "3"}], "-", "b"}], ")"}], "^", "2"}]}], "]"}], 
    "\[Equal]", 
    RowBox[{"Sqrt", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"3", "-", "a"}], ")"}], "^", "2"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "-", "b"}], ")"}], "^", "2"}]}], "]"}]}], ",", "b"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.600367599562043*^9, 3.600367683937952*^9}, {
  3.60036957182782*^9, 3.6003695738624477`*^9}}],

Cell[BoxData[
 RowBox[{"b", "\[Equal]", 
  RowBox[{
   FractionBox["1", "8"], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "3"}], "-", 
     RowBox[{"2", " ", "a"}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{{3.6003676564748783`*^9, 3.6003676784091187`*^9}, 
   3.600369574277722*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"y", "=", 
     RowBox[{
      FractionBox["1", "8"], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "3"}], "-", 
        RowBox[{"2", "x"}]}], ")"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.60036771757661*^9, 3.600367737073868*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwt1H00FXYcx/HresjT8vBLWIke5siS4nhWv1+T6IFEbEu1Es0xi9GajlhO
F0tNepBy6ZSw7hTOzhmS7ftblBOR5TnMLVwPdyqum/vTw13bb398zuvf91+f
pRFxwVFCgUAQ8H7/mjIaMK1WIzrXKh5Wq+VYlrxQ2fcG0YezqyaqmRwHGg/O
VjNEC2x+fxGnkGMbj/i3cQpESYJ0blAmx3ezzulKZYiKzD4yoS1yrLu6ewlt
QdR4d/m642I5vnB439bjYkTtxulFgZscl2kkFgvcEA3TlPlrHJrA2lF+TpZ7
TKl+U3akU+0YRj33YovOmlDbylO9G5eP4uD6/AMrm4xpcYZLY/CFEZz8Yl1s
zpAR5Q7hmu/yYyq2z6fcZzjwXKjNu8uGlCvFfoW/Bfr/rU+zPZMLc3oGcGnj
0a7EcD267Yzi5mjVE7xXdMHs0Y15tE535cdXdnTj1H2a5QZIh76hOrvNbTuw
wMEafNK1qGDX+tRM/T/xk1OXM8s6hTTa8eCS8rBmvFg/WjLziQaNt7ta8tjg
Hv7KxV67b7EabnbeWBCbWIcPuP11o77+NVjcmdpktaQc2yd5qg8Vq4Bobx8d
/FGErw2ENBzdoASV6f6BtTMlMJpm5u1nMQ2RKonR0JVqqM218x0Lm4RNMd21
5pK7sGa8d8axUAZtC20N2iIewMbaPr23YVKo813xSih5BPGSCpUJaodis440
L692CDu4/NrjY7dB/GCy0ym6Cxof9mY5h9TghwW33J3Te8HT4Y9fgvLaceDW
ylUdI/0gPGLWH2kpxcf3aLt9riOFeYZBaRHPZVioufPqpTtP4YS0yyfh+iRe
WqPM6Y8egkpxRlDq9BTuCfCxw2wY4ooijYfDlNh9h5NuQpkM9sbkW2WmqbCj
S0t2PRmDkzuOeDgXvMYNdncKLFvHQWtBruz7uXdYmLVFgVPk0N2c/lJkpEG4
kxCaHOGaXy8k3OcQayBf1rpLi1Slf2vypcNLsC67f1FnQpvkhB7Yqql8Cck1
PiFG4nlkff81SWbLFMSXxla5OuoR9xDXcHHeNBgK3SJWj+gTnbRFa/MSFOD7
9c5c+/OGpMj15y25m2fA4rZVnO+K+eR0f3b1MlMlnEv44eyabiOy2aPB/5Jc
CcEZ2x0Kq4wJ9xXYh4tCi1NMCHcWumR6RedDTQlXBa0RIxtMrRHhMniq9ZMq
dxkiXAYzpdEVlraIcBlYyuWLlzogwmUQmTg96+iFCJfB3An1rYBPEeEysC2x
/PDkGUS4DDz8+toMzyPCZbBtvCAz5yIiXAbfONgo8woR4TKo+9W2rbQMES6D
4PvOGQ2NiHAZREUrvf2bEeEySNKvVjS3IsJlUBjoub+9ExEug7Eu4v1sCBHu
+94koSJq9H3vfzL4YFGDZHwCES4Dpy/8zKemEOEy8NXQaz2sRITL4LPrTSKV
ChEugxjf017H3iDCZfD/fxEug38AV0Z6jw==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  Method->{},
  PlotRange->{{-5, 5}, {-1.6249999489795919`, 0.8749999489795919}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{3.6003677376496973`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(", 
  RowBox[{"x", "+", 
   RowBox[{"2", "^", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "/", "2"}], ")"}]}], "+", 
   RowBox[{"2", "^"}]}]}]], "Input",
 CellChangeTimes->{{3.600370521227811*^9, 3.600370526718528*^9}, {
  3.600370558213758*^9, 3.600370563203836*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Conjugate", "[", 
  RowBox[{"E", "^", 
   RowBox[{"(", 
    RowBox[{"I", " ", 
     RowBox[{"Pi", " ", "/", "4"}]}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6003728563234*^9, 3.6003728708953247`*^9}}],

Cell[BoxData[
 SuperscriptBox["\[ExponentialE]", 
  RowBox[{"-", 
   FractionBox[
    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], "4"]}]]], "Output",
 CellChangeTimes->{3.600372871297204*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"E", "^", 
  RowBox[{"(", 
   RowBox[{"2", " ", "I", " ", "Pi"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.6003730019919033`*^9, 3.600373010317781*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.600373010848349*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", "-", 
     RowBox[{"E", "^", 
      RowBox[{"(", 
       RowBox[{"I", " ", "Pi", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", "k"}], "+", "1"}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"2", "n"}], ")"}]}]}], ")"}]}]}], ")"}], "*", 
   RowBox[{"(", 
    RowBox[{"x", "-", 
     RowBox[{"E", "^", 
      RowBox[{"(", 
       RowBox[{"I", " ", "Pi", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", 
            RowBox[{"(", 
             RowBox[{"n", "-", "k", "+", "1"}], ")"}]}], "+", "1"}], ")"}], 
         "/", 
         RowBox[{"(", 
          RowBox[{"2", "n"}], ")"}]}]}], ")"}]}]}], ")"}]}], "//", 
  "TrigExpand"}]], "Input",
 CellChangeTimes->{{3.6003740674053087`*^9, 3.600374227357465*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{
    FractionBox[
     RowBox[{"\[ImaginaryI]", " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"2", " ", "k"}]}], ")"}], " ", "\[Pi]"}], 
     RowBox[{"2", " ", "n"}]], "+", 
    FractionBox[
     RowBox[{"\[ImaginaryI]", " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"2", " ", 
         RowBox[{"(", 
          RowBox[{"1", "-", "k", "+", "n"}], ")"}]}]}], ")"}], " ", "\[Pi]"}], 
     RowBox[{"2", " ", "n"}]]}]], "-", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    FractionBox[
     RowBox[{"\[ImaginaryI]", " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"2", " ", "k"}]}], ")"}], " ", "\[Pi]"}], 
     RowBox[{"2", " ", "n"}]]], " ", "x"}], "-", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    FractionBox[
     RowBox[{"\[ImaginaryI]", " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"2", " ", 
         RowBox[{"(", 
          RowBox[{"1", "-", "k", "+", "n"}], ")"}]}]}], ")"}], " ", "\[Pi]"}], 
     RowBox[{"2", " ", "n"}]]], " ", "x"}], "+", 
  SuperscriptBox["x", "2"]}]], "Output",
 CellChangeTimes->{
  3.6003741712867413`*^9, {3.600374210751133*^9, 3.6003742278086233`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "expand (x-E^(I *Pi* (2k+1)/(2n)))*(x-E^(I * Pi * (2(n-k+1)+1)/(2n)))", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Result", "Results", 1, 1, "Input", 
        "ExpandAll[(-E^(((I/2) (1 + 2 k) Pi)/n) + x) (-E^(((I/2) (1 + 2 (1 - \
k + n)) Pi)/n) + x)]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}, 
      "ExtrusionOpen" -> True}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods"}, Typeset`pod1$$ = 
   XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Expand[(-E^(((I/2) (1 + 2 k) Pi)/n) + x) (-E^(((I/2) (1 + 2 (1 - k + \
n)) Pi)/n) + x)]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"expand\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.6]], 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], 
                    RowBox[{"2", " ", "n"}]], 
                    PolynomialForm[#, TraditionalOrder -> False]& ]}]]}], 
                    ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.6]], 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "-", "k", "+", "1"}], ")"}]}], "+", "1"}], 
                    RowBox[{"2", " ", "n"}]], 
                    PolynomialForm[#, TraditionalOrder -> False]& ]}]]}], 
                    ")"}]}], ScriptLevel -> 0, StripOnInput -> False]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "i is the imaginary unit"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/I.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{"  ", "\"  \"", 
                  StyleBox[
                  "\[ImaginaryI]", FontFamily -> "Bitstream Charter", Bold, 
                   14, StripOnInput -> False], "\"is the imaginary unit\""}, 
                 "RowWithSeparators"], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Expand", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ExpandAll[(-E^(((I/2) (1 + 2 k) Pi)/n) + x) (-E^(((I/2) (1 + 2 (1 - \
k + n)) Pi)/n) + x)]"}], 
       XMLElement[
       "moutput", {}, {
        "E^(I Pi + ((2 I) Pi)/n) - E^(I Pi + (((3 I)/2) Pi)/n - (I k Pi)/n) x \
- E^(((I/2) Pi)/n + (I k Pi)/n) x + x^2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"-", 
                 RowBox[{"x", " ", 
                   SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", "k"}], 
                    "n"]}]}], "+", 
                    FractionBox[
                    RowBox[{"3", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}]}]]}]}], "-", 
               RowBox[{"x", " ", 
                 SuperscriptBox["\[ExponentialE]", 
                  RowBox[{
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", "k"}], "n"], 
                    "+", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]}]]}], "+", 
               SuperscriptBox["\[ExponentialE]", 
                RowBox[{
                  FractionBox[
                   RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]"}], "n"], 
                  "+", 
                  RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}]}]], "+", 
               SuperscriptBox["x", "2"]}], Identity], TraditionalForm]], 
          "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution"}, {}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Series expansion at x=0", "scanner" -> "Expand", "id" -> 
     "SeriesExpansionAtX = 0", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(E^(((-I/2) (-3 + 2 k) Pi)/n) + x) (-E^(((I/2) (1 + 2 k) \
Pi)/n) + x), {x, 0, 5}]"}], 
       XMLElement[
       "moutput", {}, {
        "SeriesData[x, 0, {-E^(((2 I) Pi)/n), E^(((-I/2) (-3 + 2 k) Pi)/n) - \
E^(((I/2) (1 + 2 k) Pi)/n), 1}, 0, 6, 1]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
                    "n"]]}], "+", 
                    RowBox[{"x", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "-", "3"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]}]], "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]]}], ")"}]}], "+", 
                    SuperscriptBox["x", "2"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "6"], ")"}], 
                    SeriesData[Global`x, 0, {}, 0, 6, 1], Editable -> 
                    False]}], 
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
                    "n"]]}], ",", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "3"}], "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]}]], "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]]}], ",", "1"}], "}"}], ",", "0", 
                    ",", "6", ",", "1"}], "]"}]}, "SeriesData", 
                    DisplayFunction -> (#& ), 
                    InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 StyleBox[
                  
                  RowBox[{
                   "\"(\"", "\[NoBreak]", "\"converges everywhere\"", 
                    "\[NoBreak]", "\")\""}], {
                  FontFamily -> "Verdana", FontSize -> 10, 
                   GrayLevel[0.5], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False], 
                 Global`TagBoxWrapper["Label"]]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionAtX = 0__More terms"}, {}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Series expansion at x=\[Infinity]", "scanner" -> 
     "Expand", "id" -> "SeriesExpansionAtX =Infinity", "position" -> "400", 
     "error" -> "false", "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(E^(((-I/2) (-3 + 2 k) Pi)/n) + x) (-E^(((I/2) (1 + 2 k) \
Pi)/n) + x), {x, Infinity, 5}]"}], 
       XMLElement[
       "moutput", {}, {
        "SeriesData[x, Infinity, {1, E^(((-I/2) (-3 + 2 k) Pi)/n) - E^(((I/2) \
(1 + 2 k) Pi)/n), -E^(((2 I) Pi)/n)}, -2, 6, 1]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    TemplateBox[{
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", 
                    RowBox[{"x", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "-", "3"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]}]], "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}], ")"}]}], 
                    RowBox[{"2", " ", "n"}]]]}], ")"}]}], "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]"}], "n"]], 
                    "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "x"], ")"}], "6"], ")"}], 
                    SeriesData[Global`x, 
                    DirectedInfinity[1], {}, -2, 6, 1], Editable -> False]}], 
                    
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "\[Infinity]", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "3"}], "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]}]], "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], " ", "\[Pi]"}], 
                    RowBox[{"2", " ", "n"}]]]}], ",", 
                    RowBox[{"-", 
                    SuperscriptBox["\[ExponentialE]", 
                    FractionBox[
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
                    "n"]]}]}], "}"}], ",", 
                    RowBox[{"-", "2"}], ",", "6", ",", "1"}], "]"}]}, 
                    "SeriesData", DisplayFunction -> (#& ), 
                    InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 StyleBox[
                  
                  RowBox[{
                   "\"(\"", "\[NoBreak]", 
                    "\"converges everywhere away from origin\"", "\[NoBreak]",
                     "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                   GrayLevel[0.5], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False], 
                 Global`TagBoxWrapper["Label"]]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionAtX =Infinity__More terms"}, {}]}]}], Typeset`pod5$$,
    Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, Typeset`pod9$$, 
   Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, 
   Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, 
   Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, 
   Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, 
   Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, 
   Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, 
   Typeset`pod34$$, Typeset`aux1$$ = {True, False, {False}, True}, 
   Typeset`aux2$$ = {True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`aux8$$ = {True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
     "Expand", "timedout" -> "InterestingMultiDimensionalDefiniteIntegrals", 
     "timedoutpods" -> "", "timing" -> "4.169", "parsetiming" -> "1.528", 
     "parsetimedout" -> "false", "recalculate" -> 
     "http://www4c.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa25372057f7b5iag9886b000069bc4428d2di2icc&s=59", "id" -> 
     "MSPa25382057f7b5iag9886b00006827bc5e6gg7ea9f", "host" -> 
     "http://www4c.wolframalpha.com", "server" -> "59", "related" -> 
     "http://www4c.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa25392057f7b5iag9886b00004bfd0f13f980f86c&s=59", "version" -> "2.6"}, {
    "success" -> "true", "error" -> "false", "numpods" -> "0", "datatypes" -> 
     "Expand", "timedout" -> "InterestingMultiDimensionalDefiniteIntegrals", 
     "timedoutpods" -> "", "timing" -> "2.902", "parsetiming" -> "0.", 
     "parsetimedout" -> "false", "recalculate" -> "", "id" -> "", "host" -> 
     "http://www4c.wolframalpha.com", "server" -> "59", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -8., 
    "Date" -> {2014, 2, 2, 16, 1, 12.753757`7.858213123913371}, "Line" -> 27, 
    "SessionID" -> 23770178463743537604}, Typeset`showpods$$ = {1, 2, 3, 4}, 
   Typeset`failedpods$$ = {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
   19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34}, 
   Typeset`chosen$$ = {
   "Result", "Results", 1, 1, "Input", 
    "ExpandAll[(-E^(((I/2) (1 + 2 k) Pi)/n) + x) (-E^(((I/2) (1 + 2 (1 - k + \
n)) Pi)/n) + x)]"}, Typeset`open$$ = True, Typeset`newq$$ = 
   "expand (x-E^(I *Pi* (2k+1)/(2n)))*(x-E^(I * Pi * (2(n-k+1)+1)/(2n)))"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{802., {760., 20.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$}, Typeset`chosen$$, Typeset`open$$,
          Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "http://www4c.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa25372057f7b5iag9886b000069bc4428d2di2icc&s=59", Typeset`asyncpods$$}]]; 
     Typeset`asyncpods$$ = {}; Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{
    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], "+", 
    FractionBox[
     RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]"}], "n"]}]], "-", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], "+", 
     FractionBox[
      RowBox[{"3", " ", "\[ImaginaryI]", " ", "\[Pi]"}], 
      RowBox[{"2", " ", "n"}]], "-", 
     FractionBox[
      RowBox[{"\[ImaginaryI]", " ", "k", " ", "\[Pi]"}], "n"]}]], " ", "x"}], 
  "-", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     FractionBox[
      RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], 
      RowBox[{"2", " ", "n"}]], "+", 
     FractionBox[
      RowBox[{"\[ImaginaryI]", " ", "k", " ", "\[Pi]"}], "n"]}]], " ", "x"}], 
  "+", 
  SuperscriptBox["x", "2"]}]], "Output",
 CellChangeTimes->{{3.600374432748226*^9, 3.600374472781932*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"Pi", "/", "8"}], ")"}], "/", "Degree"}], "]"}]], "Input",
 CellChangeTimes->{{3.600376570254318*^9, 3.600376588070807*^9}}],

Cell[BoxData["22.5`"], "Output",
 CellChangeTimes->{{3.6003765748621893`*^9, 3.600376588615058*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Conjugate", "[", 
  RowBox[{"E", "^", 
   RowBox[{"(", 
    RowBox[{"I", " ", "Pi", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"2", "k"}], " ", "+", " ", "1"}], ")"}], "/", 
      RowBox[{"(", 
       RowBox[{"2", "n"}], ")"}]}]}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.600376979370837*^9, 3.600377011789887*^9}}],

Cell[BoxData[
 SuperscriptBox["\[ExponentialE]", 
  RowBox[{"-", 
   FractionBox[
    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"2", " ", 
        RowBox[{"Conjugate", "[", "k", "]"}]}]}], ")"}]}], 
    RowBox[{"2", " ", 
     RowBox[{"Conjugate", "[", "n", "]"}]}]]}]]], "Output",
 CellChangeTimes->{{3.600376998503173*^9, 3.6003770124954967`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Expand", "[", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"x", "-", 
      RowBox[{"E", "^", 
       RowBox[{"(", 
        RowBox[{"I", " ", "Pi", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", "k"}], " ", "+", " ", "1"}], ")"}], "/", 
          RowBox[{"(", 
           RowBox[{"2", "n"}], ")"}]}]}], ")"}]}]}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{"x", "-", 
      RowBox[{"E", "^", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "I"}], " ", "Pi", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", "k"}], " ", "+", " ", "1"}], ")"}], "/", 
          RowBox[{"(", 
           RowBox[{"2", "n"}], ")"}]}]}], ")"}]}]}], ")"}]}], "]"}], "//", 
  "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.60037720493928*^9, 3.6003772064213743`*^9}, {
   3.600377367544257*^9, 3.600377405644422*^9}, 3.600377614505842*^9, {
   3.600377866407875*^9, 3.600377867036477*^9}}],

Cell[BoxData[
 RowBox[{"1", "+", 
  SuperscriptBox["x", "2"], "-", 
  RowBox[{"2", " ", "x", " ", 
   RowBox[{"Cos", "[", 
    FractionBox[
     RowBox[{"\[Pi]", "+", 
      RowBox[{"2", " ", "k", " ", "\[Pi]"}]}], 
     RowBox[{"2", " ", "n"}]], "]"}]}]}]], "Output",
 CellChangeTimes->{{3.600377390457683*^9, 3.6003774061821404`*^9}, 
   3.600377615928266*^9, 3.600377867709971*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"E", "^", 
    RowBox[{"(", 
     RowBox[{"I", " ", "Pi", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", "k"}], " ", "+", " ", "1"}], ")"}], "/", 
       RowBox[{"(", 
        RowBox[{"2", "n"}], ")"}]}]}], ")"}]}], "+", 
   RowBox[{"E", "^", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "I"}], " ", "Pi", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", "k"}], " ", "+", " ", "1"}], ")"}], "/", 
       RowBox[{"(", 
        RowBox[{"2", "n"}], ")"}]}]}], ")"}]}]}], "//", 
  "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.600377976873715*^9, 3.600377995273114*^9}}],

Cell[BoxData[
 RowBox[{"2", " ", 
  RowBox[{"Cos", "[", 
   FractionBox[
    RowBox[{"\[Pi]", "+", 
     RowBox[{"2", " ", "k", " ", "\[Pi]"}]}], 
    RowBox[{"2", " ", "n"}]], "]"}]}]], "Output",
 CellChangeTimes->{{3.6003779815225687`*^9, 3.600377995586688*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Cos", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"Pi", "+", 
        RowBox[{"2", "Pi"}]}], ")"}], "/", "2"}], "n"}], "]"}], "\[Equal]", 
   RowBox[{"Cos", "[", 
    RowBox[{"Pi", "/", "n"}], "]"}]}], "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.600379026111196*^9, 3.600379092411085*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Cos", "[", 
   FractionBox["\[Pi]", "n"], "]"}], "\[Equal]", 
  RowBox[{"Cos", "[", 
   FractionBox[
    RowBox[{"3", " ", "n", " ", "\[Pi]"}], "2"], "]"}]}]], "Output",
 CellChangeTimes->{{3.600379059321903*^9, 3.600379092878574*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", "1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Cos", "[", 
   FractionBox["\[Pi]", "n"], "]"}], "\[Equal]", 
  RowBox[{"Cos", "[", 
   FractionBox[
    RowBox[{"3", " ", "n", " ", "\[Pi]"}], "2"], "]"}]}]}], "Input",
 CellChangeTimes->{{3.600379119167123*^9, 3.600379129239946*^9}}],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.600379129869583*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "graph | 2 z + 3 | > 4, z in complex", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "InequalityPlot", "Inequality plot", 1, 1, "Input", 
        "Plot[{Abs[3 + 2 z], 4}, {z, -7.5, 4.5}]"}, "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    RowBox[{
                    TemplateBox[{
                    RowBox[{"3", "+", 
                    RowBox[{"2", " ", "z"}]}]}, "Abs"], ">", "4"}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {
        "text" -> 
         "\[LeftBracketingBar]z\[RightBracketingBar] is the absolute value of \
z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/Abs.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Abs", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/AbsoluteValue.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{"  ", "\"  \"", 
                  StyleBox[
                   TemplateBox[{"z"}, "Abs"], FontFamily -> 
                   "Bitstream Charter", Bold, 14, StripOnInput -> False], 
                  "\"is the absolute value of\"", 
                  StyleBox[
                  "z", FontFamily -> "Bitstream Charter", Bold, 14, 
                   StripOnInput -> False]}, "RowWithSeparators"], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Inequality plot", "scanner" -> "Plot", "id" -> 
     "InequalityPlot", "position" -> "200", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[{Abs[3 + 2 z], 4}, {z, -7.5, 4.5}]"}], 
       
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             GraphicsBox[{{{{}, {}, {
                  Hue[0.67, 0.6, 0.6], 
                  Directive[
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   AbsoluteThickness[1]], 
                  LineBox[CompressedData["
1:eJw11Xs41dkaB/DtGuWyf0JsmzbiR0xJLl2tN2RMNyS3GXI5NOVkNNUoaSoO
oaidKWNoHhQhRowOEdYSNS5JY9IM436bQmmwbWx09jn7d/5Yz2d9n+96n/Xn
qx8UfjBEmsViRYrPf/3HA/7kx4+6RCIN6iKO8fZFXSKRhganXN+IOV0ikQbj
3sqmiQ+6RCINY0pDdzsHdIlEGk6EWnuX1esSiTRcMOoiR+J1iUQa0jMMU1pV
dIlEGjL7EsLdFLlEojFovnR3MdXQIRKNoNHV3bHFiEMkrgNnU6PThgbaRKIh
bCv2vde2UYtINICFK0dWW5quIRL1QSDMuXWY1iQSeRBIfcbps9EgTwxSrGrD
9OB2DO7UsFQnW+QulpkFc8E5KyMjy2414YOt7a5vObDxQNFJgYsaOXzbe2Qs
UwtG3K/HsvZTpDlPT1EqXROU5P9I8/+CTbSUSjbhcnWQ5Y22vb2vQiSqwZFD
cWn5+UpEIhsKByZDVJtWEs/6vha9FGVI0vuYP0gUiNbOZben0Yrg+rDzg9+f
8iTraNnA43I5KJ33Lt7dKkuCpkt9r6ZLQYL/rtS6RmnCuyDnI28oQvZ6gpiR
URZRiHy1KjVjGlloZzSPP1rCJPj4+gdDoyjU9lXyTwVLOL/H1bb83ijK8VB2
C09fwnxPa8eaY6NoTcrF36eilrCv87Jfy+QIWl4ZPDxvt4TnzPg3/hINo+eL
5ssrni5ii+myubXqQ+hof+2mdb+KMMgIk/UTe9GdZeHMSJ0IswU4b6NqL+rm
bnqU97MI948m1O281YNcfO7amd0U4bPNHIFPdjeyaY/fa+klwiU37HxTKruQ
bINrCPQsYB7v8nqZsdcoO28wzfftPGafW3+t6dYL1KsSvhTaNY/73314/eBe
K+JGiAIjW+YxCaxYm1rxHKU6qpul/jSPAz5zLA3qbEZJA7tr2r4W91qHX4m4
v6CzOgUD9gtzmBVuaO3rjFF5jLWT2/gcJp4lz0xCa9D027r7/t1zOMBup7fg
6mP01aOuU+drxb2yV9S1tgoU7KEkXx4zhy8VXakTz6A71WmhDafE2WTjPc7f
RajP0KitPVj8XujcVGZVgD6f2pk26STuU8+rjj7ORmk+zYtLtuL/n5uHLC9n
oA7iGahkKu5DAwotLt9EaiZDTzkccf+/yxXkej18vekqcc7S6zt0MAJdmxVd
s10UYhZ/Ly/B4TBq8UuY3v1OnK3vnFGqikEKT9W9D/WK8/kfBb918JGTeXZ1
UJs49xx7kH0gDcV+94n+10Sc7WyOhf+SieoWKuMulgoxcYm+oZd1F+1oaj9w
+ztxX7p/74RWITpn4V92P1aILw1sNnHvKEYV34+vqfxGiHmKydI9zqXI8ojs
QIeXeH7rqT4HuX8jExmbU6pc8XwG+oG6UI0+Riw+FpjPYjZ/C+RYtKIqGZtY
zJ3FAQ2Z1SusXqDT/PB9iUqzmMzJb/2nbRt6UzDYzZ0QYFIypqWd+RK1dzcu
ORQK8AntSqo/tx3l2N9CKaYC3D/mIfNV2Wu0R2VD/QbjGVySfH008UUvSs31
b/5y7RTOPxb9OiDmLzSyqqzBvXgC68zs217kNo3Urm5tSYwaxu9PP7OKiBWh
DVpNs7zeP/BM5f4nZxql4Mcn0wvdD+txUXx2QHCiHBQF4W3RFZXIbLZw9dkM
RbjecmHmfVYHGv55bc32o8oQ6BdjWOwwiLy/708Y57MhPtVy1tJnDN3JTarZ
l6oGVHlX16qpD0jhi7B3cpHqkFt30CVXQYDaAwryDsZqwmkdq6r3nXOoSpnj
JzyuBV5WDi9V0xaRebr+mxX7OMA6E7tU6M5i5MLfCzoq+VukGfXAqU2lwNZJ
Fu5+Gf9Kx5AHRv9K0968Rx5Sdj1P0jbSB/1ez7jLZgrADi+0r9cwgEuJJ6LC
rFcCcXxUU84xhMU/a48XcZVgOczfxlNlHUir5Gz2WlAGqRXtP5gtrQMb55NP
9rDYjMaw0F30RmOKzWgMjscb+ftn2YzGkCwa2hK3wGY0Bh5HJ3FGmmKk4VOv
RNPfVlOMNNz8NSSUb00x0rDhmd7EykiKkYazHttu2n9LMdJQN+yx41w0xUjD
IZnkpLeJFCMNUSAyb0ynGGlorPo9LK6aYqRBbc+0Rg2hGGnw7VSpnWmgGGmY
FO5WCW6lGGnQtH5YbN9LMdIQ0NDmeW6QYqShwH18uXSUYqRhx0kDF/1JipGG
y1J2Qu9pipGGl3yfTL6QYqSBw/vm00YRxUiDZO9S8P/9+x9wZrIk
                   "]]}, {
                  Hue[0.9060679774997897, 0.6, 0.6], 
                  Directive[
                   RGBColor[0.6, 0.24, 0.4428931686004542], 
                   AbsoluteThickness[1]], 
                  LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQnbx+wvv//2UPMICBgEOd6q0Dae0I/qzZypPO8iH4
8+935AdyysD5YheC/TVFpeH8EwHBLqdVpeB8D03VEmUlSTjfal3MsvP6EnD+
r640YSNNcTj/6/clU+PUxeD8REFPqftmonD+nKb9N0WNRBDmL5g9e4GdMJyv
77em6Ku/EJz/NLi/hcFXEM7nYbsxIz5aAM5nUXh2/uUqPjg/LaR1xooVPHD+
6ofvU/lPcsH5PXL/Vzw6wAHnB2y5+SH2Nhucv/FnxDrXsyxwfke847SDJ5jg
fCe5r01PnzHA+QaSs0+93vF3P4y/cPmjGTEvf8L5/8v+7P6q8w3On7Y0/lS6
/Cc4/yn35iPB697A+ULdlqc7q5/A+XoSJ78p3LsB58899PnXnS2H4fw1Sfut
GrfvtIfx+0/XfXm34CqcnxjbpLzO+RGc3z7N6JtR5Cs4X3DbrVvcnz7A+UsP
Bvkv5fgK55dIm+x6d/MHnB9u4nyBf8YfOJ+hvOXv6mAGBxj/4y9pvhUWTHC+
23m+leZuLHC+avMMSWMvNjhf8V5Ya5s2B5zf0FlQnWvKBef/ub0vZ40MD5zP
xLfEOPwXL5xv5lF0yAvkDij/1501L0Q/Ifh6x+TecFUKwvmQ/ILgAwCard+4

                   "]]}}}, 
               GraphicsComplexBox[CompressedData["
1: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
LF0l8xb83U6s11T5+2GrT0g8WuoCfqG/WwY8PC/4+drqJ8tzHi89KX8P50Vj
gbeqQ1G/BH+3UfrzROky+V3wdwng+WzBbdjfd5TfVyCG86Y30C/vyf2Cv3tc
rl+JGPzdYvTjXOm7cD4wTp6zgztd7hv83Wj0++nCW8HfVeyNiOFkVyHPE86z
qsAnb8pzBX/3VyHWTu4tec7g77aDr24RnQvnD2Pkvqe4NfL8wd9tAR+2iO4F
f/eN6F4Xd4u8V/B3LeDbHXKf4O9Wq367MfLewd/NA5/P0n6w+lGq/663XC+c
t7VCL5q036z+sPoHd1x0JPi7YdCjvdrPVr9D/Qdi8HeroX/PKF+E51f/ghj3
dz3dQuUjq6d+rkI99TWJ807qr62v/KO+9jT93Ibno772BZ9Rf+39oZ+H8f7U
V4f9FfWX9dTPRswv9XUs+pX6y3rq50isH/V1Ks5zqb+sp37eBHxQX28Fv1J/
WU/9fBD4o74uxX6S+st66udrwDf1dS34ifrLeuqnxgbT1804n6b+sp762Yz+
pL6+A76n/hpeoZ8r0P/U18+wf6b+sp762dam/EJ9rQQfU38Nf9DPEeAv6msa
5+3UX9ZTP1eCH6mvZ0B/qL+sp35+KTFl+no+zguov6ynfl4EvFBfx0F/qL+s
p36uwvpQX6/H9wPqr60X9FNj0NfboIfUX5t/6Oco3J/6eh/OR6i/rKe+Mqee
3hPT2z/j99TPQZg/6uvtqKf+8nrUz1bghfo6A+9L/WU99fNO9Af19XK8D/WX
9dTPAeAD6usIrBf1l/XUzw/hn6iv/fA+1F/WUz/nw59RX/PAG/WX9dTPs+H/
qK+dgGfqL+upn+/BX1JfD6JfqL+sp37OhX+lvr6P+aX+sp76mYQ/pr5uQb9T
f1lP/dwP/019XQe8mv6invr5Avw99fV+8BX1l/XUzyXYP1Bff4f1pv6ynvo5
BfsT6uv14FvqL+upn0Ow/6G+/hT9Sf1lPfWzGvsr6usF0AvqL+upn3uxf6O+
ngn8UX9ZT/18BvtD6msa+kf9ZT31cyH2o/p36mva9Jf15foavlfIY69vtlx1
NhXb79a7V6GvGsP3CrWnzZbr9VOx/W4xprfh+4VM++wmy7U+Gdv/FmP6G75n
rJN1brRc9T8Z2w8XYnqct/MgefyhjZbr/ZKx/XE+ps/he8dBwVWD5fp+dbH9
ci6m1+H7x2LRoQbL9XnrYvvnbEy/w/eQScKrRct1fhKx/XQ2pufh+8jDwnMF
y/V9E7H9dcb1hL5rTNv3klbRubzlOr+J2H47bXqvMXw/aRGc5yzX+Qr6rzFl
+q8xfE+5RnCTsVzXJ/gBjUnzAxrD95VHha/Slut8B3+gMeyvNYbvLXtl3VOW
6/oGv6Ax7Lc1hu8vfURPkpbretWYf9AY9t8aa+188FpZtzrLFR/BT2gM+3GN
4fvMGumfcL6o6x38hcawP58j/Bu+1+yXeQ/nkYqv4Dcmy/pUm9/Q+Q7fb04T
XxbOLxUvwX/cI31dbeeZU2Wewvmm4jH4k+ekj4M/eRk5zz/n4PfMT8Pv98Gv
/An34/edIXg+5gk8H/3Lk3gf+pfpeF+epx7H/DA/gfkZDD8zH/NJPzMc883z
101YH+b7sD70N5dhPelvclhvntfOBj6YvwF8vAi/czbwRL/zBfDG891zgE/m
zwGf9D8nS0y4HvA/LwHvPA8+jP5g/ij6g37oPfQT/dBy9BvPj59CfzJfjP6k
P3oc/Ux/dB36nefNM8APzOeAH+iXbgOf0C8NBd/wfLof+In5ZPAT/dNPwGfl
/il8b2oDPzIfDX4sP89Ix/xU+P60DvzMfBD4ufx8Ix3zV+F71A3QB+a9oA/l
5x2ZmN/K2vn6UugT8x7Qp/Lzj2zMf4XvVYehj8yPQR/Lz0NyMT8Wvl/9GPrM
vBX6XH4+ko/5s/A962/wB8y3wx+Un5fkY34tfN9KwJ8w3wh/Un5+Uoj5t6J9
T5gBf8T8Ifij8vOUYszP1dv3h9fhz5gvhD8rP1+px98L/uey3s3mv6R9hjSb
n5LpXdVk/kjosUOTGwC/s0/w2uiugn+5Xa7bYH7kNOmHBvMX9wpf1rtW+IW3
ZZ4Kpv91si550/Oxwls50+elso5Z09u3BScZ08+U4DJlejhO9g1J07fl8mJ1
plc75T0Tpj8ZWd8a05Px8l7Vphd6/hD4XH19tfHzNpmgGuPbBcKjtcafF8l9
E8aHnSUmjd+2yHukjK9+L3yTNv4ZJvOSMT6plL9njR82yzznrd9/K/1ScGvQ
v/r/F4rWjycEj/XWX7ofbrB+eV6u12j4L8j6NBqelR+bDJ+7ZB6bDG+D5X7N
7gHsJ86N5bqfCPuH4epLbf/wLq7HfK/ixvA6Qc+lbL8wC8/D/Lj6WLcbeP6l
+lbbH2TwPsyrFIeG93l6jmX7gacxHxcjb1Gfa/5/hfpaNxP+fxzmk/lgxbX5
/fV67mV+/xDWg/kl6oPdQvTTFvW95u/7Yz2ZT9Y+cX9Hv+3SczL3Nfz8TOCB
+Rz1yebf29QXm3/fADwx1/1H8Oud9FzN/PpXbYpH5o+qj3aD0M8F9c3mzwcA
z8yf1T62fu+n53Dmx2eiHx5G/rr6bOODEeqrzX9vQD8xV74Kfvtnem5nfvuI
xOC/v9VofDJdfbf564HoZ+Y14F3yzXzwNP30LPDBJcj7YN9OPlqJvjkC//w0
+IT5edAF8tWT0BH65WNdlY+YX4pzBPLZy+hT8tm/oWP0v4+B3y5A3opx+t2p
4EPm23E98uF43I/+ti/4lPnTeF6ezw3D+9DP7gcfM38I80E+PRPzRf/6F/A5
80WYb57PUQfpV6+FHjCfhfUkH1fiXIT+tAV6wnwi8EK+/hx4oh/dAz1iPhJ4
JJ+/A7zSf66GnjEfALyT7zejH+g3J0IPmTegn6gHa9Fv9JeN0FPmp6JfqRdL
0c/0kx9Cj99C/hX4wPQEfEH/uBJ6zvwj8A394i/AR/SLZ8IPMH8FfEY9uhR8
R3+4CH6C+VPgS+pVCXw6G37wc/gR5ivBx9Sz74Ov6f8uhp9hPh98T71LQA/o
99bCDzH/FfSEengCekN/1xV+ivnl0Cvq5T7oGf0c/Rhz6iH19HXo5f8AkQv7
0w==
                "], {{{
                   EdgeForm[], 
                   Directive[{
                    Opacity[0.2], 
                    Hue[0.67, 0.6, 0.6]}], 
                   Hue[0.67, 0.6, 0.6, 0.15], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxFmnX8nsWxxWefH5oEEhyKBYq7U6SBYsFdihVtCG5FiwUI7sVdQ3B3J7gF
t3IpDRcockmDhZIS7vnmnHz4Y9/dmZ2dWXt2ds6+c+2876b7dFW1n34mUf5h
q7pa5f9R/rzoL5TfJPpz5S+JHqX8OtH/VP6C6E+VDxf9ifIXRX+t/FbR/6f8
ZdE/Kb9P9H+Uvxo7U/dU7av8a9HjxX9Q5Z+VvyZ6MpUfV5pU6Q3Rcyh/XWl2
pfdET6v8eaVplN4W3Uv5CKUpld4U/Y303KHyGOWviJ5a5WeUplJ6S3Sn/BGl
hl7Rv1E+UmkWpXdFz6j8JaUZlN4R/YP03K3y98pHip4bPUpzKb0vej7aKc2r
9HfR6yv/Vmk95kT02sr/rTRQ6X9Fb6z8B6WNlD4VvQxzqbS00j9Er6z8M6WV
4IteVfkXSqsojRL9O/QoLa/0kei+yp9T6pfxbc5cK22GHtGDlU+h+d5N+Vei
F1X+gdIirLHoHZV3qt8BO6L3Ut5b9J6soeg/Kv+v0lZK/xK9K2uj+l2Ufyl6
CeUfKi1OLno75b8obcueEb0GepRWV/pY9F9YO7U/UPlo0b9oXh9mA3Zef/bV
MGSzv/6h/FrGmv24h/K/ht68LHc9cxL5z5TfSF+zHw9VeXrZO4R1YD2Vjkz9
lip/qfwW5ib7+1vld4n+LvtntPLbaZv9/B+loyK/NftN6YjY37S872/r3A55
vpubO9tBP/vyzs520P9fpaOjf7vyd3RD53HQ/1+Ujkl/dijvw3tEj81+ZB8/
qtST/TyF+MdlPgeX+Y/xbaee7/B+lcfle5xU+bGssfI/l7/DhzqvC+uB3AOp
R55z4ZrO68J69FZ+fPTvCa38aaU++R7p570q/5j+Tq18KHtSaR/R04g+IfL7
l7/7J5Qm7/z9810/1Vkv+jrJD4m+nctyT0Yf8ocpn1HrfXjWm+/+2c7fCd8H
+2CGHstRz3f+stJM+d6nU/4ie6bz+TKT7JwU+pCy3CtKM0d+Vvat0mydzw/2
+ddKa2a/z672p6T+SNFzMg6l/p3Ps/mVv6+0QOfz47foVZqn8/nSX+1Pjfwx
nFeiT479w8vn0Nud2yHPOflGZzvo51x6r7OdCfrV/rToP6587r3aeRz0fz7V
n57+nCB6IdopLaz0Qfnc+URphc7nz+KSP0vl5ZTOLvM/VVpxYj17RWnJzufD
IpI/U+WllM4on3ujlJbtfP4h91Hqkeecf6HzurAeS6n92dF/rug/8C0qrdb5
fFxQ9WekvyeLXlb0OSoPULqA81P03yJ/cfmc/ZfS7zuft5yzX3bWi74J56TS
Yp3PS+Q+jz7kp5e+Ezufv38pr/topbWy/rsr76X9tkfn8xe/8J3SBp39wzrK
v1Fat7N/GCB954W+siz3vdKGkd+Eva+0aWf/sZLkz429yzhvRV+Q+mGit1A+
TmnLzv5ge+VN/flT5/N5a+XjlbbpfL4PVPsLI38D8yv6/Ni/puwHfu7cDnn8
zE+d7aCfc796bAf966r9RdF/c9nvje08Dvq/geov7tyf28p+qEftd+rsj/BD
fUTv3dkfbSn5yzrP5/1l/lSq3yf1+KXJRP+5s3/aTPKXqjxI6Z6yH5yyx+vC
eiA3eY/rkcdPj+m8LqzH1mp/eWf9D4k+iL0o+YM7+y/6OYnondPf7SR/hcoH
KD3KeERf2Vn+ifK9p6/k9+98/8EPTttjvejbWPKXdNZ3Z1muX4/1Ic938nHn
743vZWfJX9X5vHuqPDeDMzbm6Pv4p2/sEibc7/CfY9hL5fKHOcvxqdzvjki7
Lcr3O/zljyr/UWnG7Hf2/VTluk/jq/Cp3Bfxj+PYC+X7GP6rKd+pfD/E341X
+U9l2S/iG7+K7VHx5fhU5JDHT05a1ksb/DD31Rb9+MnJIvt1fC8+9cf08Qdv
ywmy38T34lMniT/Br0yOv4g/w6/1KvvS8fGFTCD3R+qR2xv/E/+JH52iXP4p
vhKf2Sv+GL88ZbkOGdrtVr6fMp/M68Fl3djAV+NTud/iH6dT/YHl+yj9pd+7
ln0pd2Z83xSRpQ2+Ep/aL/4Wv9u7rAcZ/G6fsq4f4pvxqegamnb7lcdO/xnH
HuW+0md8KWceZ/8y2YvsSe7n+MtZJH9YuQyPsxsfyv0a/zUba12+f+Mf52Rf
lOuQwbfOHDl4+L2+4i2c851zfvpyW3Tgu/CxxAv4y7mZ53IZHr4QHzpv/B9+
cNqyXXTgp/uV67jj40vxkQvEH+IXpyvf908P/6SynQn+Wfk0FdnOvhYfumAX
f4SceO82308+UL5R2RdOuEOXfd5i8Y/4yRkqY+3sexeO7JmRO0u8ZeIP8Ysz
ldeCNVkSP1fOofHTM5bXhTXhXjN1OZ6gPXrOx7/Fn+BXfiN6xfhL/OYs5fgE
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
Y2fjsu13Mz7w3v8HH1P8Ng==
                    "]]}]}, {}, {}, {}, {}}}]}, {
              GridLines -> Dynamic[
                 Map[{{#, 
                    GrayLevel[0.7]}}& , 
                  MousePosition[{"Graphics", Graphics}, None]]], 
               Method -> {"GridLinesInFront" -> True}, Epilog -> {
                 DynamicBox[
                  Typeset`ToBoxes[
                   
                   DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[1, {173, 2}, 3, CompressedData["
1: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
/9//m/vfpKCBpw==
                    "], CompressedData["
1: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
                    
                    "], CompressedData["
1:eJw9lQs41Okex8c1ijF/IcalkfgTp4tcunrfJGu7IbmdJeqoLSerrbb7VhyK
Sk22rKV9UIRIrA6peF+l1qXS2mqXlTtbKG2MwaAzZ+f/M88zz2c+zzv/mWf+
zzPfj/m2yE3blXk83k358//81y3xwKdPplRBFuvJhFbLx02pgiyucs8KOjBi
ShVksVVLWU3/B1OqIIt7tTqvNbabUgVZvCfcMaD4oSlVkMXHLZvojtOmVEEW
p6RaJD7lm1IFWZzWGhfprWlCFbTCBs99PG30jamClrjay8etzlJIFZyLPWws
91vMMaIKWuBlBUHX6xcYUgXn4LEzO2ba28yiCppjiTTz8hbWgCoowluZz4Wt
Tvr0wZxEh4oIM3wlmjTq2+vRJWonim3DTLBHempqustMKsbOzqu+FeIFG/P3
Sjx16ZYrAd29aYa42+dCDG8DQ2uzzTSVUgywlvrvySFfCKihVuEiUqKHVUU9
9W9v8KmCunjH5tjknBwtqqAA57UPbNepmU79HrbWmSVq43Nmn3I6qAY1XDnp
/ShKE3vdbvwQ/Ic6Td9Z3H6vRA0XjQYUrHmqSrcNFgWdTVHCcSGrkiqrlano
uFqguoUMuZpJort7eFTj8IsZSamDaKFRam3fnQlCw3bPu9XZg8KdXyTczJ0g
Oa+9nEuu96BMX23vyJQJIvZzdCvf1YNmJZ747ePRCRLkMRlcN9CNJqeHdY26
TJARW/HFP2Vd6Mm43eS0R+Nk4WDxyGy9TrSzrWLR3F9kBKtIE8zjW9DVSelQ
d6WMCCQke4FOC2o2WXQn+ycZaeuJq1x5+TXyDLzmYntJRg7VCiWBGc3IqeH0
Ont/GSm86BKUWNaEVKu8tuPXY0QkOjVPpfcVysjuSA56O0oER+adr7n8DLXw
IyfCm0ZJ27sPr25df4pMDsi2Hq4bJXRr6eyk0icoyU3PNunmKAn93K1oW2Mt
Ote+prz+a/m54ZYXMpOf0SHj3HbXsRHCi7RwDPIgqCTa0d27b4RQv8LH1uHl
aPBt5Y2Q5hES6rIyQHL2HvrqTtO+YxXyc23/o+frS1GYr5Z6SfQIOZl/plJ+
Dbp6Pzm8ap/crRdcF/6Vj1otLOsbwuTvl3rUFDvkon9+XJk84C4/Tzqm03Mv
AyUH1o5POMu//4nd9snJVPSS+m3VspGfh4fmLTx1Celadz4SCuXnf784g7wu
RM6zmSH3dLPWzZsOoPPDsvPO41LCE68Txa3eguqC4wbXvJO749WDWnejkcYj
vYDNLXI/9qPk15di5G6XcX9bvdxf77qVsTEZxXz3D/OvqdxdnHZF/pyGKsfK
Yk8USQn1jLpoln4Nrahp2HjlO/l50YZ1/YZ56MjCkOIbMVJysn2xtc/LAlT6
fd+ssm+kRKSZoPzaowjZ71Btf+kvv37pvtbVav9F1ipO+3RM5Nenoh+Y4/fR
pwPj9yR2w0QgXoIzFz5Fd1WcYojJMAmtSrs/zeEZ2i+OXB+vNUzoiPrSfzvX
oze5Hc0m/RJCC3sNjdKeo4bm6onVeRKyx6iMactqQJmul1GijYS09fqqfFX8
Cq3lz38432qIFCZc6Il/1oKSskJqv5z9keTsinoVGv0n6p5RXOVT0E+Mh9Yv
z/ceRLpnl9bFH+0i7/c/djgQI0PzDWuGRS2/k6GyDQ8OVivhHx8MjjXffkjy
T2eEhsWr4fxtZFlUaRmyHc6beShVE1+oOz70Pv0l6vppdvnyndp4a3C0RcHq
DhTwfVtcn1iATyfZD9sH9qKrWefK1yfpYqakqWnGxw9I44uId2qH9XBW5SbP
LA0JagjNzd4UY4D3Gzvcfd84gu5qC4Oluw2xv8Pq5zrJ48guxfzNtPVCzDsY
M5Hnw+Nogv8aM+bnLFHmaIbd6/m5zu6q+NqXp18YW4iw5X+SjRavVceJq56c
M7I0x+YtfrGnbDWwIDLP9aH+HHwyfs/RCMfpmLrdKS8RWuDxPyp255to4cmI
ECc//lyszM9c7D+mjZWmNfxgOzEXO3nsfbCWJ+Bohcea89/ofxRwtMJuu6vF
G4YFHK1wgqxzSeyYgKMVFgmN44eUGY4s/sw/3ubXmQxHFl/6ZXu42JHhyOL5
j836px9mOLL4kO+yS67fMhxZXNnlu+JIFMORxZtVEs69jWc4svgoltlVpzAc
WVx997eI2PsMRxbrrh3UL6cMRxYHNfIrhqoYjiwekK7hhz1lOLLYwPF2gWsL
w5HFoVX1fkc6GI4szvXpmyzqYTiyeMXeOZ7mAwxHFp9ScpEGDDIcWfxcHJgm
ljIcWSwUffNZtYzhyGJFdxkM/YUe8/5+CKb6CQ79BId+gkM/waGf4NBPcOgn
OPQTHPoJDv0Eh35OfT7XT3DoJzj0Exz6CQ79BId+gkM/waGf4NBPcOgnOPQT
HPoJDv0Ehx6Bw76Bw/5M/T5uf8Bhf8Bhf8Bhf8Bhf8Bhf6buP7c/4LA/4LA/
4LA/4LA/4LA/4FP7wznsDzjsDzjsDzjsDzjsDzjsDzjsDzjsDzjsz9T94/YC
HP4/4P8DHPOQPQ==
                    "], Automatic, 
                    Hold[
                    Nearest[CompressedData["
1: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
                    
                    "] -> CompressedData["
1:eJw9lQs41Okex8c1ijF/IcalkfgTp4tcunrfJGu7IbmdJeqoLSerrbb7VhyK
Sk22rKV9UIRIrA6peF+l1qXS2mqXlTtbKG2MwaAzZ+f/M88zz2c+zzv/mWf+
zzPfj/m2yE3blXk83k358//81y3xwKdPplRBFuvJhFbLx02pgiyucs8KOjBi
ShVksVVLWU3/B1OqIIt7tTqvNbabUgVZvCfcMaD4oSlVkMXHLZvojtOmVEEW
p6RaJD7lm1IFWZzWGhfprWlCFbTCBs99PG30jamClrjay8etzlJIFZyLPWws
91vMMaIKWuBlBUHX6xcYUgXn4LEzO2ba28yiCppjiTTz8hbWgCoowluZz4Wt
Tvr0wZxEh4oIM3wlmjTq2+vRJWonim3DTLBHempqustMKsbOzqu+FeIFG/P3
Sjx16ZYrAd29aYa42+dCDG8DQ2uzzTSVUgywlvrvySFfCKihVuEiUqKHVUU9
9W9v8KmCunjH5tjknBwtqqAA57UPbNepmU79HrbWmSVq43Nmn3I6qAY1XDnp
/ShKE3vdbvwQ/Ic6Td9Z3H6vRA0XjQYUrHmqSrcNFgWdTVHCcSGrkiqrlano
uFqguoUMuZpJort7eFTj8IsZSamDaKFRam3fnQlCw3bPu9XZg8KdXyTczJ0g
Oa+9nEuu96BMX23vyJQJIvZzdCvf1YNmJZ747ePRCRLkMRlcN9CNJqeHdY26
TJARW/HFP2Vd6Mm43eS0R+Nk4WDxyGy9TrSzrWLR3F9kBKtIE8zjW9DVSelQ
d6WMCCQke4FOC2o2WXQn+ycZaeuJq1x5+TXyDLzmYntJRg7VCiWBGc3IqeH0
Ont/GSm86BKUWNaEVKu8tuPXY0QkOjVPpfcVysjuSA56O0oER+adr7n8DLXw
IyfCm0ZJ27sPr25df4pMDsi2Hq4bJXRr6eyk0icoyU3PNunmKAn93K1oW2Mt
Ote+prz+a/m54ZYXMpOf0SHj3HbXsRHCi7RwDPIgqCTa0d27b4RQv8LH1uHl
aPBt5Y2Q5hES6rIyQHL2HvrqTtO+YxXyc23/o+frS1GYr5Z6SfQIOZl/plJ+
Dbp6Pzm8ap/crRdcF/6Vj1otLOsbwuTvl3rUFDvkon9+XJk84C4/Tzqm03Mv
AyUH1o5POMu//4nd9snJVPSS+m3VspGfh4fmLTx1Celadz4SCuXnf784g7wu
RM6zmSH3dLPWzZsOoPPDsvPO41LCE68Txa3eguqC4wbXvJO749WDWnejkcYj
vYDNLXI/9qPk15di5G6XcX9bvdxf77qVsTEZxXz3D/OvqdxdnHZF/pyGKsfK
Yk8USQn1jLpoln4Nrahp2HjlO/l50YZ1/YZ56MjCkOIbMVJysn2xtc/LAlT6
fd+ssm+kRKSZoPzaowjZ71Btf+kvv37pvtbVav9F1ipO+3RM5Nenoh+Y4/fR
pwPj9yR2w0QgXoIzFz5Fd1WcYojJMAmtSrs/zeEZ2i+OXB+vNUzoiPrSfzvX
oze5Hc0m/RJCC3sNjdKeo4bm6onVeRKyx6iMactqQJmul1GijYS09fqqfFX8
Cq3lz38432qIFCZc6Il/1oKSskJqv5z9keTsinoVGv0n6p5RXOVT0E+Mh9Yv
z/ceRLpnl9bFH+0i7/c/djgQI0PzDWuGRS2/k6GyDQ8OVivhHx8MjjXffkjy
T2eEhsWr4fxtZFlUaRmyHc6beShVE1+oOz70Pv0l6vppdvnyndp4a3C0RcHq
DhTwfVtcn1iATyfZD9sH9qKrWefK1yfpYqakqWnGxw9I44uId2qH9XBW5SbP
LA0JagjNzd4UY4D3Gzvcfd84gu5qC4Oluw2xv8Pq5zrJ48guxfzNtPVCzDsY
M5Hnw+Nogv8aM+bnLFHmaIbd6/m5zu6q+NqXp18YW4iw5X+SjRavVceJq56c
M7I0x+YtfrGnbDWwIDLP9aH+HHwyfs/RCMfpmLrdKS8RWuDxPyp255to4cmI
ECc//lyszM9c7D+mjZWmNfxgOzEXO3nsfbCWJ+Bohcea89/ofxRwtMJuu6vF
G4YFHK1wgqxzSeyYgKMVFgmN44eUGY4s/sw/3ubXmQxHFl/6ZXu42JHhyOL5
j836px9mOLL4kO+yS67fMhxZXNnlu+JIFMORxZtVEs69jWc4svgoltlVpzAc
WVx997eI2PsMRxbrrh3UL6cMRxYHNfIrhqoYjiwekK7hhz1lOLLYwPF2gWsL
w5HFoVX1fkc6GI4szvXpmyzqYTiyeMXeOZ7mAwxHFp9ScpEGDDIcWfxcHJgm
ljIcWSwUffNZtYzhyGJFdxkM/YUe8/5+CKb6CQ79BId+gkM/waGf4NBPcOgn
OPQTHPoJDv0Eh35OfT7XT3DoJzj0Exz6CQ79BId+gkM/waGf4NBPcOgnOPQT
HPoJDv0Ehx6Bw76Bw/5M/T5uf8Bhf8Bhf8Bhf8Bhf8Bhf6buP7c/4LA/4LA/
4LA/4LA/4LA/4FP7wznsDzjsDzjsDzjsDzjsDzjsDzjsDzjsDzjsz9T94/YC
HP4/4P8DHPOQPQ==
                    "]]]][#/{12., 11.999999510204082`}]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     1]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                    TraditionalForm, Graphics]]}, AspectRatio -> 
               NCache[GoldenRatio^(-1), 0.6180339887498948], 
               PlotRange -> {{-7.5, 4.5}, {0., 11.999999510204082`}}, 
               AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
               Axes -> True, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
               BaseStyle -> {CellBaseline -> Baseline}, FrameTicksStyle -> 
               Directive[FontFamily -> "Times", FontSize -> 10], 
               LabelStyle -> {FontFamily -> "Verdana", FontSize -> 10}, 
               Method -> {}, 
               PlotRange -> {{-7.5, 4.5}, {0., 11.999999510204082`}}, 
               PlotRangeClipping -> True, PlotRangePadding -> {
                 Scaled[0.02], 
                 Scaled[0.02]}, Prolog -> {
                 Opacity[0], 
                 TagBox[
                  RectangleBox[
                   Scaled[{0, 0}], 
                   Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
               TicksStyle -> 
               Directive[FontFamily -> "Times", FontSize -> 10]}], 
             Antialiasing -> True, StripOnInput -> False], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Number line", "scanner" -> "Plot", "id" -> 
     "NumberLine", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{{
                  RGBColor[0.24720000000000014`, 0.24, 0.6], {
                   Thickness[Large], 
                   Arrowheads[{0.03}], 
                   
                   ArrowBox[{{-3.5, 0.3960000000000001}, {-10.5, 
                    0.3960000000000001}}]}, 
                  TagBox[
                   TooltipBox[{
                    PointSize[0.02], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    PointBox[{-3.5, 0.3960000000000001}], 
                    PointSize[0.01], 
                    GrayLevel[1.], 
                    PointBox[{-3.5, 0.3960000000000001}]}, 
                    RowBox[{"-", "3.5`"}]], 
                   Annotation[#, -3.5, "Tooltip"]& ]}, {
                  RGBColor[0.24720000000000014`, 0.24, 0.6], {
                   Thickness[Large], 
                   Arrowheads[{0.03}], 
                   
                   ArrowBox[{{0.5, 0.3960000000000001}, {1.5, 
                    0.3960000000000001}}]}, 
                  TagBox[
                   TooltipBox[{
                    PointSize[0.02], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    PointBox[{0.5, 0.3960000000000001}], 
                    PointSize[0.01], 
                    GrayLevel[1.], 
                    PointBox[{0.5, 0.3960000000000001}]}, "0.5`"], 
                   Annotation[#, 0.5, "Tooltip"]& ]}}}, {
               GridLines -> Dynamic[
                  Map[{{#, 
                    GrayLevel[0.7]}}& , 
                   MousePosition[{"Graphics", Graphics}, None]]], 
                Method -> {"GridLinesInFront" -> True}, ImageSize -> 300., 
                Axes -> {True, False}, AxesStyle -> {}, 
                PlotRange -> {{-11.100000000000001`, 2.1000000000000005`}, 
                  Automatic}, AxesOrigin -> {0, 0}}], "\"\""}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Right", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "graph | 2 z + 3 | > 4, z", "score" -> "0.65625", "level" -> 
        "high"}, {}]}]}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> "4.111", 
    "parsetiming" -> "0.369", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa1472006g1icg0c0g34400004c0h6309e9b51i28", "host" -> 
    "http://www5a.wolframalpha.com", "server" -> "47", "related" -> "", 
    "version" -> "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -8., 
    "Date" -> {2014, 2, 2, 22, 6, 9.351674`7.723464345587274}, "Line" -> 48, 
    "SessionID" -> 23770178463743537604}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "InequalityPlot", "Inequality plot", 1, 1, "Input", 
    "Plot[{Abs[3 + 2 z], 4}, {z, -7.5, 4.5}]"}, Typeset`open$$ = True, 
   Typeset`newq$$ = "graph | 2 z + 3 | > 4, z in complex"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{560., {672., 19.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJw11Xs41dkaB/DtGuWyf0JsmzbiR0xJLl2tN2RMNyS3GXI5NOVkNNUoaSoO
oaidKWNoHhQhRowOEdYSNS5JY9IM436bQmmwbWx09jn7d/5Yz2d9n+96n/Xn
qx8UfjBEmsViRYrPf/3HA/7kx4+6RCIN6iKO8fZFXSKRhganXN+IOV0ikQbj
3sqmiQ+6RCINY0pDdzsHdIlEGk6EWnuX1esSiTRcMOoiR+J1iUQa0jMMU1pV
dIlEGjL7EsLdFLlEojFovnR3MdXQIRKNoNHV3bHFiEMkrgNnU6PThgbaRKIh
bCv2vde2UYtINICFK0dWW5quIRL1QSDMuXWY1iQSeRBIfcbps9EgTwxSrGrD
9OB2DO7UsFQnW+QulpkFc8E5KyMjy2414YOt7a5vObDxQNFJgYsaOXzbe2Qs
UwtG3K/HsvZTpDlPT1EqXROU5P9I8/+CTbSUSjbhcnWQ5Y22vb2vQiSqwZFD
cWn5+UpEIhsKByZDVJtWEs/6vha9FGVI0vuYP0gUiNbOZben0Yrg+rDzg9+f
8iTraNnA43I5KJ33Lt7dKkuCpkt9r6ZLQYL/rtS6RmnCuyDnI28oQvZ6gpiR
URZRiHy1KjVjGlloZzSPP1rCJPj4+gdDoyjU9lXyTwVLOL/H1bb83ijK8VB2
C09fwnxPa8eaY6NoTcrF36eilrCv87Jfy+QIWl4ZPDxvt4TnzPg3/hINo+eL
5ssrni5ii+myubXqQ+hof+2mdb+KMMgIk/UTe9GdZeHMSJ0IswU4b6NqL+rm
bnqU97MI948m1O281YNcfO7amd0U4bPNHIFPdjeyaY/fa+klwiU37HxTKruQ
bINrCPQsYB7v8nqZsdcoO28wzfftPGafW3+t6dYL1KsSvhTaNY/73314/eBe
K+JGiAIjW+YxCaxYm1rxHKU6qpul/jSPAz5zLA3qbEZJA7tr2r4W91qHX4m4
v6CzOgUD9gtzmBVuaO3rjFF5jLWT2/gcJp4lz0xCa9D027r7/t1zOMBup7fg
6mP01aOuU+drxb2yV9S1tgoU7KEkXx4zhy8VXakTz6A71WmhDafE2WTjPc7f
RajP0KitPVj8XujcVGZVgD6f2pk26STuU8+rjj7ORmk+zYtLtuL/n5uHLC9n
oA7iGahkKu5DAwotLt9EaiZDTzkccf+/yxXkej18vekqcc7S6zt0MAJdmxVd
s10UYhZ/Ly/B4TBq8UuY3v1OnK3vnFGqikEKT9W9D/WK8/kfBb918JGTeXZ1
UJs49xx7kH0gDcV+94n+10Sc7WyOhf+SieoWKuMulgoxcYm+oZd1F+1oaj9w
+ztxX7p/74RWITpn4V92P1aILw1sNnHvKEYV34+vqfxGiHmKydI9zqXI8ojs
QIeXeH7rqT4HuX8jExmbU6pc8XwG+oG6UI0+Riw+FpjPYjZ/C+RYtKIqGZtY
zJ3FAQ2Z1SusXqDT/PB9iUqzmMzJb/2nbRt6UzDYzZ0QYFIypqWd+RK1dzcu
ORQK8AntSqo/tx3l2N9CKaYC3D/mIfNV2Wu0R2VD/QbjGVySfH008UUvSs31
b/5y7RTOPxb9OiDmLzSyqqzBvXgC68zs217kNo3Urm5tSYwaxu9PP7OKiBWh
DVpNs7zeP/BM5f4nZxql4Mcn0wvdD+txUXx2QHCiHBQF4W3RFZXIbLZw9dkM
RbjecmHmfVYHGv55bc32o8oQ6BdjWOwwiLy/708Y57MhPtVy1tJnDN3JTarZ
l6oGVHlX16qpD0jhi7B3cpHqkFt30CVXQYDaAwryDsZqwmkdq6r3nXOoSpnj
JzyuBV5WDi9V0xaRebr+mxX7OMA6E7tU6M5i5MLfCzoq+VukGfXAqU2lwNZJ
Fu5+Gf9Kx5AHRv9K0968Rx5Sdj1P0jbSB/1ez7jLZgrADi+0r9cwgEuJJ6LC
rFcCcXxUU84xhMU/a48XcZVgOczfxlNlHUir5Gz2WlAGqRXtP5gtrQMb55NP
9rDYjMaw0F30RmOKzWgMjscb+ftn2YzGkCwa2hK3wGY0Bh5HJ3FGmmKk4VOv
RNPfVlOMNNz8NSSUb00x0rDhmd7EykiKkYazHttu2n9LMdJQN+yx41w0xUjD
IZnkpLeJFCMNUSAyb0ynGGlorPo9LK6aYqRBbc+0Rg2hGGnw7VSpnWmgGGmY
FO5WCW6lGGnQtH5YbN9LMdIQ0NDmeW6QYqShwH18uXSUYqRhx0kDF/1JipGG
y1J2Qu9pipGGl3yfTL6QYqSBw/vm00YRxUiDZO9S8P/9+x9wZrIk
     "]]}, 
   {Hue[0.9060679774997897, 0.6, 0.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQnbx+wvv//2UPMICBgEOd6q0Dae0I/qzZypPO8iH4
8+935AdyysD5YheC/TVFpeH8EwHBLqdVpeB8D03VEmUlSTjfal3MsvP6EnD+
r640YSNNcTj/6/clU+PUxeD8REFPqftmonD+nKb9N0WNRBDmL5g9e4GdMJyv
77em6Ku/EJz/NLi/hcFXEM7nYbsxIz5aAM5nUXh2/uUqPjg/LaR1xooVPHD+
6ofvU/lPcsH5PXL/Vzw6wAHnB2y5+SH2Nhucv/FnxDrXsyxwfke847SDJ5jg
fCe5r01PnzHA+QaSs0+93vF3P4y/cPmjGTEvf8L5/8v+7P6q8w3On7Y0/lS6
/Cc4/yn35iPB697A+ULdlqc7q5/A+XoSJ78p3LsB58899PnXnS2H4fw1Sfut
GrfvtIfx+0/XfXm34CqcnxjbpLzO+RGc3z7N6JtR5Cs4X3DbrVvcnz7A+UsP
Bvkv5fgK55dIm+x6d/MHnB9u4nyBf8YfOJ+hvOXv6mAGBxj/4y9pvhUWTHC+
23m+leZuLHC+avMMSWMvNjhf8V5Ya5s2B5zf0FlQnWvKBef/ub0vZ40MD5zP
xLfEOPwXL5xv5lF0yAvkDij/1501L0Q/Ifh6x+TecFUKwvmQ/ILgAwCard+4

     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  Method->{},
  PlotRange->{{-7.5, 4.5}, {0., 11.999999510204082`}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{3.600396301138918*^9, 3.6003963695650473`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "plot 0 <= Arg(z) <= pi/4", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "InequalityPlot", "Inequality plot", 1, 1, "Input", 
        "Plot[{z, Pi}, {z, -1 + Pi, 1 + Pi}]"}, "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"z <= Pi"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"z", "\[LessEqual]", "\[Pi]"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Inequality plot", "scanner" -> "Reduce", "id" -> 
     "InequalityPlot", "position" -> "200", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[{z, Pi}, {z, -1 + Pi, 1 + Pi}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox[
               GraphicsBox[{{{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJxNxW0sFHAAB+A7zrkc4ZIPpew4YXdko8SpeZ3TmLtb5qXY5Nx2itPFqFyY
11FH6mrtkhpmYaaluxaR6mq5fDimOTYbKmuSxIRcbx/6/+7Ds4d9Wi7OtqJQ
KAl//Tu+eTD1J5sa/v8Bf/73ME/Me66ru8zBzPnefqo3HvFp3cfgYUFfzazL
YRxlEMr8j+PQzbniTAWeDx421b3Fzkd9Gpb2WJG5rPEmXQ6mjARPRg/jNIGX
gsmyJssfvEtQy/C5KV1R9RDeMHLXex1p5NDuVO1dKaYmOBn0Otz3zM7/hK0N
2cN5aKw9He/mbhsCevBL71V6qQ2dnLHm1xh0EitrVnI9u3CKOe/qBNWWrAsp
pA6L8VjKIZ28E5tiQ/qrKAxytlm/a0KIu9X2PQsduHht+k7gJg7wXDZ9Euwg
twYNpKS3YI09i+fwDSe+YUeUxdqRl0WFbWnN2KVVdCpvCa+9X0iKiWaSU430
tiQ17tTIwkc/YK2gej+Db0+OHeCKSurxdVa9/tEclhw8r+IEOZA93Fratyuw
ZrHy160pfLt8tessdydZvLVXQ6vAPyJrJ61NmC1W5oT5OpLp0bxjR8pw/naW
NNeIs17Iv1Y6OZEXi+pG+vhY2/hZSJXgJWVU5GOLOWeaA2XZuClG5GqU4ryt
J9P3ZNhLUisNl+Mbwd4lpRexgVOeG3gJW7GmMxYszv+iikhU4vj763T3MmzN
fH1tsAqHbrhXKKpx/scLBQdq8MyQX7KqFj8tULtl1OOVzGUH1hXskxj3W2/x
TV/zrJ8Kj7omj89aTKM9fKVuwPwVO21cI1bMSDrMFv8BdiTpCg==
                    
                    "]]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    RGBColor[0.6, 0.24, 0.4428931686004542], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQ7TN3X+RvRUYHCV2XkN+KnA7OpwMy9bwQfKufjyoS
ixD8x+YHb3adRPAFbTX630oxwfnaQpcnbc9C8BlOmd9wOYjgR3moFnELMcP5
+SvP+E7NRPALb20vb9uP4P+4qP1tAz8Lwj1rIrfNS0PwGX0FTh/djuBv2cul
F8LOCucrCe6/tDQWwRfV/nPaYB2Cf1j9M1s9KxucH/dFd4JJNIJf2/4xV3k1
gh/xN6/3KiM7nL/dspTxYBCCfynCdHv+KgT/prvl7lYGDjg/9e9R4asBCP6a
qTzrni9H8Cu+3J5j/BPBN1B+f/OZByecv9hkT0TsfAR/No+QDu8HBN//uKJj
gzsXnP8+sHRJ1FwEX2RxYEzeWwT/y7Xnoa4u3HB+5EW2JaFTEfxVszMdzj5B
8Ld5tMlxWPPA+e57tANruhH8yULdRzc/QvBT9Iv7VEx4EfEhM3/pn2YEf/br
ln/TbyH4Mxs/r87R5oPzg35Jz2ZpRvC/O3XcYL6J4CsG1WbZaPLD+WwuOnYW
DQh+wZ/ktNyLCH7yofx3LQICcP7r8q5TW6wR/G0TXgYwpiD4U8zVa+qrEPyi
eynL/05A8AGfeR3V
                    "]]}}}, 
                 GraphicsComplexBox[CompressedData["
1:eJx1mH2wllUVxbn3fZ8PkCESFE0oYJRBFEtIIWLwCS0gQJTIkEgTRfMjMDRC
0URJQ0JSCxRINCJklEQEEw0ZY/ADDUlklCEDCowQdciQSQrJzl6/vYc7+c9d
s8/d7/s+z9lrr7XP6TRm/PCxjc2aNfvaR3/+h8d0P2vEvzs1VOCKhjXrL7ss
8JzXzhiwaUng2w89/Uz1XuC0m77Y5ze9Gh2PH/Hk8mNvDHyma6/ut60JHH1w
xaL3iprjv17p0fHCoYE/X/TonJfuDvzc5FPa9N4c+IdhS2Ys7FB3/M7x3fJP
XhxY/+DBm25cHPjA+hM+2P1OYN8Fv5pwXs/McfPETm+vmRR47eD7x352dWDr
jh22zavljkv2zR1ZDgocuO6YjdfODNx53+zBf3k1cMqEts8OPbZwbD/g7n5P
XRC48rjWK7ssDByx945Tf7Y7cO/aIx4+dErpOGPO7cdfdW1g13HF/M1PBq7t
f2u7Lx8KPLy+zb2uxNSVmLoSU1di6kpMXYmpKzF1JaauxNSVmLoSU1di6kpM
XYmpKzF1JaauxNSVmLoSU1di6kpMXYmpKzF1JaauxNSVmLoSU1fiw+vavLq0
Xe2uZWc1OFJfizNfJ/9wPmRV49tTWnx6eoMjfLDvif/z+fnPfDh1+oYGR/hi
eZmvk99n1g0H97dtdIRP9juZr5P/2uUHJl48qtERvtn3Zr5O/oR+k/ZuuL/R
ET7ac2W+Tn6rNvsv7/tmoyN8tefIfZ38h3Zds2Nxt5ojfLb3yH2d/K+s+sfo
o66uOcJ3e+7c18n/653jX7v58Zoj/WDvnfs6+T8c+86wdw/UHOkXe8/c18n/
VJ8r142q6o70k+1T7uvk/7bV7v7P31p3pN9sX3JfJ3/4jktX9Xyp7kg/2r4W
vk7+u0/sPO2B1pkj/Wr7WPg6+dNnjFna8rzMkX62OhS+Tn6Xi7Z3vW5e5ki/
274Xvk7+mtMuWPDm9swRPbC6Fb5O/gUt3jhueJfcEb2wOhW+Tv6BrefPWn1l
7oieWJ0LXyd/9vLXW520LHdEb6yuha+T32Pa16fdsz93RI+MF6Wvk//y6Fcb
6n0LR/TKeFD6OvlXnHru5KtvLhzRM+NR6evk5/mGfW88Vziid8ab0tfJX7Bl
yLhBLUtH9NB4F+vk91v64q7Hzy0d0UvjWayTv2XqwIs631M6oqfG01gnf+LI
57bMfKN0RG+Nl/F/8o/8GGyqz2eI5+jpHeItevkn8Ro9PFE8Re9+IB6jZ8+K
l+hVG/EWPbpIPERvlh7G01p1ULxDLwaLl+jBHPGMft8lHtLPp4lX9OtU8Y5+
fEU8ot8+I57RT98Vb+iX34lX9ENz8QS+f0M8gs+/Fi/g6z/FG/j4JfEAvv1U
PIFPf1bd4ctJ4gV8uK4JD54XD6jvUUKra4Mj/mv1rQk/zn8L1b3BEf81ntTE
g/i88aDBEf+1uCZeRL7xotER/7XPwZPwO+NJoyP+a3l18SbyjTeNjviv8RYe
Rb7xqNER/7XPw6vIN17VHPFf+526eBZ+ZzyrOeK/9r118S7yjXc1R/zX+igT
DyPfeFhzxH/t9zLxMvzOeFl3xH/tuTLxNPKNp3VH/NeeIxNvI994W3fEf62v
M/E48o3HdUf8154vF6/D7y7WHAniv/YeebVMcyL5h/bYHAjiv/bceTVUcx/5
8zTXgfiv6Uxe7dYcR34vzWkg/mvvk1e3ai4j/1XNXSD+a+9dVJ00Z5E/XnMU
iP/aexbV05qbyD9CcxGI/5ruFdX5moPIf1BzDoj/2vsX1fuaa8g/U3MLiP/a
PpXVXZpTyN+mOQTEf21fyqq75g7yJ2uuAPFf0+GyWqc5gvx2mhNA/Nf2q6zG
ai4gf7l8H8R/bV/LqkE+T/4w+TiI/9o+Nq/uk2+Tv0e+DKK3IHp8huqNTv9/
PQ69BdFj8/HQaz6P3oLosf1+4TpNPnoLoscrxC90mnz0FkSP7TkK12ny0VsQ
PTY/KVynyUdvQfT4RPEXnSYfvQXRY9unwnWafPQWRI9tXwrXafLRWxA9nq/+
QKfJR29B9NjqUbhOk4/eguix1a1wnSYfvQXR4zbqP3SafPQWRI9tritdp8lH
b0H02PhRuk6Tj96C6PE09Tc6TT56C6LHxpvSdZp89BZEj83PS9dp8tFbED0+
KP1Ap8lHb0H02Hhduk6Tj96C6LHxuHSdJh+9BdHjCdIndJp89BZEj61/Stdp
8tFbED22Pitdp8lHb0H0eJf0D50mH70F0WOb80vXafLRWxA9tn4OnSYfvQXR
49HSV3SafPQWRI+tz0Ovm+oxMTq8MelF3EdtlH4QL9E+o89LNH+hwx01X3F+
GqhzDfFGnQPQ5wOpnpnr8rikP3HeWiUdIT6g+qPX9v2Z67Tlx/msh3SJuKN4
g37P1nyHbrfQ/MZ5bpH0inigeIOe70y8yFzHRybexPmvvc5pxON07kHf7fky
13X7vbjfulO6RTxbfEbvp2h+ROf3aT7kfJlLB4lXqQ/Q/5cTf3PX/f5Jb+M8
er30kXin+gA/sPfL3QfseeP8ulfnTuIWOufhD1doPsUXtmr+5Lx7iXSSuIf6
E79Ymfogd584OfVJnI+3SHeJR6qv8Q/bn9x9w943ztNnS4+Jp6iv8ZMRmn/x
kRc033L+XqtzNPEinWvxlwWpX2OeP1rnTc7rvaXLxC9Lb/Ab29/CfeYSzT+c
7x+RzhPvk07hP/00b+E7j2m+4T6gs/SfuL10Cj+aofkJH2qm+YX7g3t1L0Dc
X+d4/GmL5iN86WzNJ9w3tJQPEF8h/cSvumr+wad+ofmD+4lb5CvEd0p38a+J
mm/wrbc0X3CfsV96Q7xSuoufrdX8go/11vzA/cdV6nfirbq3wN+O1HyCr92m
+YD7ku3qN+JcfoDffVvzBz63Sf7P/cp54jvxyfIR/O8RzRf4Xmf5O/cxL4pv
fk8oH8EP/9Pk/HG1/Jv7m0r1Jr5e9zT441c1H+CLq+XP3Pes0H4TL5C/4Zf3
yv/xyZbyX+6HujW5L3pBvoh//k3+jm+Okr9ynzRf68R75Zv46efl39w3tW1y
v3h0E7+9RX6Mf76f+rHmfmj8rrm/bUvPXXO/sv2vuf+sS+9Tcz+xfq67PyxP
/Vx3vbd+qbt+35f6pe56bHzMXF9/nPiYuV5avTPXv++lemeuZ7afmevTN9N+
5q43f0w8zqUT3Pfn1VzpwVPpOXLXPTtX5NVG9evCxKNCPEPni6qF+mlmeq6i
Wqz+sHNAUfUX3yelOkZfma5+xEvxcUx6zo/mJPHL5vayekx8GZL0qazOUf1N
18rqLdX39PTcMU89muoU94tW75ifxqT+LXx+OiH1X5xv2+v94MftqR6Fz0tz
E//jPvHM1CcxH9nvFz4ffSLtU9wnGt9iHno97XPh89CPEm/iPvEu7S/8+zCt
Fz7/fJB0LO4TTS9j3rH3K3zesXko7hON7zHfDEmfK3y+2ZHqFveJueoLv69J
vCh8njG/j/vE7omnMb/Y/hU+v6xPOhb3idZvMa/8PulT4fOK+VncJ04Wv+if
v6f3KHw+eSLtR9wnmp7FPGL1KXweMb2O+0Tr95g/Tk/7Vvj88cv0fXGfuFf8
pj+/lfqxbDJvxPzRLmHMF1b/0ueLnyQex32i6U3MEw+nvit9nrA+j/vEseov
5gc7D5Q+P3w/8TbuE22+iHnB+FX6vGB+Heda07uYD2zeL30+uFD9RrxF/c08
MCDpROnzwCb1A3FDep/wf+Nv6f4/SHwlNr0Nv5+VfDr8frX4RDxM+oK/27we
/t5T9Sa2+SX83Poj/Hyx6kFseh/+bfN4+HcH7RfxWukbfn1q+p7w67v1PsR7
Uj3Cn63/wp8L/R6x+U2cZ29KvxN+fEOT+AvSV/zX5unwV+vf5tV/AekCs/I=

                  "], {{{
                    EdgeForm[], 
                    Directive[{
                    Opacity[0.2], 
                    Hue[0.67, 0.6, 0.6]}], 
                    Hue[0.67, 0.6, 0.6, 0.15], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJw1mXUcVdUShWcuSCkKgmCAlCAKglgoCoqUIgiChS0Giopdz8Tu7u7uTmxs
sFCxsbuePlvf+t6a98f+TezZ+8yce/baM3O7Td59wrRGRLyZEU1FdxL9U2OK
xrmSDxadXwYHiV4k+QDRFpL3F71Q8q6i/2jsonGe5MNFF9T8YaIXS95DtCF5
d9HzJR8l2lbykaKXSH5JdLTk2aK3Sz5JtKPkE0Uvk3ycaHvJx4peKvk00cUl
nyp6ueSzRDtLPlP0Csn7iM4neW/RCySfJ9pV8rmiV0q+SLSH5AtFr5J8l+jK
ku8UvUHydaJ9JV8req3km0T7S75R9DrJV4kuI/lK0Wsk3ye6quR7RW+U/Kjo
EMmPiN4s+QXRUZKfF71N8mWivSRfKnq15NdEx0p+VfQOyQ+Jri75QdGbJD8j
Olzy06K3Sn5SdKjkJ0Rvqd9tvOQ3RO8M/25/aexcvx+/w0Kan16/x26iKXla
/V7Y/a0xtezbir5X8lqS79F4P20/JPw7NtH6Pev3hDaVvFfJD2vME7+fxojw
79BM8/vW78F3Eg37wfMf0PggvX5t8QeKttL8v+r7Yl3zhvdj/W2iK0i+VfT6
8HfYsuF12J8supjkU+r7Ie42ko+o+A8RbS350Pqen9D4KC2vJ36mxsdp+/XD
3+nCsj+6vldoO8nHlPyCxqfiT9DYMPydLqL54+t7fVTjw3Q864h/VuOT9PoN
wudqgYb9wh/WdWh4P9a/IzpR8ruid4XPxaINx0l8LUR/13hL4zTJczS+EH+O
xpbizxbt0rDM+ThdtJPkM+r8cC66ST6/zscrGp+n5zcL67tr/oKa/1Lje75V
frPwOVpK8xfXeXoTm7T9NmF9T81fUvNva3yVlrcLn9slG/YT/zgXS0u+vM4H
tLfkK0q+XrSf5BvqfF4t2kfyNXUe52l8k5Z3Dp/TZRu2Y/5jjW/T63cVf7Po
AM3fkj7ft4uu1HB8fF/vaXydfv6OYZxYRfN3p/ECXFi+4X1Yz3e5YsP7sP4z
je/S++8eXjdQ8/fU+m80fkjL+4r/R+MX8bM0jg3jwBqyfziNB+DMapLvT+MN
dJDkB0rGbrDkGWX/b0ZaPiiMS2tq/rE0Pj0lOkzyzDSe/EfjJ/GPcyb4rTV+
TO9/QHjdWg3Psx5cGiH52TQ+gUtrN7wv+83mHaTP4ybif9P4Of286WEcX6Lh
75LvkXtgPckvp+8DcHMdyS+m8RO6bsPvBxm7MZJfKfuG6K9p+YQwrq6v+Tlp
fJ0rOqHh8wJezif6m8brGieH4xip+ecqHtaNa3ie9X/yjtLzR4Vxd4OG92U/
7o3lGv5O+T7nF/0jfX7PlNy0/MPPJcL3J/h6v/ih4fsX/L1b/OAwjw5snlq2
rAE7p9U6dPcYVuOhwlNwtUlhMXci2AmGMsedDFbvVXPYPCJ5VPh+B68eFz86
bMsa9h0e1jMPrs1XPGvAXjDu5fq9+d1bhfMB8PQZ8ePD+QR4+5T4sYW96MC+
Q8uWNWA1GPx84SW42SKcP3xS+olh7CVHACvBzFmlA5dbhuMiPu6lprUXe4Dd
x5Qf+MA90Cy816e1z8Ya26fxd0fOYTg/+azinKTxWuEluDl/OD9BRr9FzZ1W
3zaY+kYYn8HpBcL5yxel37rm0IGFYPZbYTwFV1uH85kvSz+55tCBzWDuB4VX
4NZC4XwHvH1X/A5hHh1YDAaTj3xd63YK/078BtyDzWsvbMBeMPDrMP5zD7QL
50Pg7Ufidwnz6MBaMPjTMN6Cu23D+dW3pZ9Wc9fVWQGTvwjjJbi5cDj/+q70
e9YcOrD2lvot+E0uC2MM+cH35ec+5Ss6sPiO8hMf54m2CZ8zzhh5T7J/GI/B
5fbFkyOC1WA0WEqOBrbOKB7dz5IPCeeD4OWPnAeNX8N4Cq52DM9hA1aDqeSL
zGN3ePguJ6cDS8CoP8J4CW4uWnuxBuwFg8kHfy67I8sWHdg7s/zCP+6BDhp/
h/ELHFssnF8ioz8mnI+DT+DUSeH8lfsoNY4P8+jA3lmlR8e9tXh4LXuAxWAw
+S342lzj1HBsxNhK44zyBR/AWjC1dRovwc0lw+tYD053Cq9jPXlP5/AczwCb
wei3az37nB3m0ZE7gcHkvgulc1nwE558eUrpFkzXP2Au+AuuIqMHX+8N27Ou
a/Ho1gzn0m3S+TQ8OnCY+mjhNB4zd184t55az+IZPHtKzf1d+3ThjPFRNpw3
kx+zD/txBwwNf5t8o3y3+9ezeCa2u9R3yDfHPb4II12Pgevgeft6J+Tjw8Jx
Ibev+MBN7FnXtHh05PbUAh3S9QD8iPKXeqCjaLfw3AzRkeFa4cFwPO1qfkbZ
sE/3msMGX/CpY+3HWvZoWmuJj/tr0XS9xz3G/fVoWP6fnm8yXT9QR6zLN5+u
R6hLyMcfC8voe4T9wH7x8oc5bFj7/1qkQ8XKffpkuP7oJH6p8D1CfbxE+j5B
37LqZeoL7jHq427p+ww77LlDR9de7DkmXNN0TtdD8GPKf+TO5e+S6fqcO5T7
FNxGRt+8eHTUMtQaXdL1Bjy6VhU774L7++nwPHY9xXdN10vUJ+NqDhv4Q8p3
YiY2YuxU9l3rfRAn8XKnc/+3rneF/aE1xzuhFqJW7Z6uV+HRPReW0fcqHt2E
cG3XI13fwaPrUnKP8r9NxUKs5BNLpfsP5ADkD+QJyOhbFo+OWo7ar2e6/oNH
hx/Uf73KH+ZeFN0oXBv2qnl4dO3Kd2Ih33g1XL/1Eb+M+KXT/Q3yDvIN8gj6
H8um8wnmyKXInakte6frS3h0L4Vl9L2LR7dpuJZcJl1PwqPrWTL6pcN8z4qN
/Inn8nzu1EnlKz5vHq45mcNHakNqUeLABh7d7PKZuMj/Xqx31LOe1zddn7MX
e66W7oeQY5B/0NshN6J2PbVse1es3O/LpW3Iqciv+qXrB2xZM6f2wI786vXw
PHbLil8+3S8ixyLf6p+uh6k/tgrzfSoW8rWV0/UvdfD2tRd7Yssa8jL2Y9/W
xaPbJlzbDkjXt/Do4OeKbhuueVdI1+fw21Y8yCuUv13Kd2IjH5xbe7BvH/Er
pvtb5IDkg/DU2NTW1PZvlw67BcOxEWP/+v5WStf/2LIG/p1wrMT8Tumw6xt+
Lu9j5Xp+9/KF2Mg/V0n318gxyTfJQ5HRL1Q8OmppegcD0/0DeHTvh2X0yxWP
bkq4l7Bqup8AP6X8R161/OtZvhIL+e2gdD+BvgL9gHnh743vrk3x6JjD5sOw
Pev6iV8z3Q8kR51Wc9hMDfcmhqT7D/QXdgv7Tb9i9fK/d8VCbOTPa6T7h+TI
5Mvkxcjo2xaPjt4EvYvB6f4FPLpPwjL6/sWj49lXFz5wZvoWHgwq/4ZUPH0q
NuIlP1+9/CUWYuLufDR8H3BHkocTP++BfHytdH1LnUs/o1/5gm83lL/ohpZ/
n4ftWbe8+LXT/VRy+D1rDps9wjUzdQXz2FFf0Jsld6H3QO9lWLrfQt9lr7Jl
DTy6r8Lz2A0oHt3e4R7N0PKPZ/HM4en+D3N7V3zIw8vfb8P9nJGc1XBdQP9x
RLo+gEdH74beD3p01Bz71Fr22C/cE8Iv+kujyr/vK8Z10vnZgHpXvFvqm3XT
/SZi5x2MqvXsxZ6sYz15IPnfShU774N654fwevZZsXh0B4Z7UfSWfhF/WLh3
tF66n02NQv0yOt2vwpY1I0seXe+DugJ71nUoHh29JnpVY9L9Knh0+EG/amz5
w9xPogeHe1kD613zPqm3fiob9llJ/Prp/jh1F/XW2NqPtQeXf7zzW2uPQRU7
7456a2K6f0Uf6wjpxqf7ZcTOOxhX74S+G/0v3g0y+pXDfmA/vvwZXL4RG/Xg
Bun+PzXa4dL9Hu63TeB3DM9Ry00P9+KoC4mHuKgPfysb9lm05rDBF3xiH/Zj
7fTam2cQCzGNq/gmlr+cXc4w3xNndqN0f44+Hf2rDdP/J1AzUj9SFyKjpz78
K2zPuoHFozs63OPbON0/hEdHHcj/FZuk68FhFTu+zqxn8Qye/UTFg83G9X42
Tff3tuA7DO/DftSI1KfMYUNvdFbN8UxkepEU8SPKhvWT0v08+nrHheNAnlTx
jKzY8If6c7P0/zXUuNS77BW1lj0aNY8d/bvN0/1J+pT0G5lrFI9u0/Ln6fK5
SdmzbrVwnMREX/PE8FyT4tHRt6Fnwz3O/b1l+v8yamzqc+pk/v/ZLl0v0ztt
Jv6UcG8UW2pnepv0VrdK28wu3dbp/unLtWbzkrcu/8aUr8RDPb9tup9KX5X/
G6jD+f9qm3Q93qz25zmDwnrmqdGp/1nbUvzp4d4qcy1qL/acr3wmTur9lvU8
nrt6+NseV2fz8Yqdd0BvlV7suHo2sdEP2K5s6DvQb6CfR7/2jVqzQMno6e/B
ozsr3NOl70f/j/9hzgn7Qf94h/Jncj1zTsW0Q83PrT22qvnJ9T4mVCzE+1bt
vX35Qn/iv7Ojg8g=
                    "]]}]}, {}, {}, {}, {}}}]}, {
                GridLines -> Dynamic[
                   Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                 Method -> {"GridLinesInFront" -> True}, Epilog -> {
                   DynamicBox[
                    Typeset`ToBoxes[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[1, {129, 2}, 3, CompressedData["
1:eJzt1Nsz3HcYx/GvEFGiYZvotEmaYAV1iJZWHZ+f05AOgyUTIkwiaGlYxyCx
DmODQZck3TSKbBrJRCSMlNqmTpE6DJtMK4nGMjWRFFU28mPt2mXpPhem/0Iu
cvGdz8X38vXM2ziazYrdQgjBV6B+/rVd4avGNHTYuiy6mtJgfV9YmsukQe9l
c7uGOQ1DFnV7daxp8Gstntz5OQ1eoqB42y9pcFa8yDqRSsNLxx5x6SANhm4W
FZIPF8GK8eSCMGERyJDjqHfPIhz1M0vVYywB+9bDAH78EqSMCTOLupdgZdhK
1rxDCs53wtuuxElBI8BA1CeUQmunrm3otmUwMex+fCNyGXZZrYnsmpbhN/Ml
7bytMoiS2lQ6RMiAU0wnmt6WQZgq6dsRDTkInTI0elhyeBz2mZDdIAexr1P7
ObICsaq+90aCVuAOf3vTzM0VyJKO19grVsDOdEE87aeAOoeOsEiBAqq3M6z1
XysgcMDYI99XCQvBGdeP1iphZ13wsSSJEqR/zhz28V6F8GHt64f5q9BQHU89
+nsV2vyKPtJxWQPfDqvgnLI1uMgo62t5sQYxB9N4TAcVmOwR3FgrVEH1HHf9
+zEVVBUs3T5ltQ4s5e5qrcJ1kHuWjGqK18GYxUlwtdwAbW9r9y/yNyB57WRc
4vAGnHzAfsU1INRcZulQqwuh2ipngzRiCCXheHn+rF7mN7X28bGEuuATbDQc
R6gk5S/jV+MJZRZTEkexCfWdo3lO3hlCiZgFifZnCbWFMR41o97keZ5HIIdQ
/j/KtPflE0pTr/981zlCOa/sK0wtUv9PZacfKCbURLfNEV4JoX5N5++JKiMU
fWJBn1FOKIvAQxt96r1kqZq04RHqkdGRJ5Pq1dK628uvIJQLrdt2qJJQqRMx
N1Xq3byzt/fzZtzP5l1s+tAGZ2LR54dcuQo74DWffgk7wB9gD2AHnHJjLbED
BXNBEuyAQb95BjoePDvCRceW+IUpdLT8mFeNjo3X2AJ0PC3YMYWOnyY55KGj
fc/7Eejo+dDtHDr63PpH867asVyX1YuO/W6UGB3ftUxxRcfqy8cn0XH32NMx
dHwu2GaEji17OQJ0zE7M5KAj18OuFh0LZhIN0bHXMGEAHXdJ60XoGF5/iomO
k89fdaFj5NxyIzpON8IcOrZKfRPQ8bT+iBs6chr2h6Dj+Y2mNnSsOvAgCR2n
hy9+jY5mgf+2oWMatzAEHbe6j3+CjqWDwhh0DBWzxOho2J56DR3/Ch25h46S
VBnjstqRjq65j45Oz0gzOlZo1kvQcVTjaR46xnG7QtBxZtQmBx3bF9kKdGS6
1I+gY/G8yTF0lIdyArADX3U+c8cO+PLKjbED2nayaewAN20wBTuQr2QXo/fr
6KEs7MBxETMBOwA1Yn/swIabFwM7kFNgVIsdmJ9N5mEHIliiPOyAi2l+NHZA
2Ttrjh1IsPH+ADswxr+i26/ee3EhEuyA5e+NE9iBKkedP7AD71yN7sEOZOt0
/vT/nSng7b6Z+x8LG/xx
                    "], CompressedData["
1:eJxV1H8w1Hkcx/GPlJzqYq/c3FVX2MKh3HHnJL2/+TF0o8HSRL+mhDsuVvpF
2TA2GtxS3XY5pEtNUowuZ69TSufHZGvuVC7LXJO6uI5NX9ayy3L7nvE2c398
5zGv/z6f+cz3aRMlFsXMYoxlGj80qLQhctyGB97ySAx6a7XX0Do7Hn44NmpA
ne8qco8JefAdOHAGnfeypt7Engd5q7gVbXMoX2buzIPnsRhHNLA2p2fR5zxk
9oeoUV9lSNzqL3mwbLE/iK7VvUjZnczDmqMdUvSlR6Mq9z4PN+IGX6FW3g4F
6g+HwPFjWTHqJHh8ShE/BFUXxGUoa/Po9GscgkNlC1+hWwNXJs8TDMOnie7p
qPjKg03yuGFwa3x/G7qvS3E4+84w+DzwPo6OtTtpaxZqwP/KP6bXja69Fll3
LlYD+RaiJtRkk6WyWaGBFm9OhdbetlgdPncE3nXctw61tbrz6NKOESg+u6sH
Xew0oXStHoElXU+60N/sh83S52jhedlca3SnxqXQfZsWbiyTlKGSHD7B7qoW
UhMOS9AIQ+K3HSajIN3gWooqPA+aNIpGIbMvwQp9FPGZQlw5Ck1W8a2oKsCz
/jgbg8WaCiUaY2h+ryNkDCIr9grRa/L51X2Xx6Dn+ZsGNEXTXeKmG4Md/SNV
qKvdoKo3UAe9VdCPlrvfithRpoNaTUA8Wjxf4LzgrQ4OLejwRoNbbTZkBOhB
UrkiDB0MPXhxa6keTk5V16GLykO3J6r1ULTqXiKq+bNvs7/fOPS2n/4ajWw3
u7hZPg4rg/+tQyuL47iHf4/DfmlWGFoXmP2RudcEzFnf/QkacMspNC1vAnLv
K6LR04K85hsvJiBcJVKh0Wv2y4TuBrCqT76A2i4tuzSRZYC/wjtuosX90snv
uwygTtYKzhotyhy+utdpEviokruoSL+keHbWJHg+ZTXoqM+JTlPVJBSYVqhR
G5Ekfp3jFHSaPElHzfyc13+RMQWx0oYwNGliT2xC+xT0dbqkoXvuid9ILRlX
PyTWof2Hc9tqvRgn9KroQOsKX4eYRDMuZ8B2O6qW+Pr8bHQ0XLIJFX5T6hYX
w7ivbj9dj57yD7Vuj2VcgCzfBk3U/9J9Po5xZq7aXnRl9IlYTsw46f77+9Dv
POzT0o8wLkMvzkGVwswEt6OMexvVloLOEnTv7DO6SymMR5MGZBuCJYyDElUQ
GvSj1mx5BuOmvH0FqOm8lpMNxxmXlmldiq4dW56VnM24gddJMjTpVeqBVTmM
2yZSpqPP7rhskZ1gnJddRhT66wH50p15jNM3vbZH+d2DCwT5jIt38fsAdQje
ONVstEt+zqLF6BlHQ4+LjHE3Y8PU6EPrLY97jDr+XvUMnT37epO8gHFFHuZ/
oF68Rd3GQsa9cz6qEU1+Fn3ZYDTV/PZP6P97ppvpD23qD23qD23qD23qD23q
D23qD23qD23qD23qz8x5pvtDm/pDm/pDm/pDm/pDm/pDm/pDm/pDm/pDm/pD
m/pDm/pDm/pDm/pDm/pDm/pDm/pDm/pDm/pDm/pDm/pDm/pDm/pDm/pDm/pD
m/pDm/pDm/oz8x7T/Zk5/3R/aM/0Z3pTf2hTf2hTf2hTf2hTf2hTf2hTf2bu
N90f2tQL2vT/0P4PNvn8cQ==
                    "], CompressedData["
1:eJxN1H8s1HEcx/E7P87vcMlaKTs/wg7ZKPlR86uhMc6YH8Umx3aK08WoCPNz
FFJXa5IaZmGmJdciUqnl8gem+bHZUFmTJCY/+7V5fd73x3ePvf77fPbZ9yk4
Kw1LVONwOPn/vv8G1fZEbwq4XrDb0eOnpyVp/1JRdtWK1Jtt7+LakAO29Qe0
7cmAjpJpk6OkrzJU4niKdF+fyYqXkbOufeNl70nj47aVC/vUmEL+SLUimeQM
uI759ZExAdYyPb46U/roQ7BcQl6YUGQW95JrQ8LVdkMNpntrdOf9JJIbbKTs
V5AdL3Qdw7U0mRbGvcONseQe4ZbSqY18bbPMy9XkMeNWHKpcTpM5JUspli1k
1Hbq9VGuFlPhlsHtCyOHo44opM3kuL9bVxFHm5m43b97NJRsleu3zTWRWSuT
95zXSSfLxfEvATrMepfuqNg6skafb2/wgwx5J/DO89dlLooyGmJqSZN60ZnU
BXLl41zEST89ZvQQryFCTjbXSLwGP5GdAcUHtT30mf7dQlF2OXmTX97/ZIYU
H75YYeViwLQwq2vcKiBr5gt/35kg7+Yvt5wX7mKGbeyv0Sggf/mUjqmPk4Kw
nGRPO0Mmz8/+xLE8Mm0rISlliEx4Jf1eaGTEnM8sG+jwIDurvoZyxeRCjq/P
UxWtztU6SxLJ6pMi06EkMnXj2eQDCWktLk3ykpK3XG2ycy+TSqv8FOcrpBp/
Mm5OxbRvFd4hOWTQw1WeeR6prvf2Rk8R6b5mXiArJtM+X0o/VEJO9TpEVpSS
z9PlZnHl5FL8ogH/GmkbEvinX8XbdtvTDhXkoGnkyLSKGhqP38grSY8l3c7A
KlI2JW7aVhEd2+vgF74p0GHdwUZ3sNEdbHQHG93BRnew0R1sdAcb3cFGd9h5
drqDje5gozvY6A42uoON7mCjO9joDja6g43uYKM72OgONrqDje5gozvY6A42
uoON7mCjO9joDja6g43uYKM72OgONrqDje5gozvY6A57j53usPPvdAcb3cFG
d7DRHWx0BxvdwUZ3sNEdbHSH3W+nO9joBDb+G+y/DmsFQA==
                    "], 
                    Automatic, 
                    Hold[
                    Nearest[CompressedData["
1:eJxV1H8w1Hkcx/GPlJzqYq/c3FVX2MKh3HHnJL2/+TF0o8HSRL+mhDsuVvpF
2TA2GtxS3XY5pEtNUowuZ69TSufHZGvuVC7LXJO6uI5NX9ayy3L7nvE2c398
5zGv/z6f+cz3aRMlFsXMYoxlGj80qLQhctyGB97ySAx6a7XX0Do7Hn44NmpA
ne8qco8JefAdOHAGnfeypt7Engd5q7gVbXMoX2buzIPnsRhHNLA2p2fR5zxk
9oeoUV9lSNzqL3mwbLE/iK7VvUjZnczDmqMdUvSlR6Mq9z4PN+IGX6FW3g4F
6g+HwPFjWTHqJHh8ShE/BFUXxGUoa/Po9GscgkNlC1+hWwNXJs8TDMOnie7p
qPjKg03yuGFwa3x/G7qvS3E4+84w+DzwPo6OtTtpaxZqwP/KP6bXja69Fll3
LlYD+RaiJtRkk6WyWaGBFm9OhdbetlgdPncE3nXctw61tbrz6NKOESg+u6sH
Xew0oXStHoElXU+60N/sh83S52jhedlca3SnxqXQfZsWbiyTlKGSHD7B7qoW
UhMOS9AIQ+K3HSajIN3gWooqPA+aNIpGIbMvwQp9FPGZQlw5Ck1W8a2oKsCz
/jgbg8WaCiUaY2h+ryNkDCIr9grRa/L51X2Xx6Dn+ZsGNEXTXeKmG4Md/SNV
qKvdoKo3UAe9VdCPlrvfithRpoNaTUA8Wjxf4LzgrQ4OLejwRoNbbTZkBOhB
UrkiDB0MPXhxa6keTk5V16GLykO3J6r1ULTqXiKq+bNvs7/fOPS2n/4ajWw3
u7hZPg4rg/+tQyuL47iHf4/DfmlWGFoXmP2RudcEzFnf/QkacMspNC1vAnLv
K6LR04K85hsvJiBcJVKh0Wv2y4TuBrCqT76A2i4tuzSRZYC/wjtuosX90snv
uwygTtYKzhotyhy+utdpEviokruoSL+keHbWJHg+ZTXoqM+JTlPVJBSYVqhR
G5Ekfp3jFHSaPElHzfyc13+RMQWx0oYwNGliT2xC+xT0dbqkoXvuid9ILRlX
PyTWof2Hc9tqvRgn9KroQOsKX4eYRDMuZ8B2O6qW+Pr8bHQ0XLIJFX5T6hYX
w7ivbj9dj57yD7Vuj2VcgCzfBk3U/9J9Po5xZq7aXnRl9IlYTsw46f77+9Dv
POzT0o8wLkMvzkGVwswEt6OMexvVloLOEnTv7DO6SymMR5MGZBuCJYyDElUQ
GvSj1mx5BuOmvH0FqOm8lpMNxxmXlmldiq4dW56VnM24gddJMjTpVeqBVTmM
2yZSpqPP7rhskZ1gnJddRhT66wH50p15jNM3vbZH+d2DCwT5jIt38fsAdQje
ONVstEt+zqLF6BlHQ4+LjHE3Y8PU6EPrLY97jDr+XvUMnT37epO8gHFFHuZ/
oF68Rd3GQsa9cz6qEU1+Fn3ZYDTV/PZP6P97ppvpD23qD23qD23qD23qD23q
D23qD23qD23qD23qz8x5pvtDm/pDm/pDm/pDm/pDm/pDm/pDm/pDm/pDm/pD
m/pDm/pDm/pDm/pDm/pDm/pDm/pDm/pDm/pDm/pDm/pDm/pDm/pDm/pDm/pD
m/pDm/pDm/oz8x7T/Zk5/3R/aM/0Z3pTf2hTf2hTf2hTf2hTf2hTf2hTf2bu
N90f2tQL2vT/0P4PNvn8cQ==
                    "] -> CompressedData["
1:eJxN1H8s1HEcx/E7P87vcMlaKTs/wg7ZKPlR86uhMc6YH8Umx3aK08WoCPNz
FFJXa5IaZmGmJdciUqnl8gem+bHZUFmTJCY/+7V5fd73x3ePvf77fPbZ9yk4
Kw1LVONwOPn/vv8G1fZEbwq4XrDb0eOnpyVp/1JRdtWK1Jtt7+LakAO29Qe0
7cmAjpJpk6OkrzJU4niKdF+fyYqXkbOufeNl70nj47aVC/vUmEL+SLUimeQM
uI759ZExAdYyPb46U/roQ7BcQl6YUGQW95JrQ8LVdkMNpntrdOf9JJIbbKTs
V5AdL3Qdw7U0mRbGvcONseQe4ZbSqY18bbPMy9XkMeNWHKpcTpM5JUspli1k
1Hbq9VGuFlPhlsHtCyOHo44opM3kuL9bVxFHm5m43b97NJRsleu3zTWRWSuT
95zXSSfLxfEvATrMepfuqNg6skafb2/wgwx5J/DO89dlLooyGmJqSZN60ZnU
BXLl41zEST89ZvQQryFCTjbXSLwGP5GdAcUHtT30mf7dQlF2OXmTX97/ZIYU
H75YYeViwLQwq2vcKiBr5gt/35kg7+Yvt5wX7mKGbeyv0Sggf/mUjqmPk4Kw
nGRPO0Mmz8/+xLE8Mm0rISlliEx4Jf1eaGTEnM8sG+jwIDurvoZyxeRCjq/P
UxWtztU6SxLJ6pMi06EkMnXj2eQDCWktLk3ykpK3XG2ycy+TSqv8FOcrpBp/
Mm5OxbRvFd4hOWTQw1WeeR6prvf2Rk8R6b5mXiArJtM+X0o/VEJO9TpEVpSS
z9PlZnHl5FL8ogH/GmkbEvinX8XbdtvTDhXkoGnkyLSKGhqP38grSY8l3c7A
KlI2JW7aVhEd2+vgF74p0GHdwUZ3sNEdbHQHG93BRnew0R1sdAcb3cFGd9h5
drqDje5gozvY6A42uoON7mCjO9joDja6g43uYKM72OgONrqDje5gozvY6A42
uoON7mCjO9joDja6g43uYKM72OgONrqDje5gozvY6A57j53usPPvdAcb3cFG
d7DRHWx0BxvdwUZ3sNEdbHSH3W+nO9joBDb+G+y/DmsFQA==
                    "]]]][#/{
                    2., 1.9999999183673474`}]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                     TraditionalForm, Graphics]]}, AspectRatio -> 
                 NCache[GoldenRatio^(-1), 0.6180339887498948], 
                 PlotRange -> {{2.141592653589793, 4.141592653589793}, {
                  2.1415926944061194`, 4.141592612773467}}, AspectRatio -> 
                 NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> True, 
                 AxesLabel -> {None, None}, AxesOrigin -> {2.5, 2.1}, 
                 BaseStyle -> {CellBaseline -> Baseline}, FrameTicksStyle -> 
                 Directive[FontFamily -> "Times", FontSize -> 10], 
                 LabelStyle -> {FontFamily -> "Verdana", FontSize -> 10}, 
                 Method -> {}, PlotRange -> 
                 NCache[{{-1 + Pi, 1 + Pi}, {2.1415926944061194`, 
                    4.141592612773467}}, {{2.141592653589793, 
                   4.141592653589793}, {2.1415926944061194`, 
                   4.141592612773467}}], PlotRangeClipping -> True, 
                 PlotRangePadding -> {
                   Scaled[0.02], 
                   Scaled[0.02]}, Prolog -> {
                   Opacity[0], 
                   TagBox[
                    RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
                 TicksStyle -> 
                 Directive[FontFamily -> "Times", FontSize -> 10]}], 
               Antialiasing -> True, StripOnInput -> False], 
              TagBox[
               GridBox[{{
                  GraphicsBox[{
                    RGBColor[0.24720000000000014`, 0.24, 0.6], {
                    AbsoluteThickness[2], 
                    LineBox[{{0, 0}, {1, 0}}]}}, ImageSize -> 13, 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                  "z", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                   LineIndent -> 0, {FontFamily -> "Verdana", FontSize -> 10}, 
                   GrayLevel[0.5], StripOnInput -> False]}, {
                  GraphicsBox[{
                    RGBColor[0.6, 0.24, 0.4428931686004542], {
                    AbsoluteThickness[2], 
                    LineBox[{{0, 0}, {1, 0}}]}}, ImageSize -> 13, 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                  "\[Pi]", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                   LineIndent -> 0, {FontFamily -> "Verdana", FontSize -> 10}, 
                   GrayLevel[0.5], StripOnInput -> False]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{0.3}}, "Rows" -> {{0.3}}}],
                "Grid"]}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  
                  ItemBox[#2, Alignment -> {Inherited, Bottom}, 
                   DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  RowBox[{"(", "\[NoBreak]", 
                    GridBox[{{
                    StyleBox[
                    "Right", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Bottom", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}]}], 
                "]"}]& )], TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Number line", "scanner" -> "Reduce", "id" -> 
     "NumberLine", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{
                 RGBColor[0.24720000000000014`, 0.24, 0.6], {
                  Thickness[Large], 
                  Arrowheads[{0.03}], 
                  
                  ArrowBox[{{3.141592653589793, 
                   0.20734511513692636`}, {-3.141592653589793, 
                   0.20734511513692636`}}]}, 
                 TagBox[
                  TooltipBox[{
                    PointSize[0.02], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    PointBox[{3.141592653589793, 0.20734511513692636`}]}, 
                   "3.141592653589793`"], 
                  Annotation[#, 3.141592653589793, "Tooltip"]& ]}}, ImageSize -> 
               300., Axes -> {True, False}, AxesStyle -> {}, 
               PlotRange -> {{-3.455751918948773, 3.455751918948773}, 
                 Automatic}, AxesOrigin -> {0, 0}], "\"\""}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Right", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "z <= pi", "score" -> "0.277083", "level" -> "low"}, {}]}]}, 
   Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "Math", "timedout" -> "", "timedoutpods" -> "", "timing" -> "8.001", 
    "parsetiming" -> "0.137", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa8920e6deii4ha7fd7200004d0cfi0e909ca9ce", "host" -> 
    "http://www4b.wolframalpha.com", "server" -> "59", "related" -> "", 
    "version" -> "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -8., 
    "Date" -> {2014, 2, 2, 23, 38, 57.891038`8.5151863102524}, "Line" -> 50, 
    "SessionID" -> 23770178463743537604}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "InequalityPlot", "Inequality plot", 1, 1, "Input", 
    "Plot[{z, Pi}, {z, -1 + Pi, 1 + Pi}]"}, Typeset`open$$ = True, 
   Typeset`newq$$ = "plot 0 <= Arg(z) <= pi/4"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{560., {667., 19.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJxNxW0sFHAAB+A7zrkc4ZIPpew4YXdko8SpeZ3TmLtb5qXY5Nx2itPFqFyY
11FH6mrtkhpmYaaluxaR6mq5fDimOTYbKmuSxIRcbx/6/+7Ds4d9Wi7OtqJQ
KAl//Tu+eTD1J5sa/v8Bf/73ME/Me66ru8zBzPnefqo3HvFp3cfgYUFfzazL
YRxlEMr8j+PQzbniTAWeDx421b3Fzkd9Gpb2WJG5rPEmXQ6mjARPRg/jNIGX
gsmyJssfvEtQy/C5KV1R9RDeMHLXex1p5NDuVO1dKaYmOBn0Otz3zM7/hK0N
2cN5aKw9He/mbhsCevBL71V6qQ2dnLHm1xh0EitrVnI9u3CKOe/qBNWWrAsp
pA6L8VjKIZ28E5tiQ/qrKAxytlm/a0KIu9X2PQsduHht+k7gJg7wXDZ9Euwg
twYNpKS3YI09i+fwDSe+YUeUxdqRl0WFbWnN2KVVdCpvCa+9X0iKiWaSU430
tiQ17tTIwkc/YK2gej+Db0+OHeCKSurxdVa9/tEclhw8r+IEOZA93Fratyuw
ZrHy160pfLt8tessdydZvLVXQ6vAPyJrJ61NmC1W5oT5OpLp0bxjR8pw/naW
NNeIs17Iv1Y6OZEXi+pG+vhY2/hZSJXgJWVU5GOLOWeaA2XZuClG5GqU4ryt
J9P3ZNhLUisNl+Mbwd4lpRexgVOeG3gJW7GmMxYszv+iikhU4vj763T3MmzN
fH1tsAqHbrhXKKpx/scLBQdq8MyQX7KqFj8tULtl1OOVzGUH1hXskxj3W2/x
TV/zrJ8Kj7omj89aTKM9fKVuwPwVO21cI1bMSDrMFv8BdiTpCg==
     "]]}, 
   {Hue[0.9060679774997897, 0.6, 0.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQ7TN3X+RvRUYHCV2XkN+KnA7OpwMy9bwQfKufjyoS
ixD8x+YHb3adRPAFbTX630oxwfnaQpcnbc9C8BlOmd9wOYjgR3moFnELMcP5
+SvP+E7NRPALb20vb9uP4P+4qP1tAz8Lwj1rIrfNS0PwGX0FTh/djuBv2cul
F8LOCucrCe6/tDQWwRfV/nPaYB2Cf1j9M1s9KxucH/dFd4JJNIJf2/4xV3k1
gh/xN6/3KiM7nL/dspTxYBCCfynCdHv+KgT/prvl7lYGDjg/9e9R4asBCP6a
qTzrni9H8Cu+3J5j/BPBN1B+f/OZByecv9hkT0TsfAR/No+QDu8HBN//uKJj
gzsXnP8+sHRJ1FwEX2RxYEzeWwT/y7Xnoa4u3HB+5EW2JaFTEfxVszMdzj5B
8Ld5tMlxWPPA+e57tANruhH8yULdRzc/QvBT9Iv7VEx4EfEhM3/pn2YEf/br
ln/TbyH4Mxs/r87R5oPzg35Jz2ZpRvC/O3XcYL6J4CsG1WbZaPLD+WwuOnYW
DQh+wZ/ktNyLCH7yofx3LQICcP7r8q5TW6wR/G0TXgYwpiD4U8zVa+qrEPyi
eynL/05A8AGfeR3V
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{2.5, 2.1},
  Method->{},
  PlotRange->
   NCache[{{-1 + Pi, 1 + Pi}, {2.1415926944061194`, 4.141592612773467}}, {{
    2.141592653589793, 4.141592653589793}, {2.1415926944061194`, 
    4.141592612773467}}],
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{{3.600401914322879*^9, 3.600401938143916*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Arg", "[", "0", "]"}]], "Input",
 CellChangeTimes->{{3.6004019926512938`*^9, 3.600401995455998*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.600401996023295*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Arg", "[", 
  RowBox[{"Pi", "/", "4"}], "]"}]], "Input",
 CellChangeTimes->{{3.600402008245905*^9, 3.600402011502327*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.600402012117049*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Arg", "[", 
  RowBox[{"Pi", "/", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.60040201459515*^9, 3.600402017715111*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.6004020185587597`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Arg", "[", "I", "]"}]], "Input",
 CellChangeTimes->{{3.600402019772735*^9, 3.600402022445539*^9}}],

Cell[BoxData[
 FractionBox["\[Pi]", "2"]], "Output",
 CellChangeTimes->{3.600402022801697*^9}]
}, Open  ]]
},
WindowSize->{959, 1014},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
FrontEndVersion->"9.0 for Linux x86 (64-bit) (February 7, 2013)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 344, 10, 31, "Input"],
Cell[926, 34, 622, 16, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1585, 55, 179, 3, 31, "Input"],
Cell[1767, 60, 194, 4, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1998, 69, 47344, 846, 68, "WolframAlphaShortInput"],
Cell[49345, 917, 354, 11, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49736, 933, 267, 8, 31, "Input"],
Cell[50006, 943, 484, 10, 28, "Message"],
Cell[50493, 955, 451, 10, 28, "Message"],
Cell[50947, 967, 101, 2, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51085, 974, 24350, 475, 884, "WolframAlphaShortInput"],
Cell[75438, 1451, 633, 21, 65, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[76108, 1477, 137701, 2754, 2948, "WolframAlphaShortInput"],
Cell[213812, 4233, 352, 7, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[214201, 4245, 324, 8, 31, "Input"],
Cell[214528, 4255, 205, 3, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[214770, 4263, 165, 4, 31, "Input"],
Cell[214938, 4269, 87, 2, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[215062, 4276, 397, 12, 31, "Input"],
Cell[215462, 4290, 224, 5, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[215723, 4300, 20691, 502, 91, "WolframAlphaShortInput"],
Cell[236417, 4804, 898, 26, 51, "Output"]
}, Open  ]],
Cell[237330, 4833, 1082, 33, 31, "Input"],
Cell[CellGroupData[{
Cell[238437, 4870, 54996, 1229, 33361, "WolframAlphaShortInput"],
Cell[293436, 6101, 839, 26, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[294312, 6132, 950, 29, 52, "Input"],
Cell[295265, 6163, 350, 10, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[295652, 6178, 163, 4, 31, "Input"],
Cell[295818, 6184, 113, 2, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[295968, 6191, 310, 8, 31, "Input"],
Cell[296281, 6201, 247, 6, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[296565, 6212, 269, 8, 60, "Input"],
Cell[296837, 6222, 387, 9, 28, "Message"],
Cell[297227, 6233, 291, 8, 60, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[297555, 6246, 269, 8, 60, "Input"],
Cell[297827, 6256, 238, 7, 60, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[298102, 6268, 231, 6, 31, "Input"],
Cell[298336, 6276, 234, 6, 49, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[298607, 6287, 321, 10, 31, "Input"],
Cell[298931, 6299, 391, 9, 28, "Message"],
Cell[299325, 6310, 274, 7, 28, "Message"]
}, Open  ]],
Cell[CellGroupData[{
Cell[299636, 6322, 17349, 430, 68, "WolframAlphaShortInput"],
Cell[316988, 6754, 237, 6, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[317262, 6765, 162, 4, 31, "Input"],
Cell[317427, 6771, 87, 2, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[317551, 6778, 124, 2, 31, "Input"],
Cell[317678, 6782, 137, 3, 30, "Output"]
}, Open  ]],
Cell[317830, 6788, 118, 2, 31, "Input"],
Cell[317951, 6792, 91, 1, 31, "Input"],
Cell[CellGroupData[{
Cell[318067, 6797, 26058, 529, 127, "WolframAlphaShortInput"],
Cell[344128, 7328, 971, 28, 72, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[345136, 7361, 17619, 430, 68, "WolframAlphaShortInput"],
Cell[362758, 7793, 270, 7, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[363065, 7805, 951, 29, 31, "Input"],
Cell[364019, 7836, 178, 5, 60, "Output"]
}, Open  ]],
Cell[364212, 7844, 94, 1, 31, "Input"],
Cell[CellGroupData[{
Cell[364331, 7849, 111584, 2288, 68, "WolframAlphaShortInput"],
Cell[475918, 10139, 384, 11, 42, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[476339, 10155, 616, 17, 31, "Input"],
Cell[476958, 10174, 555, 11, 54, "Message"],
Cell[477516, 10187, 302, 9, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[477855, 10201, 279, 8, 31, "Input"],
Cell[478137, 10211, 472, 10, 28, "Message"]
}, Open  ]],
Cell[CellGroupData[{
Cell[478646, 10226, 643, 18, 49, InheritFromParent],
Cell[479292, 10246, 2219, 43, 252, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[481548, 10294, 105, 3, 31, "Input"],
Cell[481656, 10299, 148, 4, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[481841, 10308, 716, 24, 31, "Input"],
Cell[482560, 10334, 294, 9, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[482891, 10348, 423, 14, 49, "Input"],
Cell[483317, 10364, 1950, 39, 238, "Output"]
}, Open  ]],
Cell[485282, 10406, 308, 9, 31, "Input"],
Cell[CellGroupData[{
Cell[485615, 10419, 232, 6, 31, "Input"],
Cell[485850, 10427, 188, 5, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[486075, 10437, 175, 4, 31, "Input"],
Cell[486253, 10443, 70, 1, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[486360, 10449, 858, 29, 31, "Input"],
Cell[487221, 10480, 1257, 38, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[488515, 10523, 26069, 529, 797, "WolframAlphaShortInput"],
Cell[514587, 11054, 922, 27, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[515546, 11086, 198, 5, 31, "Input"],
Cell[515747, 11093, 100, 1, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[515884, 11099, 376, 11, 31, "Input"],
Cell[516263, 11112, 411, 11, 42, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[516711, 11128, 1005, 30, 31, "Input"],
Cell[517719, 11160, 384, 10, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[518140, 11175, 689, 23, 31, "Input"],
Cell[518832, 11200, 264, 7, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[519133, 11212, 372, 11, 31, "Input"],
Cell[519508, 11225, 270, 7, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[519815, 11237, 339, 9, 70, "Input"],
Cell[520157, 11248, 74, 1, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[520268, 11254, 45457, 828, 708, "WolframAlphaShortInput"],
Cell[565728, 12084, 3518, 66, 251, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[569283, 12155, 33194, 610, 703, "WolframAlphaShortInput"],
Cell[602480, 12767, 2140, 44, 254, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[604657, 12816, 124, 2, 31, "Input"],
Cell[604784, 12820, 70, 1, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[604891, 12826, 146, 3, 31, "Input"],
Cell[605040, 12831, 70, 1, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[605147, 12837, 145, 3, 31, "Input"],
Cell[605295, 12842, 72, 1, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[605404, 12848, 122, 2, 31, "Input"],
Cell[605529, 12852, 94, 2, 77, "Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
